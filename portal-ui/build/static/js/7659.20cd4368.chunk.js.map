{"version":3,"file":"static/js/7659.20cd4368.chunk.js","mappings":"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","sources":["screens/Console/Common/ModalWrapper/ConfirmDialog.tsx","screens/Console/NotificationEndpoints/CustomForms/ResetConfigurationModal.tsx","screens/Console/NotificationEndpoints/CustomForms/EditConfiguration.tsx","screens/Console/Configurations/ConfigurationPanels/ConfigurationForm.tsx"],"sourcesContent":["import React from \"react\";\nimport {\n  Button,\n  ButtonProps,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n} from \"@mui/material\";\nimport { LoadingButton } from \"@mui/lab\";\nimport IconButton from \"@mui/material/IconButton\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { deleteDialogStyles } from \"../FormComponents/common/styleLibrary\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...deleteDialogStyles,\n  });\n\ntype ConfirmDialogProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n  onCancel?: () => void;\n  onConfirm: () => void;\n  classes?: any;\n  title: string;\n  isLoading?: boolean;\n  confirmationContent: React.ReactNode | React.ReactNode[];\n  cancelText?: string;\n  confirmText?: string;\n  confirmButtonProps?: Partial<ButtonProps>;\n  cancelButtonProps?: Partial<ButtonProps>;\n  titleIcon?: React.ReactNode;\n};\n\nconst ConfirmDialog = ({\n  isOpen = false,\n  onClose,\n  onCancel,\n  onConfirm,\n  classes = {},\n  title = \"\",\n  isLoading,\n  confirmationContent,\n  cancelText = \"Cancel\",\n  confirmText = \"Confirm\",\n  confirmButtonProps = {},\n  cancelButtonProps = {},\n  titleIcon = null,\n}: ConfirmDialogProps) => {\n  return (\n    <Dialog\n      open={isOpen}\n      onClose={(event, reason) => {\n        if (reason !== \"backdropClick\") {\n          onClose(); // close on Esc but not on click outside\n        }\n      }}\n      className={classes.root}\n      sx={{\n        \"& .MuiPaper-root\": {\n          padding: \"1rem 2rem 2rem 1rem\",\n        },\n      }}\n    >\n      <DialogTitle className={classes.title}>\n        <div className={classes.titleText}>\n          {titleIcon} {title}\n        </div>\n        <div className={classes.closeContainer}>\n          <IconButton\n            aria-label=\"close\"\n            className={classes.closeButton}\n            onClick={onClose}\n            disableRipple\n            size=\"small\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </div>\n      </DialogTitle>\n\n      <DialogContent className={classes.content}>\n        {confirmationContent}\n      </DialogContent>\n      <DialogActions className={classes.actions}>\n        <Button\n          className={classes.cancelButton}\n          onClick={onCancel || onClose}\n          disabled={isLoading}\n          type=\"button\"\n          {...cancelButtonProps}\n          variant=\"outlined\"\n          color=\"primary\"\n        >\n          {cancelText}\n        </Button>\n\n        <LoadingButton\n          className={classes.confirmButton}\n          type=\"button\"\n          onClick={onConfirm}\n          loading={isLoading}\n          disabled={isLoading}\n          variant=\"outlined\"\n          color=\"secondary\"\n          loadingPosition=\"start\"\n          startIcon={<React.Fragment />}\n          autoFocus\n          {...confirmButtonProps}\n        >\n          {confirmText}\n        </LoadingButton>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default withStyles(styles)(ConfirmDialog);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { DialogContentText, LinearProgress } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { deleteDialogStyles } from \"../../Common/FormComponents/common/styleLibrary\";\nimport { setErrorSnackMessage } from \"../../../../actions\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport api from \"../../../../common/api\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport { ConfirmDeleteIcon } from \"../../../../icons\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    wrapText: {\n      maxWidth: \"200px\",\n      whiteSpace: \"normal\",\n      wordWrap: \"break-word\",\n    },\n    ...deleteDialogStyles,\n  });\n\ninterface IResetConfiguration {\n  classes: any;\n  configurationName: string;\n  closeResetModalAndRefresh: (reloadConfiguration: boolean) => void;\n  setErrorSnackMessage: typeof setErrorSnackMessage;\n  resetOpen: boolean;\n}\n\nconst ResetConfigurationModal = ({\n  classes,\n  configurationName,\n  closeResetModalAndRefresh,\n  setErrorSnackMessage,\n  resetOpen,\n}: IResetConfiguration) => {\n  const [resetLoading, setResetLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (resetLoading) {\n      api\n        .invoke(\"GET\", `/api/v1/configs/${configurationName}/reset`)\n        .then((res) => {\n          setResetLoading(false);\n          closeResetModalAndRefresh(true);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setResetLoading(false);\n          setErrorSnackMessage(err);\n        });\n    }\n  }, [\n    closeResetModalAndRefresh,\n    configurationName,\n    resetLoading,\n    setErrorSnackMessage,\n  ]);\n\n  const resetConfiguration = () => {\n    setResetLoading(true);\n  };\n\n  return (\n    <ConfirmDialog\n      title={`Restore Defaults`}\n      confirmText={\"Yes, Reset Configuration\"}\n      isOpen={resetOpen}\n      titleIcon={<ConfirmDeleteIcon />}\n      isLoading={resetLoading}\n      onConfirm={resetConfiguration}\n      onClose={() => {\n        closeResetModalAndRefresh(false);\n      }}\n      confirmationContent={\n        <React.Fragment>\n          {resetLoading && <LinearProgress />}\n          <DialogContentText>\n            Are you sure you want to restore these configurations to default\n            values?\n            <br />\n            <b className={classes.wrapText}>\n              Please note that this may cause your system to not be accessible\n            </b>\n          </DialogContentText>\n        </React.Fragment>\n      }\n    />\n  );\n};\n\nconst mapDispatchToProps = {\n  setErrorSnackMessage,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport default withStyles(styles)(connector(ResetConfigurationModal));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport get from \"lodash/get\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Box, Button, LinearProgress } from \"@mui/material\";\nimport Grid from \"@mui/material/Grid\";\nimport api from \"../../../../common/api\";\nimport ConfTargetGeneric from \"../ConfTargetGeneric\";\nimport { serverNeedsRestart, setErrorSnackMessage } from \"../../../../actions\";\nimport {\n  fieldBasic,\n  settingsCommon,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport {\n  fieldsConfigurations,\n  removeEmptyFields,\n} from \"../../Configurations/utils\";\nimport {\n  IConfigurationElement,\n  IElementValue,\n} from \"../../Configurations/types\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport ResetConfigurationModal from \"./ResetConfigurationModal\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...settingsCommon,\n    settingsFormContainer: {\n      display: \"grid\",\n      gridTemplateColumns: \"1fr\",\n      gridGap: \"10px\",\n    },\n  });\n\ninterface IAddNotificationEndpointProps {\n  serverNeedsRestart: typeof serverNeedsRestart;\n  setErrorSnackMessage: typeof setErrorSnackMessage;\n  selectedConfiguration: IConfigurationElement;\n  classes: any;\n  history: any;\n  className?: string;\n}\n\nconst EditConfiguration = ({\n  serverNeedsRestart,\n  selectedConfiguration,\n  setErrorSnackMessage,\n  classes,\n  history,\n  className = \"\",\n}: IAddNotificationEndpointProps) => {\n  //Local States\n  const [valuesObj, setValueObj] = useState<IElementValue[]>([]);\n  const [saving, setSaving] = useState<boolean>(false);\n  const [loadingConfig, setLoadingConfig] = useState<boolean>(true);\n  const [configValues, setConfigValues] = useState<IElementValue[]>([]);\n  const [resetConfigurationOpen, setResetConfigurationOpen] =\n    useState<boolean>(false);\n  //Effects\n  useEffect(() => {\n    if (loadingConfig) {\n      const configId = get(selectedConfiguration, \"configuration_id\", false);\n\n      if (configId) {\n        api\n          .invoke(\"GET\", `/api/v1/configs/${configId}`)\n          .then((res) => {\n            const keyVals = get(res, \"key_values\", []);\n            setConfigValues(keyVals);\n            setLoadingConfig(false);\n          })\n          .catch((err: ErrorResponseHandler) => {\n            setLoadingConfig(false);\n            setErrorSnackMessage(err);\n          });\n\n        return;\n      }\n      setLoadingConfig(false);\n    }\n  }, [loadingConfig, selectedConfiguration, setErrorSnackMessage]);\n\n  useEffect(() => {\n    if (saving) {\n      const payload = {\n        key_values: removeEmptyFields(valuesObj),\n      };\n      api\n        .invoke(\n          \"PUT\",\n          `/api/v1/configs/${selectedConfiguration.configuration_id}`,\n          payload\n        )\n        .then((res) => {\n          setSaving(false);\n          serverNeedsRestart(res.restart);\n\n          history.push(\"/settings\");\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setSaving(false);\n          setErrorSnackMessage(err);\n        });\n    }\n  }, [\n    saving,\n    history,\n    serverNeedsRestart,\n    selectedConfiguration,\n    valuesObj,\n    setErrorSnackMessage,\n  ]);\n\n  //Fetch Actions\n  const submitForm = (event: React.FormEvent) => {\n    event.preventDefault();\n    setSaving(true);\n  };\n\n  const onValueChange = useCallback(\n    (newValue) => {\n      setValueObj(newValue);\n    },\n    [setValueObj]\n  );\n\n  const continueReset = (restart: boolean) => {\n    setResetConfigurationOpen(false);\n    serverNeedsRestart(restart);\n    if (restart) {\n      setLoadingConfig(true);\n    }\n  };\n\n  return (\n    <Fragment>\n      {resetConfigurationOpen && (\n        <ResetConfigurationModal\n          configurationName={selectedConfiguration.configuration_id}\n          closeResetModalAndRefresh={continueReset}\n          resetOpen={resetConfigurationOpen}\n        />\n      )}\n      {loadingConfig ? (\n        <Grid item xs={12}>\n          <LinearProgress />\n        </Grid>\n      ) : (\n        <Box\n          sx={{\n            padding: \"15px\",\n            height: \"100%\",\n          }}\n        >\n          <form\n            noValidate\n            onSubmit={submitForm}\n            className={className}\n            style={{\n              height: \"100%\",\n              display: \"flex\",\n              flexFlow: \"column\",\n            }}\n          >\n            <Grid item xs={12} className={classes.settingsFormContainer}>\n              <ConfTargetGeneric\n                fields={\n                  fieldsConfigurations[selectedConfiguration.configuration_id]\n                }\n                onChange={onValueChange}\n                defaultVals={configValues}\n              />\n            </Grid>\n            <Grid\n              item\n              xs={12}\n              sx={{\n                paddingTop: \"15px \",\n                textAlign: \"right\" as const,\n                maxHeight: \"60px\",\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"flex-end\",\n              }}\n            >\n              <Button\n                type=\"button\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                sx={{\n                  padding: {\n                    xs: \"3px\", //avoid wrapping on smaller screens\n                    md: \"20px\",\n                  },\n                }}\n                onClick={() => {\n                  setResetConfigurationOpen(true);\n                }}\n              >\n                Restore Defaults\n              </Button>\n              &nbsp; &nbsp;\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                disabled={saving}\n              >\n                Save\n              </Button>\n            </Grid>\n          </form>\n        </Box>\n      )}\n    </Fragment>\n  );\n};\n\nconst mapDispatchToProps = {\n  serverNeedsRestart,\n  setErrorSnackMessage,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport default connector(withStyles(styles)(EditConfiguration));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport get from \"lodash/get\";\nimport Grid from \"@mui/material/Grid\";\nimport { configurationElements } from \"../utils\";\nimport EditConfiguration from \"../../NotificationEndpoints/CustomForms/EditConfiguration\";\n\ninterface IConfigurationForm {\n  match: any;\n  history: any;\n}\n\nconst ConfigurationsList = ({ match, history }: IConfigurationForm) => {\n  const activeConfRoute = get(match, \"url\", \"\");\n\n  const configName = activeConfRoute.substring(\n    activeConfRoute.lastIndexOf(\"/\") + 1\n  );\n\n  const validActiveConfig = configurationElements.find(\n    (element) => element.configuration_id === configName\n  );\n  const containerClassName = `${configName}`;\n  return (\n    <Grid\n      item\n      xs={12}\n      sx={{\n        height: \"100%\",\n        //LDAP and api forms have longer labels\n        \"& .identity_ldap, .api\": {\n          \"& label\": {\n            minWidth: 220,\n            marginRight: 0,\n          },\n        },\n      }}\n    >\n      {validActiveConfig && (\n        <EditConfiguration\n          className={`${containerClassName}`}\n          selectedConfiguration={validActiveConfig}\n          history={history}\n        />\n      )}\n    </Grid>\n  );\n};\n\nexport default ConfigurationsList;\n"],"names":["withStyles","theme","createStyles","deleteDialogStyles","isOpen","onClose","onCancel","onConfirm","classes","title","isLoading","confirmationContent","cancelText","confirmText","confirmButtonProps","cancelButtonProps","titleIcon","open","event","reason","className","root","sx","padding","titleText","closeContainer","closeButton","onClick","disableRipple","size","content","actions","cancelButton","disabled","type","variant","color","confirmButton","loading","loadingPosition","startIcon","autoFocus","mapDispatchToProps","setErrorSnackMessage","connector","connect","wrapText","maxWidth","whiteSpace","wordWrap","configurationName","closeResetModalAndRefresh","resetOpen","useState","resetLoading","setResetLoading","useEffect","api","then","res","catch","err","ConfirmDialog","LinearProgress","DialogContentText","serverNeedsRestart","fieldBasic","settingsCommon","settingsFormContainer","display","gridTemplateColumns","gridGap","selectedConfiguration","history","valuesObj","setValueObj","saving","setSaving","loadingConfig","setLoadingConfig","configValues","setConfigValues","resetConfigurationOpen","setResetConfigurationOpen","configId","get","keyVals","payload","key_values","removeEmptyFields","configuration_id","restart","push","onValueChange","useCallback","newValue","Fragment","Grid","item","xs","Box","height","noValidate","onSubmit","preventDefault","style","flexFlow","ConfTargetGeneric","fields","fieldsConfigurations","onChange","defaultVals","paddingTop","textAlign","maxHeight","alignItems","justifyContent","Button","md","match","activeConfRoute","configName","substring","lastIndexOf","validActiveConfig","configurationElements","element","containerClassName","minWidth","marginRight"],"sourceRoot":""}