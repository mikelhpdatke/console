{"version":3,"file":"static/js/4710.907ad550.chunk.js","mappings":"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","sources":["common/BackLink.tsx","screens/Console/Common/CredentialsPrompt/CredentialItem.tsx","screens/Console/Common/CredentialsPrompt/CredentialsPrompt.tsx","screens/Console/Common/FormComponents/FileSelector/FileSelector.tsx","screens/Console/Common/FormComponents/FileSelector/utils.ts","screens/Console/Common/Layout/PageLayout.tsx","screens/Console/Tenants/AddTenant/Steps/TenantResources/utils.tsx","screens/Console/Tenants/AddTenant/Steps/Configure.tsx","screens/Console/Tenants/AddTenant/Steps/IdentityProvider.tsx","screens/Console/Tenants/AddTenant/Steps/Security.tsx","screens/Console/Tenants/AddTenant/Steps/Encryption.tsx","screens/Console/Tenants/AddTenant/Steps/Affinity.tsx","screens/Console/Tenants/AddTenant/Steps/Images.tsx","screens/Console/Tenants/AddTenant/Steps/helpers/AddNamespaceModal.tsx","screens/Console/Tenants/AddTenant/Steps/SizePreview.tsx","screens/Console/Tenants/AddTenant/Steps/TenantResources/TenantSizeResources.tsx","screens/Console/Tenants/AddTenant/Steps/TenantResources/TenantSize.tsx","screens/Console/Tenants/AddTenant/Steps/TenantResources/TenantSizeMK.tsx","screens/Console/Tenants/AddTenant/Steps/TenantResources/NameTenantMain.tsx","screens/Console/Tenants/AddTenant/Steps/TenantResources/TenantResources.tsx","screens/Console/Tenants/AddTenant/AddTenant.tsx","screens/Console/Tenants/ListTenants/utils.ts","screens/Console/Tenants/TenantDetails/utils.ts","screens/Console/Tenants/actions.ts","screens/shared/ErrorBlock.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { BackSettingsIcon } from \"../icons\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    link: {\n      display: \"flex\",\n      alignItems: \"center\",\n      textDecoration: \"none\",\n      maxWidth: \"300px\",\n      padding: \"2rem 2rem 0rem 2rem\",\n      color: theme.palette.primary.light,\n      fontSize: \".8rem\",\n      \"&:hover\": {\n        textDecoration: \"underline\",\n      },\n    },\n    icon: {\n      marginRight: \".3rem\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      \"& svg.min-icon\": {\n        width: 12,\n      },\n    },\n  });\n\ninterface IBackLink {\n  classes: any;\n  to: string;\n  label: string;\n  className?: any;\n  executeOnClick?: () => void;\n}\n\nconst BackLink = ({\n  to,\n  label,\n  classes,\n  className,\n  executeOnClick,\n}: IBackLink) => {\n  return (\n    <Link\n      to={to}\n      className={`${classes.link} ${className ? className : \"\"}`}\n      onClick={() => {\n        if (executeOnClick) {\n          executeOnClick();\n        }\n      }}\n    >\n      <div className={classes.icon}>\n        <BackSettingsIcon />\n      </div>\n      <div className={classes.label}>{label}</div>\n    </Link>\n  );\n};\n\nexport default withStyles(styles)(BackLink);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { InputAdornment, OutlinedInput } from \"@mui/material\";\nimport BoxIconButton from \"../BoxIconButton/BoxIconButton\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport { CopyIcon } from \"../../../../icons\";\nimport { fieldBasic } from \"../FormComponents/common/styleLibrary\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    container: {\n      display: \"flex\",\n      flexFlow: \"column\",\n      padding: \"20px 0 8px 0\",\n    },\n    inputWithCopy: {\n      \"& .MuiInputBase-root \": {\n        width: \"100%\",\n        background: \"#FBFAFA\",\n        \"& .MuiInputBase-input\": {\n          height: \".8rem\",\n        },\n        \"& .MuiInputAdornment-positionEnd\": {\n          marginRight: \".5rem\",\n          \"& .MuiButtonBase-root\": {\n            height: \"2rem\",\n          },\n        },\n      },\n      \"& .MuiButtonBase-root .min-icon\": {\n        width: \".8rem\",\n        height: \".8rem\",\n      },\n    },\n    inputLabel: {\n      ...fieldBasic.inputLabel,\n      fontSize: \".8rem\",\n    },\n  });\n\nconst CredentialItem = ({\n  label = \"\",\n  value = \"\",\n  classes = {},\n}: {\n  label: string;\n  value: string;\n  classes: any;\n}) => {\n  return (\n    <div className={classes.container}>\n      <div className={classes.inputLabel}>{label}:</div>\n      <div className={classes.inputWithCopy}>\n        <OutlinedInput\n          value={value}\n          readOnly\n          endAdornment={\n            <InputAdornment position=\"end\">\n              <CopyToClipboard text={value}>\n                <BoxIconButton\n                  aria-label=\"copy\"\n                  tooltip={\"Copy\"}\n                  onClick={() => {}}\n                  onMouseDown={() => {}}\n                  edge=\"end\"\n                >\n                  <CopyIcon />\n                </BoxIconButton>\n              </CopyToClipboard>\n            </InputAdornment>\n          }\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(CredentialItem);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport get from \"lodash/get\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { NewServiceAccount } from \"./types\";\nimport { Button } from \"@mui/material\";\nimport ModalWrapper from \"../ModalWrapper/ModalWrapper\";\nimport Grid from \"@mui/material/Grid\";\nimport CredentialItem from \"./CredentialItem\";\nimport WarnIcon from \"../../../../icons/WarnIcon\";\nimport { DownloadIcon, ServiceAccountCredentialsIcon } from \"../../../../icons\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    warningBlock: {\n      color: \"red\",\n      fontSize: \".85rem\",\n      margin: \".5rem 0 .5rem 0\",\n      display: \"flex\",\n      alignItems: \"center\",\n      \"& svg \": {\n        marginRight: \".3rem\",\n        height: 16,\n        width: 16,\n      },\n    },\n    credentialTitle: {\n      padding: \".8rem 0 0 0\",\n      fontWeight: 600,\n      fontSize: \".9rem\",\n    },\n    buttonContainer: {\n      textAlign: \"right\",\n      marginTop: \"1rem\",\n    },\n    credentialsPanel: {\n      overflowY: \"auto\",\n      maxHeight: 350,\n    },\n    promptTitle: {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    buttonSpacer: {\n      marginRight: \".9rem\",\n    },\n    promptIcon: {\n      marginRight: \".1rem\",\n      display: \"flex\",\n      alignItems: \"center\",\n      height: \"2rem\",\n      width: \"2rem\",\n    },\n  });\n\ninterface ICredentialsPromptProps {\n  classes: any;\n  newServiceAccount: NewServiceAccount | null;\n  open: boolean;\n  entity: string;\n  closeModal: () => void;\n}\n\nconst download = (filename: string, text: string) => {\n  let element = document.createElement(\"a\");\n  element.setAttribute(\n    \"href\",\n    \"data:text/plain;charset=utf-8,\" + encodeURIComponent(text)\n  );\n  element.setAttribute(\"download\", filename);\n\n  element.style.display = \"none\";\n  document.body.appendChild(element);\n\n  element.click();\n  document.body.removeChild(element);\n};\n\nconst CredentialsPrompt = ({\n  classes,\n  newServiceAccount,\n  open,\n  closeModal,\n  entity,\n}: ICredentialsPromptProps) => {\n  if (!newServiceAccount) {\n    return null;\n  }\n  const consoleCreds = get(newServiceAccount, \"console\", null);\n  const idp = get(newServiceAccount, \"idp\", false);\n\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      onClose={() => {\n        closeModal();\n      }}\n      title={\n        <div className={classes.promptTitle}>\n          <div>New {entity} Created</div>\n        </div>\n      }\n      titleIcon={<ServiceAccountCredentialsIcon />}\n    >\n      <Grid container>\n        <Grid item xs={12} className={classes.formScrollable}>\n          A new {entity} has been created with the following details:\n          {!idp && consoleCreds && (\n            <React.Fragment>\n              <Grid item xs={12} className={classes.credentialsPanel}>\n                <div className={classes.credentialTitle}>\n                  Console Credentials\n                </div>\n                {Array.isArray(consoleCreds) &&\n                  consoleCreds.map((credentialsPair, index) => {\n                    return (\n                      <>\n                        <CredentialItem\n                          label=\"Access Key\"\n                          value={credentialsPair.accessKey}\n                        />\n                        <CredentialItem\n                          label=\"Secret Key\"\n                          value={credentialsPair.secretKey}\n                        />\n                      </>\n                    );\n                  })}\n                {!Array.isArray(consoleCreds) && (\n                  <>\n                    <CredentialItem\n                      label=\"Access Key\"\n                      value={consoleCreds.accessKey}\n                    />\n                    <CredentialItem\n                      label=\"Secret Key\"\n                      value={consoleCreds.secretKey}\n                    />\n                  </>\n                )}\n              </Grid>\n            </React.Fragment>\n          )}\n          {idp ? (\n            <div className={classes.warningBlock}>\n              Please Login via the configured external identity provider.\n            </div>\n          ) : (\n            <div className={classes.warningBlock}>\n              <WarnIcon />\n              <span>\n                Write these down, as this is the only time the secret will be\n                displayed.\n              </span>\n            </div>\n          )}\n        </Grid>\n        <Grid item xs={12} className={classes.buttonContainer}>\n          <Button\n            id={\"done-button\"}\n            variant=\"outlined\"\n            className={classes.buttonSpacer}\n            onClick={() => {\n              closeModal();\n            }}\n            color=\"primary\"\n          >\n            Done\n          </Button>\n\n          {!idp && (\n            <Button\n              id={\"download-button\"}\n              onClick={() => {\n                let consoleExtras = {};\n\n                if (consoleCreds) {\n                  if (!Array.isArray(consoleCreds)) {\n                    consoleExtras = {\n                      console: [\n                        {\n                          url: consoleCreds.url,\n                          access_key: consoleCreds.accessKey,\n                          secret_key: consoleCreds.secretKey,\n                          api: \"s3v4\",\n                          path: \"auto\",\n                        },\n                      ],\n                    };\n                  } else {\n                    const cCreds = consoleCreds.map((itemMap) => {\n                      return {\n                        url: itemMap.url,\n                        access_key: itemMap.accessKey,\n                        secret_key: itemMap.secretKey,\n                        api: \"s3v4\",\n                        path: \"auto\",\n                      };\n                    });\n\n                    consoleExtras = {\n                      console: [...cCreds],\n                    };\n                  }\n                }\n\n                download(\n                  \"credentials.json\",\n                  JSON.stringify({\n                    ...consoleExtras,\n                  })\n                );\n              }}\n              endIcon={<DownloadIcon />}\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              Download\n            </Button>\n          )}\n        </Grid>\n      </Grid>\n    </ModalWrapper>\n  );\n};\n\nexport default withStyles(styles)(CredentialsPrompt);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport get from \"lodash/get\";\nimport { Grid, InputLabel, Tooltip } from \"@mui/material\";\nimport IconButton from \"@mui/material/IconButton\";\nimport AttachFileIcon from \"@mui/icons-material/AttachFile\";\nimport CancelIcon from \"@mui/icons-material/Cancel\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  fieldBasic,\n  fileInputStyles,\n  tooltipHelper,\n} from \"../common/styleLibrary\";\nimport { fileProcess } from \"./utils\";\nimport HelpIcon from \"../../../../../icons/HelpIcon\";\nimport ErrorBlock from \"../../../../shared/ErrorBlock\";\n\ninterface InputBoxProps {\n  label: string;\n  classes: any;\n  onChange: (e: string, i: string) => void;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  tooltip?: string;\n  required?: boolean;\n  error?: string;\n  accept?: string;\n  value?: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    valueString: {\n      maxWidth: 350,\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      marginTop: 2,\n    },\n    fileInputField: {\n      margin: \"13px 0\",\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    ...fileInputStyles,\n    inputLabel: {\n      ...fieldBasic.inputLabel,\n      fontWeight: \"normal\",\n    },\n    textBoxContainer: {\n      ...fieldBasic.textBoxContainer,\n      maxWidth: \"100%\",\n      border: \"1px solid #eaeaea\",\n      paddingLeft: \"15px\",\n    },\n  });\n\nconst FileSelector = ({\n  label,\n  classes,\n  onChange,\n  id,\n  name,\n  disabled = false,\n  tooltip = \"\",\n  required,\n  error = \"\",\n  accept = \"\",\n  value = \"\",\n}: InputBoxProps) => {\n  const [showFileSelector, setShowSelector] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Grid\n        item\n        xs={12}\n        className={`${classes.fileInputField} ${classes.fieldBottom} ${\n          classes.fieldContainer\n        } ${error !== \"\" ? classes.errorInField : \"\"}`}\n      >\n        {label !== \"\" && (\n          <InputLabel\n            htmlFor={id}\n            className={`${error !== \"\" ? classes.fieldLabelError : \"\"} ${\n              classes.inputLabel\n            }`}\n          >\n            <span>\n              {label}\n              {required ? \"*\" : \"\"}\n            </span>\n            {tooltip !== \"\" && (\n              <div className={classes.tooltipContainer}>\n                <Tooltip title={tooltip} placement=\"top-start\">\n                  <div className={classes.tooltip}>\n                    <HelpIcon />\n                  </div>\n                </Tooltip>\n              </div>\n            )}\n          </InputLabel>\n        )}\n\n        {showFileSelector || value === \"\" ? (\n          <div className={classes.textBoxContainer}>\n            <input\n              type=\"file\"\n              name={name}\n              onChange={(e) => {\n                const fileName = get(e, \"target.files[0].name\", \"\");\n                fileProcess(e, (data: any) => {\n                  onChange(data, fileName);\n                });\n              }}\n              accept={accept}\n              required={required}\n              disabled={disabled}\n              className={classes.fileInputField}\n            />\n\n            {value !== \"\" && (\n              <IconButton\n                color=\"primary\"\n                aria-label=\"upload picture\"\n                component=\"span\"\n                onClick={() => {\n                  setShowSelector(false);\n                }}\n                disableRipple={false}\n                disableFocusRipple={false}\n                size=\"small\"\n              >\n                <CancelIcon />\n              </IconButton>\n            )}\n\n            {error !== \"\" && <ErrorBlock errorMessage={error} />}\n          </div>\n        ) : (\n          <div className={classes.fileReselect}>\n            <div className={classes.valueString}>{value}</div>\n            <IconButton\n              color=\"primary\"\n              aria-label=\"upload picture\"\n              component=\"span\"\n              onClick={() => {\n                setShowSelector(true);\n              }}\n              disableRipple={false}\n              disableFocusRipple={false}\n              size=\"small\"\n            >\n              <AttachFileIcon />\n            </IconButton>\n          </div>\n        )}\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(FileSelector);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nexport const fileProcess = (evt: any, callback: any) => {\n  const file = evt.target.files[0];\n  const reader = new FileReader();\n  reader.readAsDataURL(file);\n\n  reader.onload = () => {\n    // reader.readAsDataURL(file) output will be something like: data:application/x-x509-ca-cert;base64,LS0tLS1CRUdJTiBDRVJUSU\n    // we care only about the actual base64 part (everything after \"data:application/x-x509-ca-cert;base64,\")\n    const fileBase64 = reader.result;\n    if (fileBase64) {\n      const fileArray = fileBase64.toString().split(\"base64,\");\n\n      if (fileArray.length === 2) {\n        callback(fileArray[1]);\n      }\n    }\n  };\n};\n","import React from \"react\";\nimport { Grid } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { pageContentStyles } from \"../FormComponents/common/styleLibrary\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...pageContentStyles,\n  });\n\ntype PageLayoutProps = {\n  className?: string;\n  classes?: any;\n  children: any;\n};\n\nconst PageLayout = ({ classes, className = \"\", children }: PageLayoutProps) => {\n  return (\n    <div className={classes.contentSpacer}>\n      <Grid container>\n        <Grid item xs={12} className={className}>\n          {children}\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(PageLayout);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { Opts } from \"../../../ListTenants/utils\";\nimport TenantSizeMK from \"./TenantSizeMK\";\n\nexport enum IMkEnvs {\n  \"aws\",\n  \"azure\",\n  \"gcp\",\n  \"default\",\n  undefined,\n}\n\nexport interface IDriveSizing {\n  driveSize: string;\n  sizeUnit: string;\n}\n\nexport interface IntegrationConfiguration {\n  typeSelection: string;\n  storageClass: string;\n  CPU: number;\n  memory: number;\n  drivesPerServer: number;\n  driveSize: IDriveSizing;\n}\n\nexport const AWSStorageTypes: Opts[] = [\n  { label: \"NVME\", value: \"nvme\" },\n  { label: \"HDD\", value: \"hdd\" },\n];\n\nexport const AzureStorageTypes: Opts[] = [\n  { label: \"Standard_L32s_v2\", value: \"Standard_L32s_v2\" },\n  { label: \"Standard_L48s_v2\", value: \"Standard_L48s_v2\" },\n  { label: \"Standard_L64s_v2\", value: \"Standard_L64s_v2\" },\n];\n\nexport const resourcesConfigurations = {\n  \"mp-mode-aws\": IMkEnvs.aws,\n  \"mp-mode-azure\": IMkEnvs.azure,\n  \"mp-mode-gcp\": IMkEnvs.gcp,\n};\n\nexport const AWSConfigurations: IntegrationConfiguration[] = [\n  {\n    typeSelection: \"nvme\",\n    storageClass: \"nvme-i3en-12xlarge\",\n    CPU: 48,\n    memory: 384,\n    driveSize: { driveSize: \"7500\", sizeUnit: \"Gi\" },\n    drivesPerServer: 4,\n  },\n  {\n    typeSelection: \"hdd\",\n    storageClass: \"hdd-d3en-12xlarge\",\n    CPU: 8,\n    memory: 32,\n    driveSize: { driveSize: \"12.7\", sizeUnit: \"Ti\" },\n    drivesPerServer: 4,\n  },\n];\n\nexport const AzureConfigurations: IntegrationConfiguration[] = [\n  {\n    typeSelection: \"Standard_L8s_v2\",\n    storageClass: \"local-nvme\",\n    CPU: 8,\n    memory: 64,\n    driveSize: { driveSize: \"1787\", sizeUnit: \"Gi\" },\n    drivesPerServer: 1,\n  },\n  {\n    typeSelection: \"Standard_L16s_v2\",\n    storageClass: \"local-nvme\",\n    CPU: 16,\n    memory: 128,\n    driveSize: { driveSize: \"1787\", sizeUnit: \"Gi\" },\n    drivesPerServer: 2,\n  },\n  {\n    typeSelection: \"Standard_L32s_v2\",\n    storageClass: \"local-nvme\",\n    CPU: 32,\n    memory: 256,\n    driveSize: { driveSize: \"1787\", sizeUnit: \"Gi\" },\n    drivesPerServer: 4,\n  },\n  {\n    typeSelection: \"Standard_L48s_v2\",\n    storageClass: \"local-nvme\",\n    CPU: 48,\n    memory: 384,\n    driveSize: { driveSize: \"1787\", sizeUnit: \"Gi\" },\n    drivesPerServer: 6,\n  },\n  {\n    typeSelection: \"Standard_L64s_v2\",\n    storageClass: \"local-nvme\",\n    CPU: 64,\n    memory: 512,\n    driveSize: { driveSize: \"1787\", sizeUnit: \"Gi\" },\n    drivesPerServer: 8,\n  },\n];\n\nexport const GCPStorageTypes: Opts[] = [{ label: \"SSD\", value: \"ssd\" }];\n\nexport const GCPConfigurations: IntegrationConfiguration[] = [\n  {\n    typeSelection: \"ssd\",\n    storageClass: \"local-ssd\",\n    CPU: 32,\n    memory: 128,\n    driveSize: { driveSize: \"368\", sizeUnit: \"Gi\" },\n    drivesPerServer: 24,\n  },\n];\n\nexport const mkPanelConfigurations = {\n  [IMkEnvs.aws]: {\n    variantSelectorLabel: \"Storage Type\",\n    variantSelectorValues: AWSStorageTypes,\n    configurations: AWSConfigurations,\n    sizingComponent: <TenantSizeMK formToRender={IMkEnvs.aws} />,\n  },\n  [IMkEnvs.azure]: {\n    variantSelectorLabel: \"VM Size\",\n    variantSelectorValues: AzureStorageTypes,\n    configurations: AzureConfigurations,\n    sizingComponent: <TenantSizeMK formToRender={IMkEnvs.azure} />,\n  },\n  [IMkEnvs.gcp]: {\n    variantSelectorLabel: \"Storage Type\",\n    variantSelectorValues: GCPStorageTypes,\n    configurations: GCPConfigurations,\n    sizingComponent: <TenantSizeMK formToRender={IMkEnvs.gcp} />,\n  },\n  [IMkEnvs.default]: {},\n  [IMkEnvs.undefined]: {},\n};\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, Paper, SelectChangeEvent } from \"@mui/material\";\nimport {\n  createTenantCommon,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport { isPageValid, updateAddField } from \"../../actions\";\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError } from \"../../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport SelectWrapper from \"../../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport { ISecurityContext } from \"../../types\";\n\ninterface IConfigureProps {\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  storageClasses: any;\n  classes: any;\n  customImage: boolean;\n  imageName: string;\n  customDockerhub: boolean;\n  imageRegistry: string;\n  imageRegistryUsername: string;\n  imageRegistryPassword: string;\n  exposeMinIO: boolean;\n  exposeConsole: boolean;\n  prometheusCustom: boolean;\n  tenantCustom: boolean;\n  logSearchCustom: boolean;\n  logSearchVolumeSize: string;\n  logSearchSizeFactor: string;\n  prometheusVolumeSize: string;\n  prometheusSizeFactor: string;\n  logSearchSelectedStorageClass: string;\n  logSearchImage: string;\n  kesImage: string;\n  logSearchPostgresImage: string;\n  logSearchPostgresInitImage: string;\n  prometheusSelectedStorageClass: string;\n  prometheusImage: string;\n  prometheusSidecarImage: string;\n  prometheusInitImage: string;\n  selectedStorageClass: string;\n  tenantSecurityContext: ISecurityContext;\n  logSearchSecurityContext: ISecurityContext;\n  logSearchPostgresSecurityContext: ISecurityContext;\n  prometheusSecurityContext: ISecurityContext;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    configSectionItem: {\n      marginRight: 15,\n\n      \"& .multiContainer\": {\n        border: \"1px solid red\",\n      },\n    },\n    tenantCustomizationFields: {\n      marginLeft: 30, // 2nd Level(15+15)\n      width: \"88%\",\n      margin: \"auto\",\n    },\n    containerItem: {\n      marginRight: 15,\n    },\n    fieldGroup: {\n      ...createTenantCommon.fieldGroup,\n      paddingTop: 15,\n      marginBottom: 25,\n    },\n    responsiveSectionItem: {\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n        alignItems: \"flex-start\",\n\n        \"& div > div\": {\n          marginBottom: 5,\n          marginRight: 0,\n        },\n      },\n    },\n\n    logSearchCustomFields: {\n      marginLeft: 20, // 2nd Level(15+15)\n      padding: 10,\n      width: \"90%\",\n      margin: \"auto\",\n    },\n    fieldSpaceTop: {\n      marginTop: 15,\n    },\n    prometheusCustomFields: {\n      marginLeft: 20, // 2nd Level(15+15)\n      padding: 10,\n      width: \"90%\",\n      margin: \"auto\",\n    },\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst Configure = ({\n  classes,\n  storageClasses,\n  customImage,\n  imageName,\n  customDockerhub,\n  imageRegistry,\n  imageRegistryUsername,\n  imageRegistryPassword,\n  exposeMinIO,\n  exposeConsole,\n  prometheusCustom,\n  tenantCustom,\n  logSearchCustom,\n  logSearchVolumeSize,\n  logSearchSizeFactor,\n  logSearchImage,\n  kesImage,\n  logSearchPostgresImage,\n  logSearchPostgresInitImage,\n  prometheusVolumeSize,\n  prometheusSizeFactor,\n  logSearchSelectedStorageClass,\n  prometheusSelectedStorageClass,\n  prometheusImage,\n  prometheusSidecarImage,\n  prometheusInitImage,\n  updateAddField,\n  isPageValid,\n  selectedStorageClass,\n  tenantSecurityContext,\n  logSearchSecurityContext,\n  logSearchPostgresSecurityContext,\n  prometheusSecurityContext,\n}: IConfigureProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  const configureSTClasses = [\n    { label: \"Default\", value: \"default\" },\n    ...storageClasses,\n  ];\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"configure\", field, value);\n    },\n    [updateAddField]\n  );\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n    if (tenantCustom) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"tenant_securityContext_runAsUser\",\n          required: true,\n          value: tenantSecurityContext.runAsUser,\n          customValidation:\n            tenantSecurityContext.runAsUser === \"\" ||\n            parseInt(tenantSecurityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"tenant_securityContext_runAsGroup\",\n          required: true,\n          value: tenantSecurityContext.runAsGroup,\n          customValidation:\n            tenantSecurityContext.runAsGroup === \"\" ||\n            parseInt(tenantSecurityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"tenant_securityContext_fsGroup\",\n          required: true,\n          value: tenantSecurityContext.fsGroup,\n          customValidation:\n            tenantSecurityContext.fsGroup === \"\" ||\n            parseInt(tenantSecurityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n    }\n    if (prometheusCustom) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"prometheus_storage_class\",\n          required: true,\n          value: prometheusSelectedStorageClass,\n          customValidation: prometheusSelectedStorageClass === \"\",\n          customValidationMessage: \"Field cannot be empty\",\n        },\n        {\n          fieldKey: \"prometheus_volume_size\",\n          required: true,\n          value: prometheusVolumeSize,\n          customValidation:\n            prometheusVolumeSize === \"\" || parseInt(prometheusVolumeSize) <= 0,\n          customValidationMessage: `Volume size must be present and be greater than 0`,\n        },\n        {\n          fieldKey: \"prometheus_securityContext_runAsUser\",\n          required: true,\n          value: prometheusSecurityContext.runAsUser,\n          customValidation:\n            prometheusSecurityContext.runAsUser === \"\" ||\n            parseInt(prometheusSecurityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"prometheus_securityContext_runAsGroup\",\n          required: true,\n          value: prometheusSecurityContext.runAsGroup,\n          customValidation:\n            prometheusSecurityContext.runAsGroup === \"\" ||\n            parseInt(prometheusSecurityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"prometheus_securityContext_fsGroup\",\n          required: true,\n          value: prometheusSecurityContext.fsGroup,\n          customValidation:\n            prometheusSecurityContext.fsGroup === \"\" ||\n            parseInt(prometheusSecurityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n    }\n    if (logSearchCustom) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"log_search_storage_class\",\n          required: true,\n          value: logSearchSelectedStorageClass,\n          customValidation: logSearchSelectedStorageClass === \"\",\n          customValidationMessage: \"Field cannot be empty\",\n        },\n        {\n          fieldKey: \"log_search_volume_size\",\n          required: true,\n          value: logSearchVolumeSize,\n          customValidation:\n            logSearchVolumeSize === \"\" || parseInt(logSearchVolumeSize) <= 0,\n          customValidationMessage: `Volume size must be present and be greatter than 0`,\n        },\n        {\n          fieldKey: \"logSearch_securityContext_runAsUser\",\n          required: true,\n          value: logSearchSecurityContext.runAsUser,\n          customValidation:\n            logSearchSecurityContext.runAsUser === \"\" ||\n            parseInt(logSearchSecurityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"logSearch_securityContext_runAsGroup\",\n          required: true,\n          value: logSearchSecurityContext.runAsGroup,\n          customValidation:\n            logSearchSecurityContext.runAsGroup === \"\" ||\n            parseInt(logSearchSecurityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"logSearch_securityContext_fsGroup\",\n          required: true,\n          value: logSearchSecurityContext.fsGroup,\n          customValidation:\n            logSearchSecurityContext.fsGroup === \"\" ||\n            parseInt(logSearchSecurityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"postgres_securityContext_runAsUser\",\n          required: true,\n          value: logSearchPostgresSecurityContext.runAsUser,\n          customValidation:\n            logSearchPostgresSecurityContext.runAsUser === \"\" ||\n            parseInt(logSearchPostgresSecurityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"postgres_securityContext_runAsGroup\",\n          required: true,\n          value: prometheusSecurityContext.runAsGroup,\n          customValidation:\n            logSearchPostgresSecurityContext.runAsGroup === \"\" ||\n            parseInt(logSearchPostgresSecurityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"postgres_securityContext_fsGroup\",\n          required: true,\n          value: logSearchPostgresSecurityContext.fsGroup,\n          customValidation:\n            logSearchPostgresSecurityContext.fsGroup === \"\" ||\n            parseInt(logSearchPostgresSecurityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n    }\n\n    if (customImage) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"image\",\n          required: false,\n          value: imageName,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage: \"Format must be of form: 'minio/minio:VERSION'\",\n        },\n        {\n          fieldKey: \"logSearchImage\",\n          required: false,\n          value: logSearchImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'minio/logsearchapi:VERSION'\",\n        },\n        {\n          fieldKey: \"kesImage\",\n          required: false,\n          value: kesImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage: \"Format must be of form: 'minio/kes:VERSION'\",\n        },\n        {\n          fieldKey: \"logSearchPostgresImage\",\n          required: false,\n          value: logSearchPostgresImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'library/postgres:VERSION'\",\n        },\n        {\n          fieldKey: \"logSearchPostgresInitImage\",\n          required: false,\n          value: logSearchPostgresInitImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'library/busybox:VERSION'\",\n        },\n        {\n          fieldKey: \"prometheusImage\",\n          required: false,\n          value: prometheusImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'minio/prometheus:VERSION'\",\n        },\n        {\n          fieldKey: \"prometheusSidecarImage\",\n          required: false,\n          value: prometheusSidecarImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'project/container:VERSION'\",\n        },\n        {\n          fieldKey: \"prometheusInitImage\",\n          required: false,\n          value: prometheusInitImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'library/busybox:VERSION'\",\n        },\n      ];\n      if (customDockerhub) {\n        customAccountValidation = [\n          ...customAccountValidation,\n          {\n            fieldKey: \"registry\",\n            required: true,\n            value: imageRegistry,\n          },\n          {\n            fieldKey: \"registryUsername\",\n            required: true,\n            value: imageRegistryUsername,\n          },\n          {\n            fieldKey: \"registryPassword\",\n            required: true,\n            value: imageRegistryPassword,\n          },\n        ];\n      }\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    isPageValid(\"configure\", Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    customImage,\n    imageName,\n    logSearchImage,\n    kesImage,\n    logSearchPostgresImage,\n    logSearchPostgresInitImage,\n    prometheusImage,\n    prometheusSidecarImage,\n    prometheusInitImage,\n    customDockerhub,\n    imageRegistry,\n    imageRegistryUsername,\n    imageRegistryPassword,\n    isPageValid,\n    prometheusCustom,\n    tenantCustom,\n    logSearchCustom,\n    prometheusSelectedStorageClass,\n    prometheusVolumeSize,\n    logSearchSelectedStorageClass,\n    logSearchVolumeSize,\n    tenantSecurityContext,\n    logSearchSecurityContext,\n    logSearchPostgresSecurityContext,\n    prometheusSecurityContext,\n  ]);\n\n  useEffect(() => {\n    // New default values in current selection is invalid\n    if (storageClasses.length > 0) {\n      const filterPrometheus = storageClasses.filter(\n        (item: any) => item.value === prometheusSelectedStorageClass\n      );\n      if (filterPrometheus.length === 0) {\n        updateField(\"prometheusSelectedStorageClass\", \"default\");\n      }\n\n      const filterLogSearch = storageClasses.filter(\n        (item: any) => item.value === logSearchSelectedStorageClass\n      );\n      if (filterLogSearch.length === 0) {\n        updateField(\"logSearchSelectedStorageClass\", \"default\");\n      }\n    }\n  }, [\n    logSearchSelectedStorageClass,\n    prometheusSelectedStorageClass,\n    selectedStorageClass,\n    storageClasses,\n    updateField,\n  ]);\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Configure</h3>\n        <span className={classes.descriptionText}>\n          Basic configurations for tenant management\n        </span>\n      </div>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Expose Services</h3>\n        <span className={classes.descriptionText}>\n          Whether the tenant's services should request an external IP.\n        </span>\n      </div>\n      <Grid item xs={12} className={classes.configSectionItem}>\n        <FormSwitchWrapper\n          value=\"expose_minio\"\n          id=\"expose_minio\"\n          name=\"expose_minio\"\n          checked={exposeMinIO}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"exposeMinIO\", checked);\n          }}\n          label={\"Expose MiniO Service\"}\n        />\n      </Grid>\n      <Grid item xs={12} className={classes.configSectionItem}>\n        <FormSwitchWrapper\n          value=\"expose_console\"\n          id=\"expose_console\"\n          name=\"expose_console\"\n          checked={exposeConsole}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"exposeConsole\", checked);\n          }}\n          label={\"Expose Console Service\"}\n        />\n      </Grid>\n\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Additional Configurations</h3>\n        <span className={classes.descriptionText}>\n          Configure SecurityContext, Storage Classes & Storage size for Log\n          Search, Prometheus add-ons and your Tenant\n        </span>\n      </div>\n      <Grid item xs={12} className={classes.configSectionItem}>\n        <FormSwitchWrapper\n          value=\"tenantConfig\"\n          id=\"tenant_configuration\"\n          name=\"tenant_configuration\"\n          checked={tenantCustom}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"tenantCustom\", checked);\n          }}\n          label={\"Override Tenant defaults\"}\n        />\n      </Grid>\n      {tenantCustom && (\n        <Grid item xs={12} className={classes.tenantCustomizationFields}>\n          <fieldset className={classes.fieldGroup}>\n            <legend className={classes.descriptionText}>\n              SecurityContext for MinIO\n            </legend>\n            <Grid item xs={12} className={`${classes.configSectionItem}`}>\n              <div\n                className={`${classes.multiContainer} ${classes.responsiveSectionItem}`}\n              >\n                <div className={classes.containerItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"tenant_securityContext_runAsUser\"\n                    name=\"tenant_securityContext_runAsUser\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"tenantSecurityContext\", {\n                        ...tenantSecurityContext,\n                        runAsUser: e.target.value,\n                      });\n                      cleanValidation(\"tenant_securityContext_runAsUser\");\n                    }}\n                    label=\"Run As User\"\n                    value={tenantSecurityContext.runAsUser}\n                    required\n                    error={\n                      validationErrors[\"tenant_securityContext_runAsUser\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.containerItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"tenant_securityContext_runAsGroup\"\n                    name=\"tenant_securityContext_runAsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"tenantSecurityContext\", {\n                        ...tenantSecurityContext,\n                        runAsGroup: e.target.value,\n                      });\n                      cleanValidation(\"tenant_securityContext_runAsGroup\");\n                    }}\n                    label=\"Run As Group\"\n                    value={tenantSecurityContext.runAsGroup}\n                    required\n                    error={\n                      validationErrors[\"tenant_securityContext_runAsGroup\"] ||\n                      \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.containerItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"tenant_securityContext_fsGroup\"\n                    name=\"tenant_securityContext_fsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"tenantSecurityContext\", {\n                        ...tenantSecurityContext,\n                        fsGroup: e.target.value,\n                      });\n                      cleanValidation(\"tenant_securityContext_fsGroup\");\n                    }}\n                    label=\"FsGroup\"\n                    value={tenantSecurityContext.fsGroup}\n                    required\n                    error={\n                      validationErrors[\"tenant_securityContext_fsGroup\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n              </div>\n            </Grid>\n            <br />\n            <Grid item xs={12} className={classes.configSectionItem}>\n              <div className={classes.multiContainer}>\n                <FormSwitchWrapper\n                  value=\"tenantSecurityContextRunAsNonRoot\"\n                  id=\"tenant_securityContext_runAsNonRoot\"\n                  name=\"tenant_securityContext_runAsNonRoot\"\n                  checked={tenantSecurityContext.runAsNonRoot}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    updateField(\"tenantSecurityContext\", {\n                      ...tenantSecurityContext,\n                      runAsNonRoot: checked,\n                    });\n                  }}\n                  label={\"Do not run as Root\"}\n                />\n              </div>\n            </Grid>\n          </fieldset>\n        </Grid>\n      )}\n      <Grid item xs={12} className={classes.configSectionItem}>\n        <FormSwitchWrapper\n          value=\"logSearchConfig\"\n          id=\"log_search_configuration\"\n          name=\"log_search_configuration\"\n          checked={logSearchCustom}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"logSearchCustom\", checked);\n          }}\n          label={\"Override Log Search defaults\"}\n        />\n      </Grid>\n      {logSearchCustom && (\n        <Grid xs={12} className={classes.logSearchCustomFields}>\n          <Grid item xs={12}>\n            <SelectWrapper\n              id=\"log_search_storage_class\"\n              name=\"log_search_storage_class\"\n              onChange={(e: SelectChangeEvent<string>) => {\n                updateField(\n                  \"logSearchSelectedStorageClass\",\n                  e.target.value as string\n                );\n              }}\n              label=\"Log Search Storage Class\"\n              value={logSearchSelectedStorageClass}\n              options={configureSTClasses}\n              disabled={configureSTClasses.length < 1}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <div className={classes.multiContainer}>\n              <InputBoxWrapper\n                type=\"number\"\n                id=\"log_search_volume_size\"\n                name=\"log_search_volume_size\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  updateField(\"logSearchVolumeSize\", e.target.value);\n                  cleanValidation(\"log_search_volume_size\");\n                }}\n                label=\"Storage Size [Gi]\"\n                value={logSearchVolumeSize}\n                required\n                error={validationErrors[\"log_search_volume_size\"] || \"\"}\n                min=\"0\"\n              />\n            </div>\n          </Grid>\n\n          <fieldset\n            className={`${classes.fieldGroup} ${classes.fieldSpaceTop}`}\n          >\n            <legend className={classes.descriptionText}>\n              SecurityContext for LogSearch\n            </legend>\n\n            <Grid item xs={12}>\n              <div\n                className={`${classes.multiContainer} ${classes.responsiveSectionItem}`}\n              >\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"logSearch_securityContext_runAsUser\"\n                    name=\"logSearch_securityContext_runAsUser\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"logSearchSecurityContext\", {\n                        ...logSearchSecurityContext,\n                        runAsUser: e.target.value,\n                      });\n                      cleanValidation(\"logSearch_securityContext_runAsUser\");\n                    }}\n                    label=\"Run As User\"\n                    value={logSearchSecurityContext.runAsUser}\n                    required\n                    error={\n                      validationErrors[\"logSearch_securityContext_runAsUser\"] ||\n                      \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"logSearch_securityContext_runAsGroup\"\n                    name=\"logSearch_securityContext_runAsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"logSearchSecurityContext\", {\n                        ...logSearchSecurityContext,\n                        runAsGroup: e.target.value,\n                      });\n                      cleanValidation(\"logSearch_securityContext_runAsGroup\");\n                    }}\n                    label=\"Run As Group\"\n                    value={logSearchSecurityContext.runAsGroup}\n                    required\n                    error={\n                      validationErrors[\n                        \"logSearch_securityContext_runAsGroup\"\n                      ] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"logSearch_securityContext_fsGroup\"\n                    name=\"logSearch_securityContext_fsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"logSearchSecurityContext\", {\n                        ...logSearchSecurityContext,\n                        fsGroup: e.target.value,\n                      });\n                      cleanValidation(\"logSearch_securityContext_fsGroup\");\n                    }}\n                    label=\"FsGroup\"\n                    value={logSearchSecurityContext.fsGroup}\n                    required\n                    error={\n                      validationErrors[\"logSearch_securityContext_fsGroup\"] ||\n                      \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n              </div>\n            </Grid>\n            <br />\n            <Grid item xs={12}>\n              <div className={classes.multiContainer}>\n                <FormSwitchWrapper\n                  value=\"logSearchSecurityContextRunAsNonRoot\"\n                  id=\"logSearch_securityContext_runAsNonRoot\"\n                  name=\"logSearch_securityContext_runAsNonRoot\"\n                  checked={logSearchSecurityContext.runAsNonRoot}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    updateField(\"logSearchSecurityContext\", {\n                      ...logSearchSecurityContext,\n                      runAsNonRoot: checked,\n                    });\n                  }}\n                  label={\"Do not run as Root\"}\n                />\n              </div>\n            </Grid>\n          </fieldset>\n          <fieldset className={classes.fieldGroup}>\n            <legend className={classes.descriptionText}>\n              SecurityContext for PostgreSQL\n            </legend>\n\n            <Grid item xs={12}>\n              <div\n                className={`${classes.multiContainer} ${classes.responsiveSectionItem}`}\n              >\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"postgres_securityContext_runAsUser\"\n                    name=\"postgres_securityContext_runAsUser\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"logSearchPostgresSecurityContext\", {\n                        ...logSearchPostgresSecurityContext,\n                        runAsUser: e.target.value,\n                      });\n                      cleanValidation(\"postgres_securityContext_runAsUser\");\n                    }}\n                    label=\"Run As User\"\n                    value={logSearchPostgresSecurityContext.runAsUser}\n                    required\n                    error={\n                      validationErrors[\"postgres_securityContext_runAsUser\"] ||\n                      \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"postgres_securityContext_runAsGroup\"\n                    name=\"postgres_securityContext_runAsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"logSearchPostgresSecurityContext\", {\n                        ...logSearchPostgresSecurityContext,\n                        runAsGroup: e.target.value,\n                      });\n                      cleanValidation(\"postgres_securityContext_runAsGroup\");\n                    }}\n                    label=\"Run As Group\"\n                    value={logSearchPostgresSecurityContext.runAsGroup}\n                    required\n                    error={\n                      validationErrors[\"postgres_securityContext_runAsGroup\"] ||\n                      \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"postgres_securityContext_fsGroup\"\n                    name=\"postgres_securityContext_fsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"logSearchPostgresSecurityContext\", {\n                        ...logSearchPostgresSecurityContext,\n                        fsGroup: e.target.value,\n                      });\n                      cleanValidation(\"postgres_securityContext_fsGroup\");\n                    }}\n                    label=\"FsGroup\"\n                    value={logSearchPostgresSecurityContext.fsGroup}\n                    required\n                    error={\n                      validationErrors[\"postgres_securityContext_fsGroup\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n              </div>\n            </Grid>\n            <br />\n            <Grid item xs={12}>\n              <div className={classes.multiContainer}>\n                <FormSwitchWrapper\n                  value=\"postgresSecurityContextRunAsNonRoot\"\n                  id=\"postgres_securityContext_runAsNonRoot\"\n                  name=\"postgres_securityContext_runAsNonRoot\"\n                  checked={logSearchPostgresSecurityContext.runAsNonRoot}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    updateField(\"logSearchPostgresSecurityContext\", {\n                      ...logSearchPostgresSecurityContext,\n                      runAsNonRoot: checked,\n                    });\n                  }}\n                  label={\"Do not run as Root\"}\n                />\n              </div>\n            </Grid>\n          </fieldset>\n        </Grid>\n      )}\n      <Grid item xs={12} className={classes.configSectionItem}>\n        <FormSwitchWrapper\n          value=\"prometheusConfig\"\n          id=\"prometheus_configuration\"\n          name=\"prometheus_configuration\"\n          checked={prometheusCustom}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"prometheusCustom\", checked);\n          }}\n          label={\"Override Prometheus defaults\"}\n        />\n      </Grid>\n      {prometheusCustom && (\n        <Grid xs={12} className={classes.prometheusCustomFields}>\n          <Grid item xs={12}>\n            <SelectWrapper\n              id=\"prometheus_storage_class\"\n              name=\"prometheus_storage_class\"\n              onChange={(e: SelectChangeEvent<string>) => {\n                updateField(\n                  \"prometheusSelectedStorageClass\",\n                  e.target.value as string\n                );\n              }}\n              label=\"Prometheus Storage Class\"\n              value={prometheusSelectedStorageClass}\n              options={configureSTClasses}\n              disabled={configureSTClasses.length < 1}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <div className={classes.multiContainer}>\n              <InputBoxWrapper\n                type=\"number\"\n                id=\"prometheus_volume_size\"\n                name=\"prometheus_volume_size\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  updateField(\"prometheusVolumeSize\", e.target.value);\n                  cleanValidation(\"prometheus_volume_size\");\n                }}\n                label=\"Storage Size [Gi]\"\n                value={prometheusVolumeSize}\n                required\n                error={validationErrors[\"prometheus_volume_size\"] || \"\"}\n                min=\"0\"\n              />\n            </div>\n          </Grid>\n          <fieldset\n            className={`${classes.fieldGroup} ${classes.fieldSpaceTop}`}\n          >\n            <legend className={classes.descriptionText}>\n              SecurityContext for Prometheus\n            </legend>\n            <Grid item xs={12} className={classes.configSectionItem}>\n              <div\n                className={`${classes.multiContainer} ${classes.responsiveSectionItem}`}\n              >\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"prometheus_securityContext_runAsUser\"\n                    name=\"prometheus_securityContext_runAsUser\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"prometheusSecurityContext\", {\n                        ...prometheusSecurityContext,\n                        runAsUser: e.target.value,\n                      });\n                      cleanValidation(\"prometheus_securityContext_runAsUser\");\n                    }}\n                    label=\"Run As User\"\n                    value={prometheusSecurityContext.runAsUser}\n                    required\n                    error={\n                      validationErrors[\n                        \"prometheus_securityContext_runAsUser\"\n                      ] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"prometheus_securityContext_runAsGroup\"\n                    name=\"prometheus_securityContext_runAsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"prometheusSecurityContext\", {\n                        ...prometheusSecurityContext,\n                        runAsGroup: e.target.value,\n                      });\n                      cleanValidation(\"prometheus_securityContext_runAsGroup\");\n                    }}\n                    label=\"Run As Group\"\n                    value={prometheusSecurityContext.runAsGroup}\n                    required\n                    error={\n                      validationErrors[\n                        \"prometheus_securityContext_runAsGroup\"\n                      ] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div className={classes.configSectionItem}>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"prometheus_securityContext_fsGroup\"\n                    name=\"prometheus_securityContext_fsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"prometheusSecurityContext\", {\n                        ...prometheusSecurityContext,\n                        fsGroup: e.target.value,\n                      });\n                      cleanValidation(\"prometheus_securityContext_fsGroup\");\n                    }}\n                    label=\"FsGroup\"\n                    value={prometheusSecurityContext.fsGroup}\n                    required\n                    error={\n                      validationErrors[\"prometheus_securityContext_fsGroup\"] ||\n                      \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n              </div>\n            </Grid>\n            <Grid item xs={12} className={classes.configSectionItem}>\n              <div\n                className={`${classes.multiContainer} ${classes.fieldSpaceTop}`}\n              >\n                <FormSwitchWrapper\n                  value=\"prometheusSecurityContextRunAsNonRoot\"\n                  id=\"prometheus_securityContext_runAsNonRoot\"\n                  name=\"prometheus_securityContext_runAsNonRoot\"\n                  checked={prometheusSecurityContext.runAsNonRoot}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    updateField(\"prometheusSecurityContext\", {\n                      ...prometheusSecurityContext,\n                      runAsNonRoot: checked,\n                    });\n                  }}\n                  label={\"Do not run as Root\"}\n                />\n              </div>\n            </Grid>\n          </fieldset>\n        </Grid>\n      )}\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  storageClasses: state.tenants.createTenant.storageClasses,\n  customImage: state.tenants.createTenant.fields.configure.customImage,\n  imageName: state.tenants.createTenant.fields.configure.imageName,\n  customDockerhub: state.tenants.createTenant.fields.configure.customDockerhub,\n  imageRegistry: state.tenants.createTenant.fields.configure.imageRegistry,\n  imageRegistryUsername:\n    state.tenants.createTenant.fields.configure.imageRegistryUsername,\n  imageRegistryPassword:\n    state.tenants.createTenant.fields.configure.imageRegistryPassword,\n  exposeMinIO: state.tenants.createTenant.fields.configure.exposeMinIO,\n  exposeConsole: state.tenants.createTenant.fields.configure.exposeConsole,\n  prometheusCustom:\n    state.tenants.createTenant.fields.configure.prometheusCustom,\n  tenantCustom: state.tenants.createTenant.fields.configure.tenantCustom,\n  logSearchCustom: state.tenants.createTenant.fields.configure.logSearchCustom,\n  logSearchVolumeSize:\n    state.tenants.createTenant.fields.configure.logSearchVolumeSize,\n  logSearchSizeFactor:\n    state.tenants.createTenant.fields.configure.logSearchSizeFactor,\n  prometheusVolumeSize:\n    state.tenants.createTenant.fields.configure.prometheusVolumeSize,\n  prometheusSizeFactor:\n    state.tenants.createTenant.fields.configure.prometheusSizeFactor,\n  logSearchSelectedStorageClass:\n    state.tenants.createTenant.fields.configure.logSearchSelectedStorageClass,\n  logSearchImage: state.tenants.createTenant.fields.configure.logSearchImage,\n  kesImage: state.tenants.createTenant.fields.configure.kesImage,\n  logSearchPostgresImage:\n    state.tenants.createTenant.fields.configure.logSearchPostgresImage,\n  logSearchPostgresInitImage:\n    state.tenants.createTenant.fields.configure.logSearchPostgresInitImage,\n  prometheusSelectedStorageClass:\n    state.tenants.createTenant.fields.configure.prometheusSelectedStorageClass,\n  prometheusImage: state.tenants.createTenant.fields.configure.prometheusImage,\n  prometheusSidecarImage:\n    state.tenants.createTenant.fields.configure.prometheusSidecarImage,\n  prometheusInitImage:\n    state.tenants.createTenant.fields.configure.prometheusInitImage,\n  selectedStorageClass:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageClass,\n  tenantSecurityContext:\n    state.tenants.createTenant.fields.configure.tenantSecurityContext,\n  logSearchSecurityContext:\n    state.tenants.createTenant.fields.configure.logSearchSecurityContext,\n  logSearchPostgresSecurityContext:\n    state.tenants.createTenant.fields.configure\n      .logSearchPostgresSecurityContext,\n  prometheusSecurityContext:\n    state.tenants.createTenant.fields.configure.prometheusSecurityContext,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n});\n\nexport default withStyles(styles)(connector(Configure));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, IconButton, Paper, Tooltip, Typography } from \"@mui/material\";\nimport CasinoIcon from \"@mui/icons-material/Casino\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport {\n  createTenantCommon,\n  formFieldStyles,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport { isPageValid, updateAddField } from \"../../actions\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError, getRandomString } from \"../../utils\";\nimport RadioGroupSelector from \"../../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport RemoveIcon from \"../../../../../icons/RemoveIcon\";\n\ninterface IIdentityProviderProps {\n  classes: any;\n  idpSelection: string;\n  accessKeys: string[];\n  secretKeys: string[];\n  openIDConfigurationURL: string;\n  openIDClientID: string;\n  openIDSecretID: string;\n  openIDCallbackURL: string;\n  openIDClaimName: string;\n  openIDScopes: string;\n  ADURL: string;\n  ADSkipTLS: boolean;\n  ADServerInsecure: boolean;\n  ADUserNameSearchFilter: string;\n  ADGroupSearchBaseDN: string;\n  ADGroupSearchFilter: string;\n  ADGroupNameAttribute: string;\n  ADUserDNs: string[];\n  ADUserNameFormat: string;\n  ADLookupBindDN: string;\n  ADLookupBindPassword: string;\n  ADUserDNSearchBaseDN: string;\n  ADUserDNSearchFilter: string;\n  ADServerStartTLS: boolean;\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    shortened: {\n      gridTemplateColumns: \"auto auto 50px 50px\",\n      display: \"grid\",\n      gridGap: 15,\n      marginBottom: 10,\n      \"& input\": {\n        fontWeight: 400,\n      },\n    },\n    buttonTray: {\n      marginLeft: 10,\n      display: \"flex\",\n      height: 38,\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n    overlayAction: {\n      marginLeft: 10,\n      \"& svg\": {\n        maxWidth: 15,\n        maxHeight: 15,\n      },\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n    protocolRadioOptions: {\n      display: \"flex\",\n      flexFlow: \"column\",\n      marginBottom: 10,\n\n      \"& label\": {\n        fontSize: 14,\n      },\n      \"& div\": {\n        display: \"flex\",\n        flexFlow: \"column\",\n        alignItems: \"baseline\",\n      },\n    },\n    adUserDnRows: {\n      display: \"flex\",\n    },\n    ...createTenantCommon,\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst IdentityProvider = ({\n  classes,\n  idpSelection,\n  accessKeys,\n  secretKeys,\n  openIDConfigurationURL,\n  openIDClientID,\n  openIDSecretID,\n  openIDCallbackURL,\n  openIDClaimName,\n  openIDScopes,\n  ADURL,\n  ADSkipTLS,\n  ADServerInsecure,\n  ADUserNameSearchFilter,\n  ADGroupSearchBaseDN,\n  ADGroupSearchFilter,\n  ADGroupNameAttribute,\n  ADUserDNs,\n  ADUserNameFormat,\n  ADLookupBindDN,\n  ADLookupBindPassword,\n  ADUserDNSearchBaseDN,\n  ADUserDNSearchFilter,\n  ADServerStartTLS,\n  updateAddField,\n  isPageValid,\n}: IIdentityProviderProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"identityProvider\", field, value);\n    },\n    [updateAddField]\n  );\n  const updateUserField = (index: number, value: string) => {\n    const newUserField = [...accessKeys];\n    newUserField[index] = value;\n    updateField(\"accessKeys\", newUserField);\n  };\n  const updatePwordField = (index: number, value: string) => {\n    const newUserField = [...secretKeys];\n    newUserField[index] = value;\n    updateField(\"secretKeys\", newUserField);\n  };\n  const updateADUserField = (index: number, value: string) => {\n    const newADUserDNsField = [...ADUserDNs];\n    newADUserDNsField[index] = value;\n    updateField(\"ADUserDNs\", newADUserDNsField);\n  };\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  // Validation\n\n  useEffect(() => {\n    let customIDPValidation: IValidation[] = [];\n\n    if (idpSelection === \"Built-in\") {\n      customIDPValidation = [...customIDPValidation];\n      for (var i = 0; i < accessKeys.length; i++) {\n        customIDPValidation.push({\n          fieldKey: `accesskey-${i.toString()}`,\n          required: true,\n          value: accessKeys[i],\n          pattern: /^[a-zA-Z0-9-]{8,63}$/,\n          customPatternMessage: \"Keys must be at least length 8\",\n        });\n        customIDPValidation.push({\n          fieldKey: `secretkey-${i.toString()}`,\n          required: true,\n          value: secretKeys[i],\n          pattern: /^[a-zA-Z0-9-]{8,63}$/,\n          customPatternMessage: \"Keys must be at least length 8\",\n        });\n      }\n    }\n\n    if (idpSelection === \"OpenID\") {\n      customIDPValidation = [\n        ...customIDPValidation,\n        {\n          fieldKey: \"openID_CONFIGURATION_URL\",\n          required: true,\n          value: openIDConfigurationURL,\n        },\n        {\n          fieldKey: \"openID_clientID\",\n          required: true,\n          value: openIDClientID,\n        },\n        {\n          fieldKey: \"openID_secretID\",\n          required: true,\n          value: openIDSecretID,\n        },\n        {\n          fieldKey: \"openID_claimName\",\n          required: true,\n          value: openIDClaimName,\n        },\n      ];\n    }\n\n    if (idpSelection === \"AD\") {\n      customIDPValidation = [\n        ...customIDPValidation,\n        {\n          fieldKey: \"AD_URL\",\n          required: true,\n          value: ADURL,\n        },\n      ];\n      // validate user DNs\n      for (let i = 0; i < ADUserDNs.length; i++) {\n        customIDPValidation.push({\n          fieldKey: `ad-userdn-${i.toString()}`,\n          required: true,\n          value: ADUserDNs[i],\n        });\n      }\n    }\n\n    const commonVal = commonFormValidation(customIDPValidation);\n\n    isPageValid(\"identityProvider\", Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    idpSelection,\n    accessKeys,\n    secretKeys,\n    openIDClientID,\n    openIDSecretID,\n    ADURL,\n    ADUserNameSearchFilter,\n    ADGroupSearchBaseDN,\n    ADGroupSearchFilter,\n    ADGroupNameAttribute,\n    ADUserDNs,\n    isPageValid,\n    openIDConfigurationURL,\n    openIDClaimName,\n  ]);\n  let inputs = null;\n  if (idpSelection === \"Built-in\") {\n    inputs = accessKeys.map((_, index) => {\n      return (\n        <Fragment key={`identityField-${index.toString()}`}>\n          <div className={classes.shortened}>\n            <InputBoxWrapper\n              id={`accesskey-${index.toString()}`}\n              label={\"\"}\n              placeholder={\"Access Key\"}\n              name={`accesskey-${index.toString()}`}\n              value={accessKeys[index]}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateUserField(index, e.target.value);\n                cleanValidation(`accesskey-${index.toString()}`);\n              }}\n              index={index}\n              key={`csv-accesskey-${index.toString()}`}\n              error={validationErrors[`accesskey-${index.toString()}`] || \"\"}\n            />\n            <InputBoxWrapper\n              id={`secretkey-${index.toString()}`}\n              label={\"\"}\n              placeholder={\"Secret Key\"}\n              name={`secretkey-${index.toString()}`}\n              value={secretKeys[index]}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updatePwordField(index, e.target.value);\n                cleanValidation(`secretkey-${index.toString()}`);\n              }}\n              index={index}\n              key={`csv-secretkey-${index.toString()}`}\n              error={validationErrors[`secretkey-${index.toString()}`] || \"\"}\n            />\n            <div className={classes.buttonTray}>\n              <Tooltip title=\"Add User\" aria-label=\"add\">\n                <div className={classes.overlayAction}>\n                  <IconButton\n                    size={\"small\"}\n                    onClick={() => {\n                      accessKeys.push(\"\");\n                      secretKeys.push(\"\");\n                      updateUserField(accessKeys.length - 1, \"\");\n                      updatePwordField(secretKeys.length - 1, \"\");\n                    }}\n                  >\n                    <AddIcon />\n                  </IconButton>\n                </div>\n              </Tooltip>\n              <Tooltip title=\"Remove\" aria-label=\"add\">\n                <div className={classes.overlayAction}>\n                  <IconButton\n                    size={\"small\"}\n                    onClick={() => {\n                      if (accessKeys.length > 1) {\n                        accessKeys.splice(index, 1);\n                        secretKeys.splice(index, 1);\n                        updateUserField(\n                          accessKeys.length - 1,\n                          accessKeys[accessKeys.length - 1]\n                        );\n                      }\n                    }}\n                  >\n                    <RemoveIcon />\n                  </IconButton>\n                </div>\n              </Tooltip>\n              <Tooltip title=\"Randomize Credentials\" aria-label=\"add\">\n                <div className={classes.overlayAction}>\n                  <IconButton\n                    onClick={() => {\n                      updateUserField(index, getRandomString(16));\n                      updatePwordField(index, getRandomString(32));\n                    }}\n                    size={\"small\"}\n                  >\n                    <CasinoIcon />\n                  </IconButton>\n                </div>\n              </Tooltip>\n            </div>\n          </div>\n        </Fragment>\n      );\n    });\n  }\n  if (idpSelection === \"AD\") {\n    inputs = ADUserDNs.map((_, index) => {\n      return (\n        <Fragment key={`identityField-${index.toString()}`}>\n          <div className={classes.adUserDnRows}>\n            <InputBoxWrapper\n              id={`ad-userdn-${index.toString()}`}\n              label={\"\"}\n              placeholder=\"\"\n              name={`ad-userdn-${index.toString()}`}\n              value={ADUserDNs[index]}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateADUserField(index, e.target.value);\n                cleanValidation(`ad-userdn-${index.toString()}`);\n              }}\n              index={index}\n              key={`csv-ad-userdn-${index.toString()}`}\n              error={validationErrors[`ad-userdn-${index.toString()}`] || \"\"}\n            />\n            <div className={classes.buttonTray}>\n              <Tooltip title=\"Add User\" aria-label=\"add\">\n                <IconButton\n                  size={\"small\"}\n                  onClick={() => {\n                    ADUserDNs.push(\"\");\n                    updateADUserField(ADUserDNs.length - 1, \"\");\n                  }}\n                >\n                  <AddIcon />\n                </IconButton>\n              </Tooltip>\n              <Tooltip title=\"Remove\" aria-label=\"add\">\n                <IconButton\n                  size={\"small\"}\n                  style={{ marginLeft: 16 }}\n                  onClick={() => {\n                    if (ADUserDNs.length > 1) {\n                      ADUserDNs.splice(index, 1);\n                      updateUserField(\n                        ADUserDNs.length - 1,\n                        ADUserDNs[ADUserDNs.length - 1]\n                      );\n                    }\n                  }}\n                >\n                  <DeleteIcon />\n                </IconButton>\n              </Tooltip>\n            </div>\n          </div>\n        </Fragment>\n      );\n    });\n  }\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Identity Provider</h3>\n        <span className={classes.descriptionText}>\n          Access to the tenant can be controlled via an external Identity\n          Manager.\n        </span>\n      </div>\n      <Grid item xs={12} className={classes.protocolRadioOptions}>\n        <label>Protocol</label>\n        <RadioGroupSelector\n          currentSelection={idpSelection}\n          id=\"idp-options\"\n          name=\"idp-options\"\n          label=\" \"\n          onChange={(e) => {\n            updateField(\"idpSelection\", e.target.value);\n          }}\n          selectorOptions={[\n            { label: \"Built-in\", value: \"Built-in\" },\n            { label: \"OpenID\", value: \"OpenID\" },\n            { label: \"Active Directory\", value: \"AD\" },\n          ]}\n        />\n      </Grid>\n      {idpSelection === \"Built-in\" && (\n        <Fragment>\n          Add additional users\n          {inputs}\n        </Fragment>\n      )}\n      {idpSelection === \"OpenID\" && (\n        <Fragment>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_CONFIGURATION_URL\"\n              name=\"openID_CONFIGURATION_URL\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDConfigurationURL\", e.target.value);\n                cleanValidation(\"openID_CONFIGURATION_URL\");\n              }}\n              label=\"Configuration URL\"\n              value={openIDConfigurationURL}\n              placeholder=\"https://your-identity-provider.com/.well-known/openid-configuration\"\n              error={validationErrors[\"openID_CONFIGURATION_URL\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_clientID\"\n              name=\"openID_clientID\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDClientID\", e.target.value);\n                cleanValidation(\"openID_clientID\");\n              }}\n              label=\"Client ID\"\n              value={openIDClientID}\n              error={validationErrors[\"openID_clientID\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_secretID\"\n              name=\"openID_secretID\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDSecretID\", e.target.value);\n                cleanValidation(\"openID_secretID\");\n              }}\n              label=\"Secret ID\"\n              value={openIDSecretID}\n              error={validationErrors[\"openID_secretID\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_callbackURL\"\n              name=\"openID_callbackURL\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDCallbackURL\", e.target.value);\n                cleanValidation(\"openID_callbackURL\");\n              }}\n              label=\"Callback URL\"\n              value={openIDCallbackURL}\n              placeholder=\"https://your-console-endpoint:9443/oauth_callback\"\n              error={validationErrors[\"openID_callbackURL\"] || \"\"}\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_claimName\"\n              name=\"openID_claimName\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDClaimName\", e.target.value);\n                cleanValidation(\"openID_claimName\");\n              }}\n              label=\"Claim Name\"\n              value={openIDClaimName}\n              error={validationErrors[\"openID_claimName\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"openID_scopes\"\n              name=\"openID_scopes\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"openIDScopes\", e.target.value);\n                cleanValidation(\"openID_scopes\");\n              }}\n              label=\"Scopes\"\n              value={openIDScopes}\n            />\n          </Grid>\n        </Fragment>\n      )}\n      {idpSelection === \"AD\" && (\n        <Fragment>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"AD_URL\"\n              name=\"AD_URL\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADURL\", e.target.value);\n                cleanValidation(\"AD_URL\");\n              }}\n              label=\"LDAP Server Address\"\n              value={ADURL}\n              placeholder=\"ldap-server:636\"\n              error={validationErrors[\"AD_URL\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <FormSwitchWrapper\n              value=\"ad_skipTLS\"\n              id=\"ad_skipTLS\"\n              name=\"ad_skipTLS\"\n              checked={ADSkipTLS}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n                updateField(\"ADSkipTLS\", checked);\n              }}\n              label={\"Skip TLS Verification\"}\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <FormSwitchWrapper\n              value=\"ad_serverInsecure\"\n              id=\"ad_serverInsecure\"\n              name=\"ad_serverInsecure\"\n              checked={ADServerInsecure}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n                updateField(\"ADServerInsecure\", checked);\n              }}\n              label={\"Server Insecure\"}\n            />\n          </Grid>\n          {ADServerInsecure ? (\n            <Grid item xs={12}>\n              <Typography\n                className={classes.error}\n                variant=\"caption\"\n                display=\"block\"\n                gutterBottom\n              >\n                Warning: All traffic with Active Directory will be unencrypted\n              </Typography>\n              <br />\n            </Grid>\n          ) : null}\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <FormSwitchWrapper\n              value=\"ad_serverStartTLS\"\n              id=\"ad_serverStartTLS\"\n              name=\"ad_serverStartTLS\"\n              checked={ADServerStartTLS}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n                updateField(\"ADServerStartTLS\", checked);\n              }}\n              label={\"Start TLS connection to AD/LDAP server\"}\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_userNameFormat\"\n              name=\"ad_userNameFormat\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADUserNameFormat\", e.target.value);\n              }}\n              label=\"Username Format\"\n              value={ADUserNameFormat}\n              placeholder=\"uid=%s,cn=accounts,dc=myldapserver,dc=com\"\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_userNameFilter\"\n              name=\"ad_userNameFilter\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADUserNameSearchFilter\", e.target.value);\n              }}\n              label=\"Username Search Filter\"\n              value={ADUserNameSearchFilter}\n              placeholder=\"(|(objectclass=posixAccount)(uid=%s))\"\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_groupSearchBaseDN\"\n              name=\"ad_groupSearchBaseDN\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADGroupSearchBaseDN\", e.target.value);\n              }}\n              label=\"Group Search Base DN\"\n              value={ADGroupSearchBaseDN}\n              placeholder=\"ou=hwengg,dc=min,dc=io;ou=swengg,dc=min,dc=io\"\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_groupSearchFilter\"\n              name=\"ad_groupSearchFilter\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADGroupSearchFilter\", e.target.value);\n              }}\n              label=\"Group Search Filter\"\n              value={ADGroupSearchFilter}\n              placeholder=\"(&(objectclass=groupOfNames)(member=%s))\"\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_groupNameAttribute\"\n              name=\"ad_groupNameAttribute\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADGroupNameAttribute\", e.target.value);\n              }}\n              label=\"Group Name Attribute\"\n              value={ADGroupNameAttribute}\n              placeholder=\"cn\"\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_lookupBindDN\"\n              name=\"ad_lookupBindDN\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADLookupBindDN\", e.target.value);\n              }}\n              label=\"Lookup Bind DN\"\n              value={ADLookupBindDN}\n              placeholder=\"cn=admin,dc=min,dc=io\"\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_lookupBindPassword\"\n              name=\"ad_lookupBindPassword\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADLookupBindPassword\", e.target.value);\n              }}\n              label=\"Lookup Bind Password\"\n              value={ADLookupBindPassword}\n              placeholder=\"admin\"\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_userDNSearchBaseDN\"\n              name=\"ad_userDNSearchBaseDN\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADUserDNSearchBaseDN\", e.target.value);\n              }}\n              label=\"User DN Search Base DN\"\n              value={ADUserDNSearchBaseDN}\n              placeholder=\"dc=min,dc=io\"\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"ad_userDNSearchFilter\"\n              name=\"ad_userDNSearchFilter\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"ADUserDNSearchFilter\", e.target.value);\n              }}\n              label=\"User DN Search Filter\"\n              value={ADUserDNSearchFilter}\n              placeholder=\"(uid=%s)\"\n            />\n          </Grid>\n          <fieldset className={classes.fieldGroup}>\n            <legend className={classes.descriptionText}>\n              List of user DNs (Distinguished Names) to be Tenant Administrators\n            </legend>\n            <Grid item xs={12}>\n              {inputs}\n            </Grid>\n          </fieldset>\n        </Fragment>\n      )}\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  idpSelection: state.tenants.createTenant.fields.identityProvider.idpSelection,\n  accessKeys: state.tenants.createTenant.fields.identityProvider.accessKeys,\n  secretKeys: state.tenants.createTenant.fields.identityProvider.secretKeys,\n  openIDConfigurationURL:\n    state.tenants.createTenant.fields.identityProvider.openIDConfigurationURL,\n  openIDClientID:\n    state.tenants.createTenant.fields.identityProvider.openIDClientID,\n  openIDSecretID:\n    state.tenants.createTenant.fields.identityProvider.openIDSecretID,\n  openIDCallbackURL:\n    state.tenants.createTenant.fields.identityProvider.openIDCallbackURL,\n  openIDClaimName:\n    state.tenants.createTenant.fields.identityProvider.openIDClaimName,\n  openIDScopes: state.tenants.createTenant.fields.identityProvider.openIDScopes,\n  ADURL: state.tenants.createTenant.fields.identityProvider.ADURL,\n  ADSkipTLS: state.tenants.createTenant.fields.identityProvider.ADSkipTLS,\n  ADServerInsecure:\n    state.tenants.createTenant.fields.identityProvider.ADServerInsecure,\n  ADUserNameSearchFilter:\n    state.tenants.createTenant.fields.identityProvider.ADUserNameSearchFilter,\n  ADGroupSearchBaseDN:\n    state.tenants.createTenant.fields.identityProvider.ADGroupSearchBaseDN,\n  ADGroupSearchFilter:\n    state.tenants.createTenant.fields.identityProvider.ADGroupSearchFilter,\n  ADGroupNameAttribute:\n    state.tenants.createTenant.fields.identityProvider.ADGroupNameAttribute,\n  ADUserDNs: state.tenants.createTenant.fields.identityProvider.ADUserDNs,\n  ADUserNameFormat:\n    state.tenants.createTenant.fields.identityProvider.ADUserNameFormat,\n  ADLookupBindDN:\n    state.tenants.createTenant.fields.identityProvider.ADLookupBindDN,\n  ADLookupBindPassword:\n    state.tenants.createTenant.fields.identityProvider.ADLookupBindPassword,\n  ADUserDNSearchBaseDN:\n    state.tenants.createTenant.fields.identityProvider.ADUserDNSearchBaseDN,\n  ADUserDNSearchFilter:\n    state.tenants.createTenant.fields.identityProvider.ADUserDNSearchFilter,\n  ADServerStartTLS:\n    state.tenants.createTenant.fields.identityProvider.ADServerStartTLS,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n});\n\nexport default withStyles(styles)(connector(IdentityProvider));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, IconButton, Paper, Typography } from \"@mui/material\";\nimport {\n  createTenantCommon,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport {\n  addCaCertificate,\n  addFileToCaCertificates,\n  addFileToKeyPair,\n  addKeyPair,\n  deleteCaCertificate,\n  deleteKeyPair,\n  isPageValid,\n  updateAddField,\n} from \"../../actions\";\nimport { AppState } from \"../../../../../store\";\nimport { KeyPair } from \"../../ListTenants/utils\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport FileSelector from \"../../../Common/FormComponents/FileSelector/FileSelector\";\nimport AddIcon from \"../../../../../icons/AddIcon\";\nimport RemoveIcon from \"../../../../../icons/RemoveIcon\";\n\ninterface ISecurityProps {\n  classes: any;\n  enableTLS: boolean;\n  enableAutoCert: boolean;\n  enableCustomCerts: boolean;\n  minioCertificates: KeyPair[];\n  caCertificates: KeyPair[];\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  addFileToCaCertificates: typeof addFileToCaCertificates;\n  deleteCaCertificate: typeof deleteCaCertificate;\n  addCaCertificate: typeof addCaCertificate;\n  addKeyPair: typeof addKeyPair;\n  addFileToKeyPair: typeof addFileToKeyPair;\n  deleteKeyPair: typeof deleteKeyPair;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    minioCertificateRows: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-start\",\n      borderBottom: \"1px solid #EAEAEA\",\n      \"&:last-child\": {\n        borderBottom: 0,\n      },\n      \"@media (max-width: 900px)\": {\n        flex: 1,\n      },\n    },\n    fileItem: {\n      marginRight: 10,\n      display: \"flex\",\n      \"& div label\": {\n        minWidth: 50,\n      },\n\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    minioCertsContainer: {\n      marginBottom: 15,\n    },\n    minioCACertsRow: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-start\",\n\n      borderBottom: \"1px solid #EAEAEA\",\n      \"&:last-child\": {\n        borderBottom: 0,\n      },\n      \"@media (max-width: 900px)\": {\n        flex: 1,\n\n        \"& div label\": {\n          minWidth: 50,\n        },\n      },\n    },\n    rowActions: {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n      \"@media (max-width: 900px)\": {\n        flex: 1,\n      },\n    },\n    overlayAction: {\n      marginLeft: 10,\n      \"& svg\": {\n        maxWidth: 15,\n        maxHeight: 15,\n      },\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n\n    ...createTenantCommon,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst Security = ({\n  classes,\n  enableTLS,\n  enableAutoCert,\n  enableCustomCerts,\n  minioCertificates,\n  caCertificates,\n  updateAddField,\n  isPageValid,\n  addFileToCaCertificates,\n  deleteCaCertificate,\n  addCaCertificate,\n  addKeyPair,\n  addFileToKeyPair,\n  deleteKeyPair,\n}: ISecurityProps) => {\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"security\", field, value);\n    },\n    [updateAddField]\n  );\n\n  // Validation\n\n  useEffect(() => {\n    if (!enableTLS) {\n      isPageValid(\"security\", true);\n      return;\n    }\n    if (enableAutoCert) {\n      isPageValid(\"security\", true);\n      return;\n    }\n    if (enableCustomCerts) {\n      isPageValid(\"security\", true);\n      return;\n    }\n    isPageValid(\"security\", false);\n  }, [enableTLS, enableAutoCert, enableCustomCerts, isPageValid]);\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Security</h3>\n      </div>\n      <Grid item xs={12}>\n        <FormSwitchWrapper\n          value=\"enableTLS\"\n          id=\"enableTLS\"\n          name=\"enableTLS\"\n          checked={enableTLS}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"enableTLS\", checked);\n          }}\n          label={\"Enable TLS\"}\n        />\n        Enable TLS for the tenant, this is required for Encryption Configuration\n        {enableTLS && (\n          <Fragment>\n            <br />\n            <br />\n            <Typography variant=\"caption\" display=\"block\" gutterBottom>\n              AutoCert: MinIO Operator will generate all TLS certificates\n              automatically\n            </Typography>\n            <Typography variant=\"caption\" display=\"block\" gutterBottom>\n              Custom certificates: Allow user to provide your own certificates\n            </Typography>\n            <br />\n          </Fragment>\n        )}\n      </Grid>\n      {enableTLS && (\n        <Fragment>\n          <Grid item xs={12}>\n            <FormSwitchWrapper\n              value=\"enableAutoCert\"\n              id=\"enableAutoCert\"\n              name=\"enableAutoCert\"\n              checked={enableAutoCert}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n\n                updateField(\"enableAutoCert\", checked);\n              }}\n              label={\"Enable AutoCert\"}\n            />\n            <FormSwitchWrapper\n              value=\"enableCustomCerts\"\n              id=\"enableCustomCerts\"\n              name=\"enableCustomCerts\"\n              checked={enableCustomCerts}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n\n                updateField(\"enableCustomCerts\", checked);\n              }}\n              label={\"Custom Certificates\"}\n            />\n          </Grid>\n          {enableCustomCerts && (\n            <Fragment>\n              <Grid container>\n                <Grid item xs={12} className={classes.minioCertsContainer}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      MinIO Certificates\n                    </legend>\n                    {minioCertificates.map((keyPair: KeyPair) => (\n                      <Grid\n                        item\n                        xs={12}\n                        key={keyPair.id}\n                        className={classes.minioCertificateRows}\n                      >\n                        <Grid item xs={10} className={classes.fileItem}>\n                          <FileSelector\n                            onChange={(encodedValue, fileName) => {\n                              addFileToKeyPair(\n                                keyPair.id,\n                                \"cert\",\n                                fileName,\n                                encodedValue\n                              );\n                            }}\n                            accept=\".cer,.crt,.cert,.pem\"\n                            id=\"tlsCert\"\n                            name=\"tlsCert\"\n                            label=\"Cert\"\n                            value={keyPair.cert}\n                          />\n                          <FileSelector\n                            onChange={(encodedValue, fileName) => {\n                              addFileToKeyPair(\n                                keyPair.id,\n                                \"key\",\n                                fileName,\n                                encodedValue\n                              );\n                            }}\n                            accept=\".key,.pem\"\n                            id=\"tlsKey\"\n                            name=\"tlsKey\"\n                            label=\"Key\"\n                            value={keyPair.key}\n                          />\n                        </Grid>\n\n                        <Grid item xs={2} className={classes.rowActions}>\n                          <div className={classes.overlayAction}>\n                            <IconButton size={\"small\"} onClick={addKeyPair}>\n                              <AddIcon />\n                            </IconButton>\n                          </div>\n                          <div className={classes.overlayAction}>\n                            <IconButton\n                              size={\"small\"}\n                              onClick={() => {\n                                deleteKeyPair(keyPair.id);\n                              }}\n                            >\n                              <RemoveIcon />\n                            </IconButton>\n                          </div>\n                        </Grid>\n                      </Grid>\n                    ))}\n                  </fieldset>\n                </Grid>\n              </Grid>\n\n              <Grid container>\n                <Grid item xs={12} className={classes.minioCertsContainer}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      MinIO CA Certificates\n                    </legend>\n\n                    {caCertificates.map((keyPair: KeyPair) => (\n                      <Grid\n                        item\n                        xs={12}\n                        key={keyPair.id}\n                        className={classes.minioCACertsRow}\n                      >\n                        <Grid item xs={6}>\n                          <FileSelector\n                            onChange={(encodedValue, fileName) => {\n                              addFileToCaCertificates(\n                                keyPair.id,\n                                \"cert\",\n                                fileName,\n                                encodedValue\n                              );\n                            }}\n                            accept=\".cer,.crt,.cert,.pem\"\n                            id=\"tlsCert\"\n                            name=\"tlsCert\"\n                            label=\"Cert\"\n                            value={keyPair.cert}\n                          />\n                        </Grid>\n                        <Grid item xs={6}>\n                          <div className={classes.rowActions}>\n                            <div className={classes.overlayAction}>\n                              <IconButton\n                                size={\"small\"}\n                                onClick={addCaCertificate}\n                              >\n                                <AddIcon />\n                              </IconButton>\n                            </div>\n                            <div className={classes.overlayAction}>\n                              <IconButton\n                                size={\"small\"}\n                                onClick={() => {\n                                  deleteCaCertificate(keyPair.id);\n                                }}\n                              >\n                                <RemoveIcon />\n                              </IconButton>\n                            </div>\n                          </div>\n                        </Grid>\n                      </Grid>\n                    ))}\n                  </fieldset>\n                </Grid>\n              </Grid>\n            </Fragment>\n          )}\n        </Fragment>\n      )}\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  enableTLS: state.tenants.createTenant.fields.security.enableTLS,\n  enableAutoCert: state.tenants.createTenant.fields.security.enableAutoCert,\n  enableCustomCerts:\n    state.tenants.createTenant.fields.security.enableCustomCerts,\n  minioCertificates: state.tenants.createTenant.certificates.minioCertificates,\n  caCertificates: state.tenants.createTenant.certificates.caCertificates,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n  addFileToCaCertificates,\n  deleteCaCertificate,\n  addCaCertificate,\n  addKeyPair,\n  addFileToKeyPair,\n  deleteKeyPair,\n});\n\nexport default withStyles(styles)(connector(Security));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Paper } from \"@mui/material\";\nimport Grid from \"@mui/material/Grid\";\nimport {\n  addFileClientCert,\n  addFileGemaltoCa,\n  addFileServerCert,\n  addFileVaultCa,\n  addFileVaultCert,\n  isPageValid,\n  updateAddField,\n} from \"../../actions\";\nimport {\n  createTenantCommon,\n  formFieldStyles,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError } from \"../../utils\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport FileSelector from \"../../../Common/FormComponents/FileSelector/FileSelector\";\nimport RadioGroupSelector from \"../../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport { KeyPair } from \"../../ListTenants/utils\";\nimport { ISecurityContext } from \"../../types\";\n\ninterface IEncryptionProps {\n  classes: any;\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  addFileServerCert: typeof addFileServerCert;\n  addFileClientCert: typeof addFileClientCert;\n  addFileVaultCert: typeof addFileVaultCert;\n  addFileVaultCa: typeof addFileVaultCa;\n  addFileGemaltoCa: typeof addFileGemaltoCa;\n  enableEncryption: boolean;\n  encryptionType: string;\n  gemaltoEndpoint: string;\n  gemaltoToken: string;\n  gemaltoDomain: string;\n  gemaltoRetry: string;\n  awsEndpoint: string;\n  awsRegion: string;\n  awsKMSKey: string;\n  awsAccessKey: string;\n  awsSecretKey: string;\n  awsToken: string;\n  vaultEndpoint: string;\n  vaultEngine: string;\n  vaultNamespace: string;\n  vaultPrefix: string;\n  vaultAppRoleEngine: string;\n  vaultId: string;\n  vaultSecret: string;\n  vaultRetry: string;\n  vaultPing: string;\n  azureEndpoint: string;\n  azureTenantID: string;\n  azureClientID: string;\n  azureClientSecret: string;\n  gcpProjectID: string;\n  gcpEndpoint: string;\n  gcpClientEmail: string;\n  gcpClientID: string;\n  gcpPrivateKeyID: string;\n  gcpPrivateKey: string;\n  enableCustomCertsForKES: boolean;\n  enableAutoCert: boolean;\n  enableTLS: boolean;\n  enableCustomCerts: boolean;\n  minioCertificates: KeyPair[];\n  serverCertificate: KeyPair;\n  clientCertificate: KeyPair;\n  vaultCertificate: KeyPair;\n  vaultCA: KeyPair;\n  gemaltoCA: KeyPair;\n  kesSecurityContext: ISecurityContext;\n  replicas: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    encryptionTypeOptions: {\n      marginBottom: 15,\n    },\n    mutualTlsConfig: {\n      marginTop: 15,\n      \"& fieldset\": {\n        flex: 1,\n      },\n    },\n    rightSpacer: {\n      marginRight: 15,\n    },\n    responsiveContainer: {\n      \"@media (max-width: 900px)\": {\n        display: \"flex\",\n        flexFlow: \"column\",\n      },\n    },\n    ...createTenantCommon,\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst Encryption = ({\n  classes,\n  updateAddField,\n  isPageValid,\n  addFileServerCert,\n  addFileClientCert,\n  addFileVaultCert,\n  addFileVaultCa,\n  addFileGemaltoCa,\n  enableEncryption,\n  enableCustomCerts,\n  encryptionType,\n  gemaltoEndpoint,\n  gemaltoToken,\n  gemaltoDomain,\n  gemaltoRetry,\n  awsEndpoint,\n  awsRegion,\n  awsKMSKey,\n  awsAccessKey,\n  awsSecretKey,\n  awsToken,\n  vaultEndpoint,\n  vaultEngine,\n  vaultNamespace,\n  vaultPrefix,\n  vaultAppRoleEngine,\n  vaultId,\n  vaultSecret,\n  vaultRetry,\n  vaultPing,\n  azureEndpoint,\n  azureTenantID,\n  azureClientID,\n  azureClientSecret,\n  gcpProjectID,\n  gcpEndpoint,\n  gcpClientEmail,\n  gcpClientID,\n  gcpPrivateKeyID,\n  gcpPrivateKey,\n  enableCustomCertsForKES,\n  enableAutoCert,\n  enableTLS,\n  minioCertificates,\n  serverCertificate,\n  clientCertificate,\n  vaultCertificate,\n  vaultCA,\n  gemaltoCA,\n  kesSecurityContext,\n  replicas,\n}: IEncryptionProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  let encryptionAvailable = false;\n  if (\n    enableTLS &&\n    (enableAutoCert ||\n      (minioCertificates &&\n        minioCertificates.filter(\n          (item) => item.encoded_key && item.encoded_cert\n        ).length > 0))\n  ) {\n    encryptionAvailable = true;\n  }\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"encryption\", field, value);\n    },\n    [updateAddField]\n  );\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  // Validation\n  useEffect(() => {\n    let encryptionValidation: IValidation[] = [];\n\n    if (enableEncryption) {\n      encryptionValidation = [\n        ...encryptionValidation,\n        {\n          fieldKey: \"replicas\",\n          required: true,\n          value: replicas,\n          customValidation: parseInt(replicas) < 1,\n          customValidationMessage: \"Replicas needs to be 1 or greater\",\n        },\n        {\n          fieldKey: \"kes_securityContext_runAsUser\",\n          required: true,\n          value: kesSecurityContext.runAsUser,\n          customValidation:\n            kesSecurityContext.runAsUser === \"\" ||\n            parseInt(kesSecurityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"kes_securityContext_runAsGroup\",\n          required: true,\n          value: kesSecurityContext.runAsGroup,\n          customValidation:\n            kesSecurityContext.runAsGroup === \"\" ||\n            parseInt(kesSecurityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"kes_securityContext_fsGroup\",\n          required: true,\n          value: kesSecurityContext.fsGroup,\n          customValidation:\n            kesSecurityContext.fsGroup === \"\" ||\n            parseInt(kesSecurityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n\n      if (enableCustomCerts) {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"serverKey\",\n            required: !enableAutoCert,\n            value: serverCertificate.encoded_key,\n          },\n          {\n            fieldKey: \"serverCert\",\n            required: !enableAutoCert,\n            value: serverCertificate.encoded_cert,\n          },\n          {\n            fieldKey: \"clientKey\",\n            required: !enableAutoCert,\n            value: clientCertificate.encoded_key,\n          },\n          {\n            fieldKey: \"clientCert\",\n            required: !enableAutoCert,\n            value: clientCertificate.encoded_cert,\n          },\n        ];\n      }\n\n      if (encryptionType === \"vault\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"vault_endpoint\",\n            required: true,\n            value: vaultEndpoint,\n          },\n          {\n            fieldKey: \"vault_id\",\n            required: true,\n            value: vaultId,\n          },\n          {\n            fieldKey: \"vault_secret\",\n            required: true,\n            value: vaultSecret,\n          },\n          {\n            fieldKey: \"vault_ping\",\n            required: false,\n            value: vaultPing,\n            customValidation: parseInt(vaultPing) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n          {\n            fieldKey: \"vault_retry\",\n            required: false,\n            value: vaultRetry,\n            customValidation: parseInt(vaultRetry) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"aws\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"aws_endpoint\",\n            required: true,\n            value: awsEndpoint,\n          },\n          {\n            fieldKey: \"aws_region\",\n            required: true,\n            value: awsRegion,\n          },\n          {\n            fieldKey: \"aws_accessKey\",\n            required: true,\n            value: awsAccessKey,\n          },\n          {\n            fieldKey: \"aws_secretKey\",\n            required: true,\n            value: awsSecretKey,\n          },\n        ];\n      }\n\n      if (encryptionType === \"gemalto\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"gemalto_endpoint\",\n            required: true,\n            value: gemaltoEndpoint,\n          },\n          {\n            fieldKey: \"gemalto_token\",\n            required: true,\n            value: gemaltoToken,\n          },\n          {\n            fieldKey: \"gemalto_domain\",\n            required: true,\n            value: gemaltoDomain,\n          },\n          {\n            fieldKey: \"gemalto_retry\",\n            required: false,\n            value: gemaltoRetry,\n            customValidation: parseInt(gemaltoRetry) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"azure\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"azure_endpoint\",\n            required: true,\n            value: azureEndpoint,\n          },\n          {\n            fieldKey: \"azure_tenant_id\",\n            required: true,\n            value: azureTenantID,\n          },\n          {\n            fieldKey: \"azure_client_id\",\n            required: true,\n            value: azureClientID,\n          },\n          {\n            fieldKey: \"azure_client_secret\",\n            required: true,\n            value: azureClientSecret,\n          },\n        ];\n      }\n    }\n\n    const commonVal = commonFormValidation(encryptionValidation);\n\n    isPageValid(\"encryption\", Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    enableEncryption,\n    encryptionType,\n    vaultEndpoint,\n    vaultEngine,\n    vaultId,\n    vaultSecret,\n    vaultPing,\n    vaultRetry,\n    awsEndpoint,\n    awsRegion,\n    awsSecretKey,\n    awsAccessKey,\n    gemaltoEndpoint,\n    gemaltoToken,\n    gemaltoDomain,\n    gemaltoRetry,\n    gcpProjectID,\n    gcpEndpoint,\n    gcpClientEmail,\n    gcpClientID,\n    gcpPrivateKeyID,\n    gcpPrivateKey,\n    azureEndpoint,\n    azureTenantID,\n    azureClientID,\n    azureClientSecret,\n    isPageValid,\n    enableAutoCert,\n    enableCustomCerts,\n    serverCertificate.encoded_key,\n    serverCertificate.encoded_cert,\n    clientCertificate.encoded_key,\n    clientCertificate.encoded_cert,\n    kesSecurityContext,\n    replicas,\n  ]);\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Encryption</h3>\n        <span className={classes.descriptionText}>\n          How would you like to encrypt the information at rest.\n        </span>\n      </div>\n      <Grid item xs={12}>\n        <FormSwitchWrapper\n          value=\"enableEncryption\"\n          id=\"enableEncryption\"\n          name=\"enableEncryption\"\n          checked={enableEncryption}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"enableEncryption\", checked);\n          }}\n          label={\"Enable Server Side Encryption\"}\n          disabled={!encryptionAvailable}\n        />\n      </Grid>\n      {enableEncryption && (\n        <Fragment>\n          <Grid item xs={12} className={classes.encryptionTypeOptions}>\n            <RadioGroupSelector\n              currentSelection={encryptionType}\n              id=\"encryptionType\"\n              name=\"encryptionType\"\n              label=\"Encryption Options\"\n              onChange={(e) => {\n                updateField(\"encryptionType\", e.target.value);\n              }}\n              selectorOptions={[\n                { label: \"Vault\", value: \"vault\" },\n                { label: \"AWS\", value: \"aws\" },\n                { label: \"Gemalto\", value: \"gemalto\" },\n                { label: \"GCP\", value: \"gcp\" },\n                { label: \"Azure\", value: \"azure\" },\n              ]}\n            />\n          </Grid>\n          {encryptionType === \"vault\" && (\n            <Fragment>\n              <Grid item xs={12}>\n                <FormSwitchWrapper\n                  value=\"enableCustomCertsForKES\"\n                  id=\"enableCustomCertsForKES\"\n                  name=\"enableCustomCertsForKES\"\n                  checked={enableCustomCertsForKES || !enableAutoCert}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n\n                    updateField(\"enableCustomCertsForKES\", checked);\n                  }}\n                  label={\"Custom Certificates\"}\n                  disabled={!enableAutoCert}\n                />\n              </Grid>\n              {(enableCustomCertsForKES || !enableAutoCert) && (\n                <Fragment>\n                  <Grid container>\n                    <Grid item xs={12} style={{ marginBottom: 15 }}>\n                      <fieldset className={classes.fieldGroup}>\n                        <legend className={classes.descriptionText}>\n                          Encryption Service Certificates\n                        </legend>\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            addFileServerCert(\"key\", fileName, encodedValue);\n                            cleanValidation(\"serverKey\");\n                          }}\n                          accept=\".key,.pem\"\n                          id=\"serverKey\"\n                          name=\"serverKey\"\n                          label=\"Key\"\n                          error={validationErrors[\"serverKey\"] || \"\"}\n                          value={serverCertificate.key}\n                          required={!enableAutoCert}\n                        />\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            addFileServerCert(\"cert\", fileName, encodedValue);\n                            cleanValidation(\"serverCert\");\n                          }}\n                          accept=\".cer,.crt,.cert,.pem\"\n                          id=\"serverCert\"\n                          name=\"serverCert\"\n                          label=\"Cert\"\n                          error={validationErrors[\"serverCert\"] || \"\"}\n                          value={serverCertificate.cert}\n                          required={!enableAutoCert}\n                        />\n                      </fieldset>\n                    </Grid>\n                  </Grid>\n\n                  <Grid container style={{ marginBottom: 15 }}>\n                    <Grid item xs={12}>\n                      <fieldset className={classes.fieldGroup}>\n                        <legend className={classes.descriptionText}>\n                          Mutual TLS authentication\n                        </legend>\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            addFileClientCert(\"key\", fileName, encodedValue);\n                            cleanValidation(\"clientKey\");\n                          }}\n                          accept=\".key,.pem\"\n                          id=\"clientKey\"\n                          name=\"clientKey\"\n                          label=\"Key\"\n                          error={validationErrors[\"clientKey\"] || \"\"}\n                          value={clientCertificate.key}\n                          required={!enableAutoCert}\n                        />\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            addFileClientCert(\"cert\", fileName, encodedValue);\n                            cleanValidation(\"clientCert\");\n                          }}\n                          accept=\".cer,.crt,.cert,.pem\"\n                          id=\"clientCert\"\n                          name=\"clientCert\"\n                          label=\"Cert\"\n                          error={validationErrors[\"clientCert\"] || \"\"}\n                          value={clientCertificate.cert}\n                          required={!enableAutoCert}\n                        />\n                      </fieldset>\n                    </Grid>\n                  </Grid>\n                </Fragment>\n              )}\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"vault_endpoint\"\n                  name=\"vault_endpoint\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"vaultEndpoint\", e.target.value);\n                    cleanValidation(\"vault_endpoint\");\n                  }}\n                  label=\"Endpoint\"\n                  value={vaultEndpoint}\n                  error={validationErrors[\"vault_endpoint\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"vault_engine\"\n                  name=\"vault_engine\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"vaultEngine\", e.target.value);\n                    cleanValidation(\"vault_engine\");\n                  }}\n                  label=\"Engine\"\n                  value={vaultEngine}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"vault_namespace\"\n                  name=\"vault_namespace\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"vaultNamespace\", e.target.value);\n                  }}\n                  label=\"Namespace\"\n                  value={vaultNamespace}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"vault_prefix\"\n                  name=\"vault_prefix\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"vaultPrefix\", e.target.value);\n                  }}\n                  label=\"Prefix\"\n                  value={vaultPrefix}\n                />\n              </Grid>\n\n              <Grid item xs={12}>\n                <fieldset className={classes.fieldGroup}>\n                  <legend className={classes.descriptionText}>App Role</legend>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"vault_approle_engine\"\n                      name=\"vault_approle_engine\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"vaultAppRoleEngine\", e.target.value);\n                      }}\n                      label=\"Engine\"\n                      value={vaultAppRoleEngine}\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"vault_id\"\n                      name=\"vault_id\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"vaultId\", e.target.value);\n                        cleanValidation(\"vault_id\");\n                      }}\n                      label=\"AppRole ID\"\n                      value={vaultId}\n                      error={validationErrors[\"vault_id\"] || \"\"}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"vault_secret\"\n                      name=\"vault_secret\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"vaultSecret\", e.target.value);\n                        cleanValidation(\"vault_secret\");\n                      }}\n                      label=\"AppRole Secret\"\n                      value={vaultSecret}\n                      error={validationErrors[\"vault_secret\"] || \"\"}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      type=\"number\"\n                      min=\"0\"\n                      id=\"vault_retry\"\n                      name=\"vault_retry\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"vaultRetry\", e.target.value);\n                        cleanValidation(\"vault_retry\");\n                      }}\n                      label=\"Retry (Seconds)\"\n                      value={vaultRetry}\n                      error={validationErrors[\"vault_retry\"] || \"\"}\n                    />\n                  </Grid>\n                </fieldset>\n              </Grid>\n\n              <Grid container className={classes.mutualTlsConfig}>\n                <fieldset className={classes.fieldGroup}>\n                  <legend className={classes.descriptionText}>\n                    Mutual TLS authentication (optional)\n                  </legend>\n                  <FileSelector\n                    onChange={(encodedValue, fileName) => {\n                      addFileVaultCert(\"key\", fileName, encodedValue);\n                      cleanValidation(\"vault_key\");\n                    }}\n                    accept=\".key,.pem\"\n                    id=\"vault_key\"\n                    name=\"vault_key\"\n                    label=\"Key\"\n                    value={vaultCertificate.key}\n                  />\n                  <FileSelector\n                    onChange={(encodedValue, fileName) => {\n                      addFileVaultCert(\"cert\", fileName, encodedValue);\n                      cleanValidation(\"vault_cert\");\n                    }}\n                    accept=\".cer,.crt,.cert,.pem\"\n                    id=\"vault_cert\"\n                    name=\"vault_cert\"\n                    label=\"Cert\"\n                    value={vaultCertificate.cert}\n                  />\n                  <FileSelector\n                    onChange={(encodedValue, fileName) => {\n                      addFileVaultCa(fileName, encodedValue);\n                      cleanValidation(\"vault_ca\");\n                    }}\n                    accept=\".cer,.crt,.cert,.pem\"\n                    id=\"vault_ca\"\n                    name=\"vault_ca\"\n                    label=\"CA\"\n                    value={vaultCA.cert}\n                  />\n                </fieldset>\n              </Grid>\n              <Grid\n                item\n                xs={12}\n                className={classes.formFieldRow}\n                style={{ marginTop: 15 }}\n              >\n                <fieldset className={classes.fieldGroup}>\n                  <legend className={classes.descriptionText}>Status</legend>\n                  <InputBoxWrapper\n                    type=\"number\"\n                    min=\"0\"\n                    id=\"vault_ping\"\n                    name=\"vault_ping\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"vaultPing\", e.target.value);\n                      cleanValidation(\"vault_ping\");\n                    }}\n                    label=\"Ping (Seconds)\"\n                    value={vaultPing}\n                    error={validationErrors[\"vault_ping\"] || \"\"}\n                  />\n                </fieldset>\n              </Grid>\n            </Fragment>\n          )}\n          {encryptionType === \"azure\" && (\n            <Fragment>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"azure_endpoint\"\n                  name=\"azure_endpoint\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"azureEndpoint\", e.target.value);\n                    cleanValidation(\"azure_endpoint\");\n                  }}\n                  label=\"Endpoint\"\n                  value={azureEndpoint}\n                  error={validationErrors[\"azure_endpoint\"] || \"\"}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <fieldset className={classes.fieldGroup}>\n                  <legend className={classes.descriptionText}>\n                    Credentials\n                  </legend>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"azure_tenant_id\"\n                      name=\"azure_tenant_id\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"azureTenantID\", e.target.value);\n                        cleanValidation(\"azure_tenant_id\");\n                      }}\n                      label=\"Tenant ID\"\n                      value={azureTenantID}\n                      error={validationErrors[\"azure_tenant_id\"] || \"\"}\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"azure_client_id\"\n                      name=\"azure_client_id\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"azureClientID\", e.target.value);\n                        cleanValidation(\"azure_client_id\");\n                      }}\n                      label=\"Client ID\"\n                      value={azureClientID}\n                      error={validationErrors[\"azure_client_id\"] || \"\"}\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"azure_client_secret\"\n                      name=\"azure_client_secret\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"azureClientSecret\", e.target.value);\n                        cleanValidation(\"azure_client_secret\");\n                      }}\n                      label=\"Client Secret\"\n                      value={azureClientSecret}\n                      error={validationErrors[\"azure_client_secret\"] || \"\"}\n                    />\n                  </Grid>\n                </fieldset>\n              </Grid>\n            </Fragment>\n          )}\n          {encryptionType === \"gcp\" && (\n            <Fragment>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"gcp_project_id\"\n                  name=\"gcp_project_id\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"gcpProjectID\", e.target.value);\n                  }}\n                  label=\"Project ID\"\n                  value={gcpProjectID}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"gcp_endpoint\"\n                  name=\"gcp_endpoint\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"gcpEndpoint\", e.target.value);\n                  }}\n                  label=\"Endpoint\"\n                  value={gcpEndpoint}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <fieldset className={classes.fieldGroup}>\n                  <legend className={classes.descriptionText}>\n                    Credentials\n                  </legend>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"gcp_client_email\"\n                      name=\"gcp_client_email\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"gcpClientEmail\", e.target.value);\n                      }}\n                      label=\"Client Email\"\n                      value={gcpClientEmail}\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"gcp_client_id\"\n                      name=\"gcp_client_id\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"gcpClientID\", e.target.value);\n                      }}\n                      label=\"Client ID\"\n                      value={gcpClientID}\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"gcp_private_key_id\"\n                      name=\"gcp_private_key_id\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"gcpPrivateKeyID\", e.target.value);\n                      }}\n                      label=\"Private Key ID\"\n                      value={gcpPrivateKeyID}\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"gcp_private_key\"\n                      name=\"gcp_private_key\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"gcpPrivateKey\", e.target.value);\n                      }}\n                      label=\"Private Key\"\n                      value={gcpPrivateKey}\n                    />\n                  </Grid>\n                </fieldset>\n              </Grid>\n            </Fragment>\n          )}\n          {encryptionType === \"aws\" && (\n            <Fragment>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"aws_endpoint\"\n                  name=\"aws_endpoint\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"awsEndpoint\", e.target.value);\n                    cleanValidation(\"aws_endpoint\");\n                  }}\n                  label=\"Endpoint\"\n                  value={awsEndpoint}\n                  error={validationErrors[\"aws_endpoint\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"aws_region\"\n                  name=\"aws_region\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"awsRegion\", e.target.value);\n                    cleanValidation(\"aws_region\");\n                  }}\n                  label=\"Region\"\n                  value={awsRegion}\n                  error={validationErrors[\"aws_region\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"aws_kmsKey\"\n                  name=\"aws_kmsKey\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"awsKMSKey\", e.target.value);\n                  }}\n                  label=\"KMS Key\"\n                  value={awsKMSKey}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <fieldset className={classes.fieldGroup}>\n                  <legend className={classes.descriptionText}>\n                    Credentials\n                  </legend>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"aws_accessKey\"\n                      name=\"aws_accessKey\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"awsAccessKey\", e.target.value);\n                        cleanValidation(\"aws_accessKey\");\n                      }}\n                      label=\"Access Key\"\n                      value={awsAccessKey}\n                      error={validationErrors[\"aws_accessKey\"] || \"\"}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"aws_secretKey\"\n                      name=\"aws_secretKey\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"awsSecretKey\", e.target.value);\n                        cleanValidation(\"aws_secretKey\");\n                      }}\n                      label=\"Secret Key\"\n                      value={awsSecretKey}\n                      error={validationErrors[\"aws_secretKey\"] || \"\"}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"aws_token\"\n                      name=\"aws_token\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"awsToken\", e.target.value);\n                      }}\n                      label=\"Token\"\n                      value={awsToken}\n                    />\n                  </Grid>\n                </fieldset>\n              </Grid>\n            </Fragment>\n          )}\n          {encryptionType === \"gemalto\" && (\n            <Fragment>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"gemalto_endpoint\"\n                  name=\"gemalto_endpoint\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"gemaltoEndpoint\", e.target.value);\n                    cleanValidation(\"gemalto_endpoint\");\n                  }}\n                  label=\"Endpoint\"\n                  value={gemaltoEndpoint}\n                  error={validationErrors[\"gemalto_endpoint\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid\n                item\n                xs={12}\n                style={{\n                  marginBottom: 15,\n                }}\n              >\n                <fieldset className={classes.fieldGroup}>\n                  <legend className={classes.descriptionText}>\n                    Credentials\n                  </legend>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"gemalto_token\"\n                      name=\"gemalto_token\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"gemaltoToken\", e.target.value);\n                        cleanValidation(\"gemalto_token\");\n                      }}\n                      label=\"Token\"\n                      value={gemaltoToken}\n                      error={validationErrors[\"gemalto_token\"] || \"\"}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      id=\"gemalto_domain\"\n                      name=\"gemalto_domain\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"gemaltoDomain\", e.target.value);\n                        cleanValidation(\"gemalto_domain\");\n                      }}\n                      label=\"Domain\"\n                      value={gemaltoDomain}\n                      error={validationErrors[\"gemalto_domain\"] || \"\"}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.formFieldRow}>\n                    <InputBoxWrapper\n                      type=\"number\"\n                      min=\"0\"\n                      id=\"gemalto_retry\"\n                      name=\"gemalto_retry\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"gemaltoRetry\", e.target.value);\n                        cleanValidation(\"gemalto_retry\");\n                      }}\n                      label=\"Retry (seconds)\"\n                      value={gemaltoRetry}\n                      error={validationErrors[\"gemalto_retry\"] || \"\"}\n                    />\n                  </Grid>\n                </fieldset>\n              </Grid>\n              <Grid\n                item\n                xs={12}\n                style={{\n                  marginBottom: 15,\n                }}\n              >\n                <fieldset className={classes.fieldGroup}>\n                  <legend className={classes.descriptionText}>\n                    Custom CA Root certificate verification\n                  </legend>\n\n                  <FileSelector\n                    onChange={(encodedValue, fileName) => {\n                      addFileGemaltoCa(fileName, encodedValue);\n                      cleanValidation(\"gemalto_ca\");\n                    }}\n                    accept=\".cer,.crt,.cert,.pem\"\n                    id=\"gemalto_ca\"\n                    name=\"gemalto_ca\"\n                    label=\"CA\"\n                    value={gemaltoCA.cert}\n                  />\n                </fieldset>\n              </Grid>\n            </Fragment>\n          )}\n          <div className={classes.headerElement}>\n            <h4 className={classes.h3Section}>Additional Configurations</h4>\n          </div>\n          <Grid item xs={12}>\n            <Grid item xs={12} classes={classes.formFieldRow}>\n              <InputBoxWrapper\n                type=\"number\"\n                min=\"1\"\n                id=\"replicas\"\n                name=\"replicas\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  updateField(\"replicas\", e.target.value);\n                  cleanValidation(\"replicas\");\n                }}\n                label=\"Replicas\"\n                value={replicas}\n                required\n                error={validationErrors[\"replicas\"] || \"\"}\n              />\n            </Grid>\n\n            <fieldset className={classes.fieldGroup} style={{ marginTop: 15 }}>\n              <legend className={classes.descriptionText}>\n                SecurityContext for KES pods\n              </legend>\n              <Grid item xs={12} className={classes.kesSecurityContext}>\n                <div\n                  className={`${classes.multiContainer} ${classes.responsiveContainer}`}\n                >\n                  <div\n                    className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                  >\n                    <InputBoxWrapper\n                      type=\"number\"\n                      id=\"kes_securityContext_runAsUser\"\n                      name=\"kes_securityContext_runAsUser\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"kesSecurityContext\", {\n                          ...kesSecurityContext,\n                          runAsUser: e.target.value,\n                        });\n                        cleanValidation(\"kes_securityContext_runAsUser\");\n                      }}\n                      label=\"Run As User\"\n                      value={kesSecurityContext.runAsUser}\n                      required\n                      error={\n                        validationErrors[\"kes_securityContext_runAsUser\"] || \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </div>\n                  <div\n                    className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                  >\n                    <InputBoxWrapper\n                      type=\"number\"\n                      id=\"kes_securityContext_runAsGroup\"\n                      name=\"kes_securityContext_runAsGroup\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"kesSecurityContext\", {\n                          ...kesSecurityContext,\n                          runAsGroup: e.target.value,\n                        });\n                        cleanValidation(\"kes_securityContext_runAsGroup\");\n                      }}\n                      label=\"Run As Group\"\n                      value={kesSecurityContext.runAsGroup}\n                      required\n                      error={\n                        validationErrors[\"kes_securityContext_runAsGroup\"] || \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </div>\n                  <div\n                    className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                  >\n                    <InputBoxWrapper\n                      type=\"number\"\n                      id=\"kes_securityContext_fsGroup\"\n                      name=\"kes_securityContext_fsGroup\"\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        updateField(\"kesSecurityContext\", {\n                          ...kesSecurityContext,\n                          fsGroup: e.target.value,\n                        });\n                        cleanValidation(\"kes_securityContext_fsGroup\");\n                      }}\n                      label=\"FsGroup\"\n                      value={kesSecurityContext.fsGroup}\n                      required\n                      error={\n                        validationErrors[\"kes_securityContext_fsGroup\"] || \"\"\n                      }\n                      min=\"0\"\n                    />\n                  </div>\n                </div>\n              </Grid>\n              <br />\n              <Grid item xs={12}>\n                <div className={classes.multiContainer}>\n                  <FormSwitchWrapper\n                    value=\"kesSecurityContextRunAsNonRoot\"\n                    id=\"kes_securityContext_runAsNonRoot\"\n                    name=\"kes_securityContext_runAsNonRoot\"\n                    checked={kesSecurityContext.runAsNonRoot}\n                    onChange={(e) => {\n                      const targetD = e.target;\n                      const checked = targetD.checked;\n                      updateField(\"kesSecurityContext\", {\n                        ...kesSecurityContext,\n                        runAsNonRoot: checked,\n                      });\n                    }}\n                    label={\"Do not run as Root\"}\n                  />\n                </div>\n              </Grid>\n            </fieldset>\n          </Grid>\n        </Fragment>\n      )}\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  replicas: state.tenants.createTenant.fields.encryption.replicas,\n  enableEncryption:\n    state.tenants.createTenant.fields.encryption.enableEncryption,\n  encryptionType: state.tenants.createTenant.fields.encryption.encryptionType,\n  gemaltoEndpoint: state.tenants.createTenant.fields.encryption.gemaltoEndpoint,\n  gemaltoToken: state.tenants.createTenant.fields.encryption.gemaltoToken,\n  gemaltoDomain: state.tenants.createTenant.fields.encryption.gemaltoDomain,\n  gemaltoRetry: state.tenants.createTenant.fields.encryption.gemaltoRetry,\n  awsEndpoint: state.tenants.createTenant.fields.encryption.awsEndpoint,\n  awsRegion: state.tenants.createTenant.fields.encryption.awsRegion,\n  awsKMSKey: state.tenants.createTenant.fields.encryption.awsKMSKey,\n  awsAccessKey: state.tenants.createTenant.fields.encryption.awsAccessKey,\n  awsSecretKey: state.tenants.createTenant.fields.encryption.awsSecretKey,\n  awsToken: state.tenants.createTenant.fields.encryption.awsToken,\n  vaultEndpoint: state.tenants.createTenant.fields.encryption.vaultEndpoint,\n  vaultEngine: state.tenants.createTenant.fields.encryption.vaultEngine,\n  vaultNamespace: state.tenants.createTenant.fields.encryption.vaultNamespace,\n  vaultPrefix: state.tenants.createTenant.fields.encryption.vaultPrefix,\n  vaultAppRoleEngine:\n    state.tenants.createTenant.fields.encryption.vaultAppRoleEngine,\n  vaultId: state.tenants.createTenant.fields.encryption.vaultId,\n  vaultSecret: state.tenants.createTenant.fields.encryption.vaultSecret,\n  vaultRetry: state.tenants.createTenant.fields.encryption.vaultRetry,\n  vaultPing: state.tenants.createTenant.fields.encryption.vaultPing,\n  azureEndpoint: state.tenants.createTenant.fields.encryption.azureEndpoint,\n  azureTenantID: state.tenants.createTenant.fields.encryption.azureTenantID,\n  azureClientID: state.tenants.createTenant.fields.encryption.azureClientID,\n  azureClientSecret:\n    state.tenants.createTenant.fields.encryption.azureClientSecret,\n  gcpProjectID: state.tenants.createTenant.fields.encryption.gcpProjectID,\n  gcpEndpoint: state.tenants.createTenant.fields.encryption.gcpEndpoint,\n  gcpClientEmail: state.tenants.createTenant.fields.encryption.gcpClientEmail,\n  gcpClientID: state.tenants.createTenant.fields.encryption.gcpClientID,\n  gcpPrivateKeyID: state.tenants.createTenant.fields.encryption.gcpPrivateKeyID,\n  gcpPrivateKey: state.tenants.createTenant.fields.encryption.gcpPrivateKey,\n  enableCustomCertsForKES:\n    state.tenants.createTenant.fields.encryption.enableCustomCertsForKES,\n  enableAutoCert: state.tenants.createTenant.fields.security.enableAutoCert,\n  enableTLS: state.tenants.createTenant.fields.security.enableTLS,\n  minioCertificates: state.tenants.createTenant.certificates.minioCertificates,\n  serverCertificate: state.tenants.createTenant.certificates.serverCertificate,\n  clientCertificate: state.tenants.createTenant.certificates.clientCertificate,\n  vaultCertificate: state.tenants.createTenant.certificates.vaultCertificate,\n  vaultCA: state.tenants.createTenant.certificates.vaultCA,\n  gemaltoCA: state.tenants.createTenant.certificates.gemaltoCA,\n  enableCustomCerts:\n    state.tenants.createTenant.fields.security.enableCustomCerts,\n  kesSecurityContext:\n    state.tenants.createTenant.fields.encryption.kesSecurityContext,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n  addFileServerCert,\n  addFileClientCert,\n  addFileVaultCert,\n  addFileVaultCa,\n  addFileGemaltoCa,\n});\n\nexport default withStyles(styles)(connector(Encryption));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, IconButton, Paper, SelectChangeEvent } from \"@mui/material\";\nimport { AppState } from \"../../../../../store\";\nimport { isPageValid, setKeyValuePairs, updateAddField } from \"../../actions\";\nimport { setModalErrorSnackMessage } from \"../../../../../actions\";\nimport {\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport { ErrorResponseHandler } from \"../../../../../common/types\";\nimport { LabelKeyPair } from \"../../types\";\nimport RadioGroupSelector from \"../../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport api from \"../../../../../common/api\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport AddIcon from \"../../../../../icons/AddIcon\";\nimport RemoveIcon from \"../../../../../icons/RemoveIcon\";\nimport SelectWrapper from \"../../../Common/FormComponents/SelectWrapper/SelectWrapper\";\n\ninterface IAffinityProps {\n  classes: any;\n  podAffinity: string;\n  nodeSelectorLabels: string;\n  withPodAntiAffinity: boolean;\n  keyValuePairs: LabelKeyPair[];\n  setModalErrorSnackMessage: typeof setModalErrorSnackMessage;\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  setKeyValuePairs: typeof setKeyValuePairs;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    overlayAction: {\n      marginLeft: 10,\n      \"& svg\": {\n        maxWidth: 15,\n        maxHeight: 15,\n      },\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n    affinityConfigField: {\n      display: \"flex\",\n    },\n    affinityFieldLabel: {\n      display: \"flex\",\n      flexFlow: \"column\",\n      flex: 1,\n    },\n    radioField: {\n      display: \"flex\",\n      alignItems: \"flex-start\",\n      marginTop: 10,\n      \"& div:first-child\": {\n        display: \"flex\",\n        flexFlow: \"column\",\n        alignItems: \"baseline\",\n        textAlign: \"left !important\",\n      },\n    },\n    affinityLabelKey: {\n      \"& div:first-child\": {\n        marginBottom: 0,\n      },\n    },\n    affinityLabelValue: {\n      marginLeft: 10,\n      \"& div:first-child\": {\n        marginBottom: 0,\n      },\n    },\n    rowActions: {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    fieldContainer: {\n      marginBottom: 0,\n    },\n    affinityRow: {\n      marginBottom: 10,\n      display: \"flex\",\n    },\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\ninterface OptionPair {\n  label: string;\n  value: string;\n}\n\nconst Affinity = ({\n  classes,\n  podAffinity,\n  nodeSelectorLabels,\n  withPodAntiAffinity,\n  setModalErrorSnackMessage,\n  updateAddField,\n  keyValuePairs,\n  setKeyValuePairs,\n  isPageValid,\n}: IAffinityProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const [loading, setLoading] = useState<boolean>(true);\n  const [keyValueMap, setKeyValueMap] = useState<{ [key: string]: string[] }>(\n    {}\n  );\n  const [keyOptions, setKeyOptions] = useState<OptionPair[]>([]);\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"affinity\", field, value);\n    },\n    [updateAddField]\n  );\n\n  useEffect(() => {\n    if (loading) {\n      api\n        .invoke(\"GET\", `/api/v1/nodes/labels`)\n        .then((res: { [key: string]: string[] }) => {\n          setLoading(false);\n          setKeyValueMap(res);\n          let keys: OptionPair[] = [];\n          for (let k in res) {\n            keys.push({\n              label: k,\n              value: k,\n            });\n          }\n          setKeyOptions(keys);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setLoading(false);\n          setModalErrorSnackMessage(err);\n          setKeyValueMap({});\n        });\n    }\n  }, [setModalErrorSnackMessage, loading]);\n\n  useEffect(() => {\n    if (keyValuePairs) {\n      const vlr = keyValuePairs\n        .filter((kvp) => kvp.key !== \"\")\n        .map((kvp) => `${kvp.key}=${kvp.value}`)\n        .filter((kvs, i, a) => a.indexOf(kvs) === i);\n      const vl = vlr.join(\"&\");\n      updateField(\"nodeSelectorLabels\", vl);\n    }\n  }, [keyValuePairs, updateField]);\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n\n    if (podAffinity === \"nodeSelector\") {\n      let valid = true;\n\n      const splittedLabels = nodeSelectorLabels.split(\"&\");\n\n      if (splittedLabels.length === 1 && splittedLabels[0] === \"\") {\n        valid = false;\n      }\n\n      splittedLabels.forEach((item: string, index: number) => {\n        const splitItem = item.split(\"=\");\n\n        if (splitItem.length !== 2) {\n          valid = false;\n        }\n\n        if (index + 1 !== splittedLabels.length) {\n          if (splitItem[0] === \"\" || splitItem[1] === \"\") {\n            valid = false;\n          }\n        }\n      });\n\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"labels\",\n          required: true,\n          value: nodeSelectorLabels,\n          customValidation: !valid,\n          customValidationMessage:\n            \"You need to add at least one label key-pair\",\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    isPageValid(\"affinity\", Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [isPageValid, podAffinity, nodeSelectorLabels]);\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Pod Placement</h3>\n        <span className={classes.descriptionText}>\n          Configure how pods will be assigned to nodes\n        </span>\n      </div>\n      <Grid item xs={12} className={classes.affinityConfigField}>\n        <Grid item className={classes.affinityFieldLabel}>\n          <div className={classes.label}>Type</div>\n          <div\n            className={`${classes.descriptionText} ${classes.affinityHelpText}`}\n          >\n            MinIO supports multiple configurations for Pod Affinity\n          </div>\n          <Grid item className={classes.radioField}>\n            <RadioGroupSelector\n              currentSelection={podAffinity}\n              id=\"affinity-options\"\n              name=\"affinity-options\"\n              label={\" \"}\n              onChange={(e) => {\n                updateField(\"podAffinity\", e.target.value);\n              }}\n              selectorOptions={[\n                { label: \"None\", value: \"none\" },\n                { label: \"Default (Pod Anti-Affinnity)\", value: \"default\" },\n                { label: \"Node Selector\", value: \"nodeSelector\" },\n              ]}\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n      {podAffinity === \"nodeSelector\" && (\n        <Fragment>\n          <br />\n          <Grid item xs={12}>\n            <FormSwitchWrapper\n              value=\"with_pod_anti_affinity\"\n              id=\"with_pod_anti_affinity\"\n              name=\"with_pod_anti_affinity\"\n              checked={withPodAntiAffinity}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n\n                updateField(\"withPodAntiAffinity\", checked);\n              }}\n              label={\"With Pod Anti-Affinity\"}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <h3>Labels</h3>\n            <span className={classes.error}>{validationErrors[\"labels\"]}</span>\n            <Grid container>\n              {keyValuePairs &&\n                keyValuePairs.map((kvp, i) => {\n                  return (\n                    <Grid\n                      item\n                      xs={12}\n                      className={classes.affinityRow}\n                      key={`affinity-keyVal-${i.toString()}`}\n                    >\n                      <Grid item xs={5} className={classes.affinityLabelKey}>\n                        {keyOptions.length > 0 && (\n                          <SelectWrapper\n                            onChange={(e: SelectChangeEvent<string>) => {\n                              const newKey = e.target.value as string;\n                              const arrCp: LabelKeyPair[] = Object.assign(\n                                [],\n                                keyValuePairs\n                              );\n\n                              arrCp[i].key = e.target.value as string;\n                              arrCp[i].value = keyValueMap[newKey][0];\n                              setKeyValuePairs(arrCp);\n                            }}\n                            id=\"select-access-policy\"\n                            name=\"select-access-policy\"\n                            label={\"\"}\n                            value={kvp.key}\n                            options={keyOptions}\n                          />\n                        )}\n                        {keyOptions.length === 0 && (\n                          <InputBoxWrapper\n                            id={`nodeselector-key-${i.toString()}`}\n                            label={\"\"}\n                            name={`nodeselector-${i.toString()}`}\n                            value={kvp.key}\n                            onChange={(e) => {\n                              const arrCp: LabelKeyPair[] = Object.assign(\n                                [],\n                                keyValuePairs\n                              );\n                              arrCp[i].key = e.target.value;\n                              setKeyValuePairs(arrCp);\n                            }}\n                            index={i}\n                            placeholder={\"Key\"}\n                          />\n                        )}\n                      </Grid>\n                      <Grid item xs={5} className={classes.affinityLabelValue}>\n                        {keyOptions.length > 0 && (\n                          <SelectWrapper\n                            onChange={(e: SelectChangeEvent<string>) => {\n                              const arrCp: LabelKeyPair[] = Object.assign(\n                                [],\n                                keyValuePairs\n                              );\n                              arrCp[i].value = e.target.value as string;\n                              setKeyValuePairs(arrCp);\n                            }}\n                            id=\"select-access-policy\"\n                            name=\"select-access-policy\"\n                            label={\"\"}\n                            value={kvp.value}\n                            options={\n                              keyValueMap[kvp.key]\n                                ? keyValueMap[kvp.key].map((v) => {\n                                    return { label: v, value: v };\n                                  })\n                                : []\n                            }\n                          />\n                        )}\n                        {keyOptions.length === 0 && (\n                          <InputBoxWrapper\n                            id={`nodeselector-value-${i.toString()}`}\n                            label={\"\"}\n                            name={`nodeselector-${i.toString()}`}\n                            value={kvp.value}\n                            onChange={(e) => {\n                              const arrCp: LabelKeyPair[] = Object.assign(\n                                [],\n                                keyValuePairs\n                              );\n                              arrCp[i].value = e.target.value;\n                              setKeyValuePairs(arrCp);\n                            }}\n                            index={i}\n                            placeholder={\"value\"}\n                          />\n                        )}\n                      </Grid>\n                      <Grid item xs={2} className={classes.rowActions}>\n                        <div className={classes.overlayAction}>\n                          <IconButton\n                            size={\"small\"}\n                            onClick={() => {\n                              const arrCp = Object.assign([], keyValuePairs);\n                              if (keyOptions.length > 0) {\n                                arrCp.push({\n                                  key: keyOptions[0].value,\n                                  value: keyValueMap[keyOptions[0].value][0],\n                                });\n                              } else {\n                                arrCp.push({ key: \"\", value: \"\" });\n                              }\n\n                              setKeyValuePairs(arrCp);\n                            }}\n                          >\n                            <AddIcon />\n                          </IconButton>\n                        </div>\n                        {keyValuePairs.length > 1 && (\n                          <div className={classes.overlayAction}>\n                            <IconButton\n                              size={\"small\"}\n                              onClick={() => {\n                                const arrCp = keyValuePairs.filter(\n                                  (item, index) => index !== i\n                                );\n                                setKeyValuePairs(arrCp);\n                              }}\n                            >\n                              <RemoveIcon />\n                            </IconButton>\n                          </div>\n                        )}\n                      </Grid>\n                    </Grid>\n                  );\n                })}\n            </Grid>\n          </Grid>\n        </Fragment>\n      )}\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => {\n  const createTenant = state.tenants.createTenant;\n\n  return {\n    podAffinity: createTenant.fields.affinity.podAffinity,\n    nodeSelectorLabels: createTenant.fields.affinity.nodeSelectorLabels,\n    withPodAntiAffinity: createTenant.fields.affinity.withPodAntiAffinity,\n    keyValuePairs: createTenant.nodeSelectorPairs,\n  };\n};\n\nconst connector = connect(mapState, {\n  setModalErrorSnackMessage,\n  updateAddField,\n  isPageValid,\n  setKeyValuePairs,\n});\n\nexport default withStyles(styles)(connector(Affinity));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Grid, Paper } from \"@mui/material\";\nimport {\n  formFieldStyles,\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport { isPageValid, updateAddField } from \"../../actions\";\nimport { AppState } from \"../../../../../store\";\nimport { clearValidationError } from \"../../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../../utils/validationFunctions\";\nimport FormSwitchWrapper from \"../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport InputBoxWrapper from \"../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\n\ninterface IImagesProps {\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  storageClasses: any;\n  classes: any;\n  customImage: boolean;\n  imageName: string;\n  customDockerhub: boolean;\n  imageRegistry: string;\n  imageRegistryUsername: string;\n  imageRegistryPassword: string;\n  exposeMinIO: boolean;\n  exposeConsole: boolean;\n  prometheusCustom: boolean;\n  tenantCustom: boolean;\n  logSearchCustom: boolean;\n  logSearchVolumeSize: string;\n  logSearchSizeFactor: string;\n  prometheusVolumeSize: string;\n  prometheusSizeFactor: string;\n  logSearchSelectedStorageClass: string;\n  logSearchImage: string;\n  kesImage: string;\n  logSearchPostgresImage: string;\n  logSearchPostgresInitImage: string;\n  prometheusSelectedStorageClass: string;\n  prometheusImage: string;\n  prometheusSidecarImage: string;\n  prometheusInitImage: string;\n  selectedStorageClass: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst Images = ({\n  classes,\n  storageClasses,\n  customImage,\n  imageName,\n  customDockerhub,\n  imageRegistry,\n  imageRegistryUsername,\n  imageRegistryPassword,\n  exposeMinIO,\n  exposeConsole,\n  prometheusCustom,\n  tenantCustom,\n  logSearchCustom,\n  logSearchVolumeSize,\n  logSearchSizeFactor,\n  logSearchImage,\n  kesImage,\n  logSearchPostgresImage,\n  logSearchPostgresInitImage,\n  prometheusVolumeSize,\n  prometheusSizeFactor,\n  logSearchSelectedStorageClass,\n  prometheusSelectedStorageClass,\n  prometheusImage,\n  prometheusSidecarImage,\n  prometheusInitImage,\n  updateAddField,\n  isPageValid,\n  selectedStorageClass,\n}: IImagesProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"configure\", field, value);\n    },\n    [updateAddField]\n  );\n\n  // Validation\n  useEffect(() => {\n    let customAccountValidation: IValidation[] = [];\n\n    if (prometheusCustom) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"prometheus_storage_class\",\n          required: true,\n          value: prometheusSelectedStorageClass,\n          customValidation: prometheusSelectedStorageClass === \"\",\n          customValidationMessage: \"Field cannot be empty\",\n        },\n        {\n          fieldKey: \"prometheus_volume_size\",\n          required: true,\n          value: prometheusVolumeSize,\n          customValidation:\n            prometheusVolumeSize === \"\" || parseInt(prometheusVolumeSize) <= 0,\n          customValidationMessage: `Volume size must be present and be greatter than 0`,\n        },\n      ];\n    }\n    if (logSearchCustom) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"log_search_storage_class\",\n          required: true,\n          value: logSearchSelectedStorageClass,\n          customValidation: logSearchSelectedStorageClass === \"\",\n          customValidationMessage: \"Field cannot be empty\",\n        },\n        {\n          fieldKey: \"log_search_volume_size\",\n          required: true,\n          value: logSearchVolumeSize,\n          customValidation:\n            logSearchVolumeSize === \"\" || parseInt(logSearchVolumeSize) <= 0,\n          customValidationMessage: `Volume size must be present and be greatter than 0`,\n        },\n      ];\n    }\n\n    if (customImage) {\n      customAccountValidation = [\n        ...customAccountValidation,\n        {\n          fieldKey: \"image\",\n          required: false,\n          value: imageName,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage: \"Format must be of form: 'minio/minio:VERSION'\",\n        },\n        {\n          fieldKey: \"logSearchImage\",\n          required: false,\n          value: logSearchImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'minio/logsearchapi:VERSION'\",\n        },\n        {\n          fieldKey: \"kesImage\",\n          required: false,\n          value: kesImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage: \"Format must be of form: 'minio/kes:VERSION'\",\n        },\n        {\n          fieldKey: \"logSearchPostgresImage\",\n          required: false,\n          value: logSearchPostgresImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'library/postgres:VERSION'\",\n        },\n        {\n          fieldKey: \"logSearchPostgresInitImage\",\n          required: false,\n          value: logSearchPostgresInitImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'library/busybox:VERSION'\",\n        },\n        {\n          fieldKey: \"prometheusImage\",\n          required: false,\n          value: prometheusImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'minio/prometheus:VERSION'\",\n        },\n        {\n          fieldKey: \"prometheusSidecarImage\",\n          required: false,\n          value: prometheusSidecarImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'project/container:VERSION'\",\n        },\n        {\n          fieldKey: \"prometheusInitImage\",\n          required: false,\n          value: prometheusInitImage,\n          pattern: /^((.*?)\\/(.*?):(.+))$/,\n          customPatternMessage:\n            \"Format must be of form: 'library/busybox:VERSION'\",\n        },\n      ];\n      if (customDockerhub) {\n        customAccountValidation = [\n          ...customAccountValidation,\n          {\n            fieldKey: \"registry\",\n            required: true,\n            value: imageRegistry,\n          },\n          {\n            fieldKey: \"registryUsername\",\n            required: true,\n            value: imageRegistryUsername,\n          },\n          {\n            fieldKey: \"registryPassword\",\n            required: true,\n            value: imageRegistryPassword,\n          },\n        ];\n      }\n    }\n\n    const commonVal = commonFormValidation(customAccountValidation);\n\n    isPageValid(\"configure\", Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    customImage,\n    imageName,\n    logSearchImage,\n    kesImage,\n    logSearchPostgresImage,\n    logSearchPostgresInitImage,\n    prometheusImage,\n    prometheusSidecarImage,\n    prometheusInitImage,\n    customDockerhub,\n    imageRegistry,\n    imageRegistryUsername,\n    imageRegistryPassword,\n    isPageValid,\n    prometheusCustom,\n    tenantCustom,\n    logSearchCustom,\n    prometheusSelectedStorageClass,\n    prometheusVolumeSize,\n    logSearchSelectedStorageClass,\n    logSearchVolumeSize,\n  ]);\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  return (\n    <Paper className={classes.paperWrapper}>\n      <div className={classes.headerElement}>\n        <h3 className={classes.h3Section}>Container Images</h3>\n        <span className={classes.descriptionText}>\n          Images used by the Tenant Deployment\n        </span>\n      </div>\n\n      <Fragment>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"image\"\n            name=\"image\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"imageName\", e.target.value);\n              cleanValidation(\"image\");\n            }}\n            label=\"MinIO's Image\"\n            value={imageName}\n            error={validationErrors[\"image\"] || \"\"}\n            placeholder=\"E.g. minio/minio:RELEASE.2022-01-08T03-11-54Z\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"logSearchImage\"\n            name=\"logSearchImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"logSearchImage\", e.target.value);\n              cleanValidation(\"logSearchImage\");\n            }}\n            label=\"Log Search API's Image\"\n            value={logSearchImage}\n            error={validationErrors[\"logSearchImage\"] || \"\"}\n            placeholder=\"E.g. minio/logsearchapi:v4.1.1\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"kesImage\"\n            name=\"kesImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"kesImage\", e.target.value);\n              cleanValidation(\"kesImage\");\n            }}\n            label=\"KES Image\"\n            value={kesImage}\n            error={validationErrors[\"kesImage\"] || \"\"}\n            placeholder=\"E.g. minio/kes:v0.14.0\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"logSearchPostgresImage\"\n            name=\"logSearchPostgresImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"logSearchPostgresImage\", e.target.value);\n              cleanValidation(\"logSearchPostgresImage\");\n            }}\n            label=\"Log Search Postgres's Image\"\n            value={logSearchPostgresImage}\n            error={validationErrors[\"logSearchPostgresImage\"] || \"\"}\n            placeholder=\"E.g. library/postgres:13\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"logSearchPostgresInitImage\"\n            name=\"logSearchPostgresInitImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"logSearchPostgresInitImage\", e.target.value);\n              cleanValidation(\"logSearchPostgresInitImage\");\n            }}\n            label=\"Log Search Postgres's Init Image\"\n            value={logSearchPostgresInitImage}\n            error={validationErrors[\"logSearchPostgresInitImage\"] || \"\"}\n            placeholder=\"E.g. library/busybox:1.33.1\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"prometheusImage\"\n            name=\"prometheusImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"prometheusImage\", e.target.value);\n              cleanValidation(\"prometheusImage\");\n            }}\n            label=\"Prometheus Image\"\n            value={prometheusImage}\n            error={validationErrors[\"prometheusImage\"] || \"\"}\n            placeholder=\"E.g. quay.io/prometheus/prometheus:latest\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"prometheusSidecarImage\"\n            name=\"prometheusSidecarImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"prometheusSidecarImage\", e.target.value);\n              cleanValidation(\"prometheusSidecarImage\");\n            }}\n            label=\"Prometheus Sidecar Image\"\n            value={prometheusSidecarImage}\n            error={validationErrors[\"prometheusSidecarImage\"] || \"\"}\n            placeholder=\"E.g. quay.io/prometheus/prometheus:latest\"\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            id=\"prometheusInitImage\"\n            name=\"prometheusInitImage\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              updateField(\"prometheusInitImage\", e.target.value);\n              cleanValidation(\"prometheusInitImage\");\n            }}\n            label=\"Prometheus Init Image\"\n            value={prometheusInitImage}\n            error={validationErrors[\"prometheusInitImage\"] || \"\"}\n            placeholder=\"E.g. quay.io/prometheus/prometheus:latest\"\n          />\n        </Grid>\n      </Fragment>\n\n      {customImage && (\n        <Fragment>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <FormSwitchWrapper\n              value=\"custom_docker_hub\"\n              id=\"custom_docker_hub\"\n              name=\"custom_docker_hub\"\n              checked={customDockerhub}\n              onChange={(e) => {\n                const targetD = e.target;\n                const checked = targetD.checked;\n\n                updateField(\"customDockerhub\", checked);\n              }}\n              label={\"Set/Update Image Registry\"}\n            />\n          </Grid>\n        </Fragment>\n      )}\n      {customDockerhub && (\n        <Fragment>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"registry\"\n              name=\"registry\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"imageRegistry\", e.target.value);\n              }}\n              label=\"Endpoint\"\n              value={imageRegistry}\n              error={validationErrors[\"registry\"] || \"\"}\n              placeholder=\"E.g. https://index.docker.io/v1/\"\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"registryUsername\"\n              name=\"registryUsername\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"imageRegistryUsername\", e.target.value);\n              }}\n              label=\"Username\"\n              value={imageRegistryUsername}\n              error={validationErrors[\"registryUsername\"] || \"\"}\n              required\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"registryPassword\"\n              name=\"registryPassword\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateField(\"imageRegistryPassword\", e.target.value);\n              }}\n              label=\"Password\"\n              value={imageRegistryPassword}\n              error={validationErrors[\"registryPassword\"] || \"\"}\n              required\n            />\n          </Grid>\n        </Fragment>\n      )}\n    </Paper>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  storageClasses: state.tenants.createTenant.storageClasses,\n  customImage: state.tenants.createTenant.fields.configure.customImage,\n  imageName: state.tenants.createTenant.fields.configure.imageName,\n  customDockerhub: state.tenants.createTenant.fields.configure.customDockerhub,\n  imageRegistry: state.tenants.createTenant.fields.configure.imageRegistry,\n  imageRegistryUsername:\n    state.tenants.createTenant.fields.configure.imageRegistryUsername,\n  imageRegistryPassword:\n    state.tenants.createTenant.fields.configure.imageRegistryPassword,\n  exposeMinIO: state.tenants.createTenant.fields.configure.exposeMinIO,\n  exposeConsole: state.tenants.createTenant.fields.configure.exposeConsole,\n  prometheusCustom:\n    state.tenants.createTenant.fields.configure.prometheusCustom,\n  tenantCustom: state.tenants.createTenant.fields.configure.tenantCustom,\n  logSearchCustom: state.tenants.createTenant.fields.configure.logSearchCustom,\n  logSearchVolumeSize:\n    state.tenants.createTenant.fields.configure.logSearchVolumeSize,\n  logSearchSizeFactor:\n    state.tenants.createTenant.fields.configure.logSearchSizeFactor,\n  prometheusVolumeSize:\n    state.tenants.createTenant.fields.configure.prometheusVolumeSize,\n  prometheusSizeFactor:\n    state.tenants.createTenant.fields.configure.prometheusSizeFactor,\n  logSearchSelectedStorageClass:\n    state.tenants.createTenant.fields.configure.logSearchSelectedStorageClass,\n  logSearchImage: state.tenants.createTenant.fields.configure.logSearchImage,\n  kesImage: state.tenants.createTenant.fields.configure.kesImage,\n  logSearchPostgresImage:\n    state.tenants.createTenant.fields.configure.logSearchPostgresImage,\n  logSearchPostgresInitImage:\n    state.tenants.createTenant.fields.configure.logSearchPostgresInitImage,\n  prometheusSelectedStorageClass:\n    state.tenants.createTenant.fields.configure.prometheusSelectedStorageClass,\n  prometheusImage: state.tenants.createTenant.fields.configure.prometheusImage,\n  prometheusSidecarImage:\n    state.tenants.createTenant.fields.configure.prometheusSidecarImage,\n  prometheusInitImage:\n    state.tenants.createTenant.fields.configure.prometheusInitImage,\n  selectedStorageClass:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageClass,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n});\n\nexport default withStyles(styles)(connector(Images));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { DialogContentText, LinearProgress } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  deleteDialogStyles,\n  modalBasic,\n} from \"../../../../Common/FormComponents/common/styleLibrary\";\nimport { setErrorSnackMessage } from \"../../../../../../actions\";\nimport { ErrorResponseHandler } from \"../../../../../../common/types\";\nimport api from \"../../../../../../common/api\";\nimport ConfirmDialog from \"../../../../Common/ModalWrapper/ConfirmDialog\";\nimport { ConfirmModalIcon } from \"../../../../../../icons\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    wrapText: {\n      maxWidth: \"200px\",\n      whiteSpace: \"normal\",\n      wordWrap: \"break-word\",\n    },\n    ...modalBasic,\n    ...deleteDialogStyles,\n  });\n\ninterface IAddNamespace {\n  classes: any;\n  namespace: string;\n  addNamespaceOpen: boolean;\n  closeAddNamespaceModalAndRefresh: (reloadNamespaceData: boolean) => void;\n  setErrorSnackMessage: typeof setErrorSnackMessage;\n}\n\nconst AddNamespaceModal = ({\n  classes,\n  namespace,\n  addNamespaceOpen,\n  closeAddNamespaceModalAndRefresh,\n  setErrorSnackMessage,\n}: IAddNamespace) => {\n  const [addNamespaceLoading, setAddNamespaceLoading] =\n    useState<boolean>(false);\n\n  useEffect(() => {\n    if (addNamespaceLoading) {\n      api\n        .invoke(\"POST\", \"/api/v1/namespace\", {\n          name: namespace,\n        })\n        .then((res) => {\n          setAddNamespaceLoading(false);\n          closeAddNamespaceModalAndRefresh(true);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setAddNamespaceLoading(false);\n          setErrorSnackMessage(err);\n        });\n    }\n  }, [\n    addNamespaceLoading,\n    closeAddNamespaceModalAndRefresh,\n    namespace,\n    setErrorSnackMessage,\n  ]);\n\n  const addNamespace = () => {\n    setAddNamespaceLoading(true);\n  };\n\n  return (\n    <ConfirmDialog\n      title={`New namespace`}\n      confirmText={\"Create\"}\n      confirmButtonProps={{\n        color: \"primary\",\n        variant: \"contained\",\n      }}\n      isOpen={addNamespaceOpen}\n      titleIcon={<ConfirmModalIcon />}\n      isLoading={addNamespaceLoading}\n      onConfirm={addNamespace}\n      onClose={() => {\n        closeAddNamespaceModalAndRefresh(false);\n      }}\n      confirmationContent={\n        <React.Fragment>\n          {addNamespaceLoading && <LinearProgress />}\n          <DialogContentText>\n            Are you sure you want to add a namespace called\n            <br />\n            <b className={classes.wrapText}>{namespace}</b>?\n          </DialogContentText>\n        </React.Fragment>\n      }\n    />\n  );\n};\n\nconst mapDispatchToProps = {\n  setErrorSnackMessage,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport default withStyles(styles)(connector(AddNamespaceModal));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { AppState } from \"../../../../../store\";\nimport { isPageValid, updateAddField } from \"../../actions\";\nimport {\n  modalBasic,\n  wizardCommon,\n} from \"../../../Common/FormComponents/common/styleLibrary\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { niceBytes } from \"../../../../../common/utils\";\nimport { Opts } from \"../../ListTenants/utils\";\nimport { IResourcesSize } from \"../../ListTenants/types\";\nimport { IErasureCodeCalc } from \"../../../../../common/types\";\n\nimport { Divider } from \"@mui/material\";\nimport { IntegrationConfiguration } from \"./TenantResources/utils\";\n\ninterface ISizePreviewProps {\n  classes: any;\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  volumeSize: string;\n  sizeFactor: string;\n  drivesPerServer: string;\n  nodes: string;\n  memoryNode: string;\n  ecParity: string;\n  ecParityChoices: Opts[];\n  cleanECChoices: string[];\n  resourcesSize: IResourcesSize;\n  distribution: any;\n  ecParityCalc: IErasureCodeCalc;\n  limitSize: any;\n  selectedStorageClass: string;\n  cpuToUse: string;\n  integrationSelection: IntegrationConfiguration;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 4,\n    },\n    table: {\n      \"& .MuiTableCell-root\": {\n        fontSize: 13,\n      },\n    },\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst SizePreview = ({\n  classes,\n  nodes,\n  memoryNode,\n  ecParity,\n  distribution,\n  ecParityCalc,\n  cpuToUse,\n  integrationSelection,\n}: ISizePreviewProps) => {\n  const usableInformation = ecParityCalc.storageFactors.find(\n    (element) => element.erasureCode === ecParity\n  );\n\n  return (\n    <div className={classes.root}>\n      <h4>Resource Allocation</h4>\n      <Divider />\n      <Table className={classes.table} aria-label=\"simple table\" size={\"small\"}>\n        <TableBody>\n          <TableRow>\n            <TableCell scope=\"row\">Number of Servers</TableCell>\n            <TableCell align=\"right\">\n              {parseInt(nodes) > 0 ? nodes : \"-\"}\n            </TableCell>\n          </TableRow>\n          {integrationSelection.typeSelection === \"\" &&\n            integrationSelection.storageClass === \"\" && (\n              <Fragment>\n                <TableRow>\n                  <TableCell scope=\"row\">Drives per Server</TableCell>\n                  <TableCell align=\"right\">\n                    {distribution ? distribution.disks : \"-\"}\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell scope=\"row\">Drive Capacity</TableCell>\n                  <TableCell align=\"right\">\n                    {distribution ? niceBytes(distribution.pvSize) : \"-\"}\n                  </TableCell>\n                </TableRow>\n              </Fragment>\n            )}\n\n          <TableRow>\n            <TableCell scope=\"row\">Total Volumes</TableCell>\n            <TableCell align=\"right\">\n              {distribution ? distribution.persistentVolumes : \"-\"}\n            </TableCell>\n          </TableRow>\n          {integrationSelection.typeSelection === \"\" &&\n            integrationSelection.storageClass === \"\" && (\n              <Fragment>\n                <TableRow>\n                  <TableCell scope=\"row\">Memory per Node</TableCell>\n                  <TableCell align=\"right\">{memoryNode} Gi</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell style={{ borderBottom: 0 }} scope=\"row\">\n                    CPU Selection\n                  </TableCell>\n                  <TableCell style={{ borderBottom: 0 }} align=\"right\">\n                    {cpuToUse}\n                  </TableCell>\n                </TableRow>\n              </Fragment>\n            )}\n        </TableBody>\n      </Table>\n      {ecParityCalc.error === 0 && usableInformation && (\n        <Fragment>\n          <h4>Erasure Code Configuration</h4>\n          <Divider />\n          <Table\n            className={classes.table}\n            aria-label=\"simple table\"\n            size={\"small\"}\n          >\n            <TableBody>\n              <TableRow>\n                <TableCell scope=\"row\">EC Parity</TableCell>\n                <TableCell align=\"right\">\n                  {ecParity !== \"\" ? ecParity : \"-\"}\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell scope=\"row\">Raw Capacity</TableCell>\n                <TableCell align=\"right\">\n                  {niceBytes(ecParityCalc.rawCapacity)}\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell scope=\"row\">Usable Capacity</TableCell>\n                <TableCell align=\"right\">\n                  {niceBytes(usableInformation.maxCapacity)}\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell style={{ borderBottom: 0 }} scope=\"row\">\n                  Server Failures Tolerated\n                </TableCell>\n                <TableCell style={{ borderBottom: 0 }} align=\"right\">\n                  {distribution\n                    ? Math.floor(\n                        usableInformation.maxFailureTolerations /\n                          distribution.disks\n                      )\n                    : \"-\"}\n                </TableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n        </Fragment>\n      )}\n      {integrationSelection.typeSelection !== \"\" &&\n        integrationSelection.storageClass !== \"\" && (\n          <Fragment>\n            <h4>Single Instance Configuration</h4>\n            <Divider />\n            <Table\n              className={classes.table}\n              aria-label=\"simple table\"\n              size={\"small\"}\n            >\n              <TableBody>\n                <TableRow>\n                  <TableCell scope=\"row\">CPU</TableCell>\n                  <TableCell align=\"right\">\n                    {integrationSelection.CPU !== 0\n                      ? integrationSelection.CPU\n                      : \"-\"}\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell scope=\"row\">Memory</TableCell>\n                  <TableCell align=\"right\">\n                    {integrationSelection.memory !== 0\n                      ? `${integrationSelection.memory} Gi`\n                      : \"-\"}\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell scope=\"row\">Drives per Server</TableCell>\n                  <TableCell align=\"right\">\n                    {integrationSelection.drivesPerServer !== 0\n                      ? `${integrationSelection.drivesPerServer}`\n                      : \"-\"}\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell style={{ borderBottom: 0 }} scope=\"row\">\n                    Drive Size\n                  </TableCell>\n                  <TableCell style={{ borderBottom: 0 }} align=\"right\">\n                    {integrationSelection.driveSize.driveSize}\n                    {integrationSelection.driveSize.sizeUnit}\n                  </TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </Fragment>\n        )}\n    </div>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  volumeSize: state.tenants.createTenant.fields.tenantSize.volumeSize,\n  sizeFactor: state.tenants.createTenant.fields.tenantSize.sizeFactor,\n  drivesPerServer: state.tenants.createTenant.fields.tenantSize.drivesPerServer,\n  nodes: state.tenants.createTenant.fields.tenantSize.nodes,\n  memoryNode:\n    state.tenants.createTenant.fields.tenantSize.resourcesMemoryRequest,\n  ecParity: state.tenants.createTenant.fields.tenantSize.ecParity,\n  ecParityChoices: state.tenants.createTenant.fields.tenantSize.ecParityChoices,\n  cleanECChoices: state.tenants.createTenant.fields.tenantSize.cleanECChoices,\n  resourcesSize: state.tenants.createTenant.fields.tenantSize.resourcesSize,\n  distribution: state.tenants.createTenant.fields.tenantSize.distribution,\n  ecParityCalc: state.tenants.createTenant.fields.tenantSize.ecParityCalc,\n  limitSize: state.tenants.createTenant.fields.tenantSize.limitSize,\n  selectedStorageClass:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageClass,\n  cpuToUse: state.tenants.createTenant.fields.tenantSize.resourcesCPURequest,\n  integrationSelection:\n    state.tenants.createTenant.fields.tenantSize.integrationSelection,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n});\n\nexport default withStyles(styles)(connector(SizePreview));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport get from \"lodash/get\";\nimport { AppState } from \"../../../../../../store\";\nimport { isPageValid, updateAddField } from \"../../../actions\";\nimport {\n  formFieldStyles,\n  modalBasic,\n  wizardCommon,\n} from \"../../../../Common/FormComponents/common/styleLibrary\";\nimport Grid from \"@mui/material/Grid\";\nimport { IResourcesSize } from \"../../../ListTenants/types\";\nimport { AllocableResourcesResponse } from \"../../../types\";\nimport api from \"../../../../../../common/api\";\nimport InputBoxWrapper from \"../../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport FormSwitchWrapper from \"../../../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport { floor } from \"lodash\";\n\ninterface ITenantSizeResourcesProps {\n  classes: any;\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  nodes: string;\n  resourcesSize: IResourcesSize;\n  selectedStorageClass: string;\n  maxAllocatableResources: AllocableResourcesResponse;\n  maxCPUsUse: string;\n  maxMemorySize: string;\n\n  resourcesSpecifyLimit: boolean;\n  resourcesCPURequestError: string;\n  resourcesCPURequest: string;\n  resourcesCPULimitError: string;\n  resourcesCPULimit: string;\n  resourcesMemoryRequestError: string;\n  resourcesMemoryRequest: string;\n  resourcesMemoryLimitError: string;\n  resourcesMemoryLimit: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    compositeFieldContainer: {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    compositeAddOn: {\n      marginLeft: 10,\n      \"& div\": {\n        marginBottom: 0,\n      },\n      \"@media (max-width: 900px)\": {\n        \"& div\": {\n          marginTop: 5,\n        },\n      },\n    },\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst TenantSizeResources = ({\n  classes,\n  updateAddField,\n  isPageValid,\n  nodes,\n\n  resourcesSize,\n  selectedStorageClass,\n  maxAllocatableResources,\n  maxCPUsUse,\n  maxMemorySize,\n  resourcesSpecifyLimit,\n  resourcesCPURequestError,\n  resourcesCPURequest,\n  resourcesCPULimitError,\n  resourcesCPULimit,\n  resourcesMemoryRequestError,\n  resourcesMemoryRequest,\n  resourcesMemoryLimitError,\n  resourcesMemoryLimit,\n}: ITenantSizeResourcesProps) => {\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"tenantSize\", field, value);\n    },\n    [updateAddField]\n  );\n\n  /*Debounce functions*/\n\n  useEffect(() => {\n    isPageValid(\n      \"tenantSize\",\n      resourcesMemoryRequestError === \"\" &&\n        resourcesMemoryLimitError === \"\" &&\n        resourcesCPURequestError === \"\" &&\n        resourcesCPULimitError === \"\"\n    );\n  }, [\n    isPageValid,\n    resourcesMemoryRequestError,\n    resourcesMemoryLimitError,\n    resourcesCPURequestError,\n    resourcesCPULimitError,\n  ]);\n\n  /*End debounce functions*/\n\n  /*Calculate Allocation*/\n  useEffect(() => {\n    // Get allocatable Resources\n    api\n      .invoke(\"GET\", `api/v1/cluster/allocatable-resources?num_nodes=${nodes}`)\n      .then((res: AllocableResourcesResponse) => {\n        updateField(\"maxAllocatableResources\", res);\n\n        const maxAllocatableResources = res;\n\n        const memoryExists = get(\n          maxAllocatableResources,\n          \"min_allocatable_mem\",\n          false\n        );\n\n        const cpuExists = get(\n          maxAllocatableResources,\n          \"min_allocatable_cpu\",\n          false\n        );\n\n        if (memoryExists === false || cpuExists === false) {\n          updateField(\"cpuToUse\", 0);\n\n          updateField(\"maxMemorySize\", \"\");\n          updateField(\"maxCPUsUse\", \"\");\n\n          return;\n        }\n\n        const maxMemory = floor(\n          res.mem_priority.max_allocatable_mem / 1024 / 1024 / 1024\n        );\n        // We default to Best CPU Configuration\n        updateField(\"maxMemorySize\", maxMemory.toString());\n        updateField(\n          \"maxCPUsUse\",\n          res.cpu_priority.max_allocatable_cpu.toString()\n        );\n\n        const maxAllocatableCPU = get(\n          maxAllocatableResources,\n          \"cpu_priority.max_allocatable_cpu\",\n          0\n        );\n\n        const baseCpuUse = Math.max(1, floor(maxAllocatableCPU / 2));\n        if (resourcesCPURequest === \"\") {\n          updateField(\"resourcesCPURequest\", baseCpuUse);\n        }\n\n        const baseMemoryUse = Math.max(2, floor(maxMemory / 2));\n        if (resourcesMemoryRequest === \"\") {\n          updateField(\"resourcesMemoryRequest\", baseMemoryUse);\n        }\n      })\n      .catch((err: any) => {\n        updateField(\"maxMemorySize\", 0);\n        updateField(\"resourcesCPURequest\", \"\");\n        updateField(\"resourcesMemoryRequest\", \"\");\n\n        console.error(err);\n      });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [nodes, updateField]);\n\n  /*Calculate Allocation End*/\n\n  return (\n    <Fragment>\n      <Grid item xs={12}>\n        <div className={classes.headerElement}>\n          <h3 className={classes.h3Section}>Resources</h3>\n          <span className={classes.descriptionText}>\n            You may specify the amount of CPU and Memory that MinIO servers\n            should reserve on each node.\n          </span>\n        </div>\n      </Grid>\n      {resourcesSize.error !== \"\" && (\n        <Grid item xs={12}>\n          <div className={classes.error}>{resourcesSize.error}</div>\n        </Grid>\n      )}\n\n      <Grid item xs={12} className={classes.formFieldRow}>\n        <InputBoxWrapper\n          label={\"CPU Request\"}\n          id={\"resourcesCPURequest\"}\n          name={\"resourcesCPURequest\"}\n          onChange={(e) => {\n            let value = parseInt(e.target.value);\n            if (e.target.value === \"\") {\n              updateField(\"resourcesCPURequestError\", \"\");\n            } else if (isNaN(value)) {\n              updateField(\"resourcesCPURequestError\", \"Invalid number\");\n            } else if (value > parseInt(maxCPUsUse)) {\n              updateField(\n                \"resourcesCPURequestError\",\n                `Request exceeds available cores (${maxCPUsUse})`\n              );\n            } else if (e.target.validity.valid) {\n              updateField(\"resourcesCPURequestError\", \"\");\n            } else {\n              updateField(\"resourcesCPURequestError\", \"Invalid configuration\");\n            }\n            updateField(\"resourcesCPURequest\", e.target.value);\n          }}\n          value={resourcesCPURequest}\n          disabled={selectedStorageClass === \"\"}\n          max={maxCPUsUse}\n          error={resourcesCPURequestError}\n          pattern={\"[0-9]*\"}\n        />\n      </Grid>\n\n      <Grid item xs={12} className={classes.formFieldRow}>\n        <InputBoxWrapper\n          id=\"resourcesMemoryRequest\"\n          name=\"resourcesMemoryRequest\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            let value = parseInt(e.target.value);\n            if (e.target.value === \"\") {\n              updateField(\"resourcesMemoryRequestError\", \"\");\n            } else if (isNaN(value)) {\n              updateField(\"resourcesMemoryRequestError\", \"Invalid number\");\n            } else if (value > parseInt(maxMemorySize)) {\n              updateField(\n                \"resourcesMemoryRequestError\",\n                `Request exceeds available memory across ${nodes} nodes (${maxMemorySize}Gi)`\n              );\n            } else if (value < 2) {\n              updateField(\n                \"resourcesMemoryRequestError\",\n                \"At least 2Gi must be requested\"\n              );\n            } else if (e.target.validity.valid) {\n              updateField(\"resourcesMemoryRequestError\", \"\");\n            } else {\n              updateField(\n                \"resourcesMemoryRequestError\",\n                \"Invalid configuration\"\n              );\n            }\n            updateField(\"resourcesMemoryRequest\", e.target.value);\n          }}\n          label=\"Memory Request [Gi]\"\n          value={resourcesMemoryRequest}\n          disabled={selectedStorageClass === \"\"}\n          error={resourcesMemoryRequestError}\n          pattern={\"[0-9]*\"}\n        />\n      </Grid>\n\n      <Grid item xs={12}>\n        <FormSwitchWrapper\n          value=\"resourcesSpecifyLimit\"\n          id=\"resourcesSpecifyLimit\"\n          name=\"resourcesSpecifyLimit\"\n          checked={resourcesSpecifyLimit}\n          onChange={(e) => {\n            const targetD = e.target;\n            const checked = targetD.checked;\n\n            updateField(\"resourcesSpecifyLimit\", checked);\n          }}\n          label={\"Specify Limit\"}\n        />\n      </Grid>\n\n      {resourcesSpecifyLimit && (\n        <Fragment>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              label={\"CPU Limit\"}\n              id={\"resourcesCPULimit\"}\n              name={\"resourcesCPULimit\"}\n              onChange={(e) => {\n                let value = parseInt(e.target.value);\n                if (e.target.value === \"\") {\n                  updateField(\"resourcesCPULimitError\", \"\");\n                } else if (isNaN(value)) {\n                  updateField(\"resourcesCPULimitError\", \"Invalid number\");\n                } else if (e.target.validity.valid) {\n                  updateField(\"resourcesCPULimitError\", \"\");\n                } else {\n                  updateField(\n                    \"resourcesCPULimitError\",\n                    \"Invalid configuration\"\n                  );\n                }\n                updateField(\"resourcesCPULimit\", e.target.value);\n              }}\n              value={resourcesCPULimit}\n              disabled={selectedStorageClass === \"\"}\n              max={maxCPUsUse}\n              error={resourcesCPULimitError}\n              pattern={\"[0-9]*\"}\n            />\n          </Grid>\n\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <InputBoxWrapper\n              id=\"resourcesMemoryLimit\"\n              name=\"resourcesMemoryLimit\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                let value = parseInt(e.target.value);\n                console.log(\"value\", value);\n                if (e.target.value === \"\") {\n                  updateField(\"resourcesMemoryLimitError\", \"\");\n                } else if (isNaN(value)) {\n                  updateField(\"resourcesMemoryLimitError\", \"Invalid number\");\n                } else if (e.target.validity.valid) {\n                  updateField(\"resourcesMemoryLimitError\", \"\");\n                } else {\n                  updateField(\n                    \"resourcesMemoryLimitError\",\n                    \"Invalid configuration\"\n                  );\n                }\n                updateField(\"resourcesMemoryLimit\", e.target.value);\n              }}\n              label=\"Memory Limit [Gi]\"\n              value={resourcesMemoryLimit}\n              disabled={selectedStorageClass === \"\"}\n              error={resourcesMemoryLimitError}\n              pattern={\"[0-9]*\"}\n            />\n          </Grid>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  nodes: state.tenants.createTenant.fields.tenantSize.nodes,\n\n  resourcesSize: state.tenants.createTenant.fields.tenantSize.resourcesSize,\n  selectedStorageClass:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageClass,\n  maxAllocatableResources:\n    state.tenants.createTenant.fields.tenantSize.maxAllocatableResources,\n  maxCPUsUse: state.tenants.createTenant.fields.tenantSize.maxCPUsUse,\n  maxMemorySize: state.tenants.createTenant.fields.tenantSize.maxMemorySize,\n\n  resourcesSpecifyLimit:\n    state.tenants.createTenant.fields.tenantSize.resourcesSpecifyLimit,\n\n  resourcesCPURequestError:\n    state.tenants.createTenant.fields.tenantSize.resourcesCPURequestError,\n  resourcesCPURequest:\n    state.tenants.createTenant.fields.tenantSize.resourcesCPURequest,\n  resourcesCPULimitError:\n    state.tenants.createTenant.fields.tenantSize.resourcesCPULimitError,\n  resourcesCPULimit:\n    state.tenants.createTenant.fields.tenantSize.resourcesCPULimit,\n\n  resourcesMemoryRequestError:\n    state.tenants.createTenant.fields.tenantSize.resourcesMemoryRequestError,\n  resourcesMemoryRequest:\n    state.tenants.createTenant.fields.tenantSize.resourcesMemoryRequest,\n  resourcesMemoryLimitError:\n    state.tenants.createTenant.fields.tenantSize.resourcesMemoryLimitError,\n  resourcesMemoryLimit:\n    state.tenants.createTenant.fields.tenantSize.resourcesMemoryLimit,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n});\n\nexport default withStyles(styles)(connector(TenantSizeResources));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport { SelectChangeEvent } from \"@mui/material\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { AppState } from \"../../../../../../store\";\nimport { isPageValid, updateAddField } from \"../../../actions\";\nimport {\n  formFieldStyles,\n  modalBasic,\n  wizardCommon,\n} from \"../../../../Common/FormComponents/common/styleLibrary\";\nimport Grid from \"@mui/material/Grid\";\nimport {\n  calculateDistribution,\n  erasureCodeCalc,\n  getBytes,\n  k8sfactorForDropdown,\n  niceBytes,\n} from \"../../../../../../common/utils\";\nimport { clearValidationError } from \"../../../utils\";\nimport { ecListTransform, Opts } from \"../../../ListTenants/utils\";\nimport { IResourcesSize } from \"../../../ListTenants/types\";\nimport { ICapacity, IErasureCodeCalc } from \"../../../../../../common/types\";\nimport { commonFormValidation } from \"../../../../../../utils/validationFunctions\";\nimport api from \"../../../../../../common/api\";\nimport InputBoxWrapper from \"../../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport SelectWrapper from \"../../../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport TenantSizeResources from \"./TenantSizeResources\";\n\ninterface ITenantSizeProps {\n  classes: any;\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  volumeSize: string;\n  sizeFactor: string;\n  drivesPerServer: string;\n  nodes: string;\n  memoryNode: string;\n  ecParity: string;\n  ecParityChoices: Opts[];\n  cleanECChoices: string[];\n  resourcesSize: IResourcesSize;\n  distribution: any;\n  ecParityCalc: IErasureCodeCalc;\n  limitSize: any;\n  selectedStorageClass: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    compositeFieldContainer: {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    compositeAddOn: {\n      marginLeft: 10,\n      \"& div\": {\n        marginBottom: 0,\n      },\n      \"@media (max-width: 900px)\": {\n        \"& div\": {\n          marginTop: 5,\n        },\n      },\n    },\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst TenantSize = ({\n  classes,\n  updateAddField,\n  isPageValid,\n  volumeSize,\n  sizeFactor,\n  drivesPerServer,\n  nodes,\n  memoryNode,\n  ecParity,\n  ecParityChoices,\n  cleanECChoices,\n  resourcesSize,\n  distribution,\n  ecParityCalc,\n  limitSize,\n  selectedStorageClass,\n}: ITenantSizeProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const [errorFlag, setErrorFlag] = useState<boolean>(false);\n  const [nodeError, setNodeError] = useState<string>(\"\");\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"tenantSize\", field, value);\n    },\n    [updateAddField]\n  );\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  /*Debounce functions*/\n\n  // Storage Quotas\n\n  useEffect(() => {\n    if (ecParityChoices.length > 0 && distribution.error === \"\") {\n      const ecCodeValidated = erasureCodeCalc(\n        cleanECChoices,\n        distribution.persistentVolumes,\n        distribution.pvSize,\n        distribution.nodes\n      );\n\n      updateField(\"ecParityCalc\", ecCodeValidated);\n      if (!cleanECChoices.includes(ecParity) || ecParity === \"\") {\n        updateField(\"ecParity\", ecCodeValidated.defaultEC);\n      }\n    }\n  }, [\n    ecParity,\n    ecParityChoices.length,\n    distribution,\n    cleanECChoices,\n    updateField,\n  ]);\n  /*End debounce functions*/\n\n  /*Calculate Allocation*/\n  useEffect(() => {\n    //Validate Cluster Size\n    const size = volumeSize;\n    const factor = sizeFactor;\n    const limitSize = getBytes(\"12\", \"Ti\", true);\n\n    const clusterCapacity: ICapacity = {\n      unit: factor,\n      value: size.toString(),\n    };\n\n    const distrCalculate = calculateDistribution(\n      clusterCapacity,\n      parseInt(nodes),\n      parseInt(limitSize),\n      parseInt(drivesPerServer)\n    );\n\n    updateField(\"distribution\", distrCalculate);\n    setErrorFlag(false);\n    setNodeError(\"\");\n  }, [nodes, volumeSize, sizeFactor, updateField, drivesPerServer]);\n\n  /*Calculate Allocation End*/\n\n  /* Validations of pages */\n\n  useEffect(() => {\n    const parsedSize = getBytes(volumeSize, sizeFactor, true);\n\n    const commonValidation = commonFormValidation([\n      {\n        fieldKey: \"nodes\",\n        required: true,\n        value: nodes,\n        customValidation: errorFlag,\n        customValidationMessage: nodeError,\n      },\n      {\n        fieldKey: \"volume_size\",\n        required: true,\n        value: volumeSize,\n        customValidation:\n          parseInt(parsedSize) < 1073741824 ||\n          parseInt(parsedSize) > limitSize[selectedStorageClass],\n        customValidationMessage: `Volume size must be greater than 1Gi and less than ${niceBytes(\n          limitSize[selectedStorageClass],\n          true\n        )}`,\n      },\n      {\n        fieldKey: \"drivesps\",\n        required: true,\n        value: drivesPerServer,\n        customValidation: parseInt(drivesPerServer) < 1,\n        customValidationMessage: \"There must be at least one drive\",\n      },\n    ]);\n\n    isPageValid(\n      \"tenantSize\",\n      !(\"nodes\" in commonValidation) &&\n        !(\"volume_size\" in commonValidation) &&\n        !(\"drivesps\" in commonValidation) &&\n        distribution.error === \"\" &&\n        ecParityCalc.error === 0 &&\n        ecParity !== \"\"\n    );\n\n    setValidationErrors(commonValidation);\n  }, [\n    nodes,\n    volumeSize,\n    sizeFactor,\n    memoryNode,\n    distribution,\n    ecParityCalc,\n    resourcesSize,\n    limitSize,\n    selectedStorageClass,\n    isPageValid,\n    errorFlag,\n    nodeError,\n    drivesPerServer,\n    ecParity,\n  ]);\n\n  useEffect(() => {\n    if (distribution.error === \"\") {\n      // Get EC Value\n      if (nodes.trim() !== \"\" && distribution.disks !== 0) {\n        api\n          .invoke(\"GET\", `api/v1/get-parity/${nodes}/${distribution.disks}`)\n          .then((ecList: string[]) => {\n            updateField(\"ecParityChoices\", ecListTransform(ecList));\n            updateField(\"cleanECChoices\", ecList);\n          })\n          .catch((err: any) => {\n            updateField(\"ecparityChoices\", []);\n            isPageValid(\"tenantSize\", false);\n            updateField(\"ecParity\", \"\");\n          });\n      }\n    }\n  }, [distribution, isPageValid, updateField, nodes]);\n\n  /* End Validation of pages */\n\n  return (\n    <Fragment>\n      <Grid item xs={12}>\n        <div className={classes.headerElement}>\n          <h3 className={classes.h3Section}>Capacity</h3>\n          <span className={classes.descriptionText}>\n            Please select the desired capacity\n          </span>\n        </div>\n      </Grid>\n      {distribution.error !== \"\" && (\n        <Grid item xs={12}>\n          <div className={classes.error}>{distribution.error}</div>\n        </Grid>\n      )}\n      <Grid item xs={12} className={classes.formFieldRow}>\n        <InputBoxWrapper\n          id=\"nodes\"\n          name=\"nodes\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            if (e.target.validity.valid) {\n              updateField(\"nodes\", e.target.value);\n              cleanValidation(\"nodes\");\n            }\n          }}\n          label=\"Number of Servers\"\n          disabled={selectedStorageClass === \"\"}\n          value={nodes}\n          min=\"4\"\n          required\n          error={validationErrors[\"nodes\"] || \"\"}\n          pattern={\"[0-9]*\"}\n        />\n      </Grid>\n      <Grid item xs={12} className={classes.formFieldRow}>\n        <InputBoxWrapper\n          id=\"drivesps\"\n          name=\"drivesps\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            if (e.target.validity.valid) {\n              updateField(\"drivesPerServer\", e.target.value);\n              cleanValidation(\"drivesps\");\n            }\n          }}\n          label=\"Drives per Server\"\n          value={drivesPerServer}\n          disabled={selectedStorageClass === \"\"}\n          min=\"1\"\n          required\n          error={validationErrors[\"drivesps\"] || \"\"}\n          pattern={\"[0-9]*\"}\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <div className={classes.multiContainer}>\n          <div className={classes.formFieldRow}>\n            <div className={classes.compositeFieldContainer}>\n              <InputBoxWrapper\n                type=\"number\"\n                id=\"volume_size\"\n                name=\"volume_size\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  updateField(\"volumeSize\", e.target.value);\n                  cleanValidation(\"volume_size\");\n                }}\n                label=\"Total Size\"\n                value={volumeSize}\n                disabled={selectedStorageClass === \"\"}\n                required\n                error={validationErrors[\"volume_size\"] || \"\"}\n                min=\"0\"\n              />\n              <div className={classes.compositeAddOn}>\n                <SelectWrapper\n                  label={\"\"}\n                  id=\"size_factor\"\n                  name=\"size_factor\"\n                  value={sizeFactor}\n                  disabled={selectedStorageClass === \"\"}\n                  onChange={(e: SelectChangeEvent<string>) => {\n                    updateField(\"sizeFactor\", e.target.value as string);\n                  }}\n                  options={k8sfactorForDropdown()}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </Grid>\n\n      <Grid item xs={12} className={classes.formFieldRow}>\n        <SelectWrapper\n          id=\"ec_parity\"\n          name=\"ec_parity\"\n          onChange={(e: SelectChangeEvent<string>) => {\n            updateField(\"ecParity\", e.target.value as string);\n          }}\n          label=\"Erasure Code Parity\"\n          disabled={selectedStorageClass === \"\"}\n          value={ecParity}\n          options={ecParityChoices}\n        />\n        <span className={classes.descriptionText}>\n          Please select the desired parity. This setting will change the max\n          usable capacity in the cluster\n        </span>\n      </Grid>\n\n      <TenantSizeResources />\n    </Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  volumeSize: state.tenants.createTenant.fields.tenantSize.volumeSize,\n  sizeFactor: state.tenants.createTenant.fields.tenantSize.sizeFactor,\n  drivesPerServer: state.tenants.createTenant.fields.tenantSize.drivesPerServer,\n  nodes: state.tenants.createTenant.fields.tenantSize.nodes,\n  memoryNode: state.tenants.createTenant.fields.tenantSize.memoryNode,\n  ecParity: state.tenants.createTenant.fields.tenantSize.ecParity,\n  ecParityChoices: state.tenants.createTenant.fields.tenantSize.ecParityChoices,\n  cleanECChoices: state.tenants.createTenant.fields.tenantSize.cleanECChoices,\n\n  resourcesSize: state.tenants.createTenant.fields.tenantSize.resourcesSize,\n  distribution: state.tenants.createTenant.fields.tenantSize.distribution,\n  ecParityCalc: state.tenants.createTenant.fields.tenantSize.ecParityCalc,\n  limitSize: state.tenants.createTenant.limitSize,\n  selectedStorageClass:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageClass,\n});\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n});\n\nexport default withStyles(styles)(connector(TenantSize));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport { SelectChangeEvent } from \"@mui/material\";\nimport get from \"lodash/get\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { AppState } from \"../../../../../../store\";\nimport { isPageValid, updateAddField } from \"../../../actions\";\nimport {\n  formFieldStyles,\n  modalBasic,\n  wizardCommon,\n} from \"../../../../Common/FormComponents/common/styleLibrary\";\nimport Grid from \"@mui/material/Grid\";\nimport { erasureCodeCalc, getBytes } from \"../../../../../../common/utils\";\nimport { clearValidationError } from \"../../../utils\";\nimport { ecListTransform, Opts } from \"../../../ListTenants/utils\";\nimport { IResourcesSize } from \"../../../ListTenants/types\";\nimport {\n  IErasureCodeCalc,\n  IStorageDistribution,\n} from \"../../../../../../common/types\";\nimport { commonFormValidation } from \"../../../../../../utils/validationFunctions\";\nimport api from \"../../../../../../common/api\";\nimport InputBoxWrapper from \"../../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport SelectWrapper from \"../../../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport {\n  IMkEnvs,\n  IntegrationConfiguration,\n  mkPanelConfigurations,\n} from \"./utils\";\n\ninterface ITenantSizeAWSProps {\n  classes: any;\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  volumeSize: string;\n  sizeFactor: string;\n  drivesPerServer: string;\n  nodes: string;\n  memoryNode: string;\n  ecParity: string;\n  ecParityChoices: Opts[];\n  cleanECChoices: string[];\n  resourcesSize: IResourcesSize;\n  distribution: any;\n  ecParityCalc: IErasureCodeCalc;\n  limitSize: any;\n  selectedStorageType: string;\n  cpuToUse: string;\n  maxCPUsUse: string;\n  formToRender?: IMkEnvs;\n  integrationSelection: IntegrationConfiguration;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    compositeFieldContainer: {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    compositeAddOn: {\n      marginLeft: 10,\n      \"& div\": {\n        marginBottom: 0,\n      },\n      \"@media (max-width: 900px)\": {\n        \"& div\": {\n          marginTop: 5,\n        },\n      },\n    },\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst TenantSizeMK = ({\n  classes,\n  updateAddField,\n  isPageValid,\n  volumeSize,\n  sizeFactor,\n  drivesPerServer,\n  nodes,\n  memoryNode,\n  ecParity,\n  ecParityChoices,\n  cleanECChoices,\n  resourcesSize,\n  distribution,\n  ecParityCalc,\n  limitSize,\n  cpuToUse,\n  selectedStorageType,\n  maxCPUsUse,\n  formToRender,\n  integrationSelection,\n}: ITenantSizeAWSProps) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: any) => {\n      updateAddField(\"tenantSize\", field, value);\n    },\n    [updateAddField]\n  );\n\n  const updateMainField = useCallback(\n    (field: string, value: string) => {\n      updateAddField(\"nameTenant\", field, value);\n    },\n    [updateAddField]\n  );\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  /*Debounce functions*/\n\n  // Storage Quotas\n  useEffect(() => {\n    if (ecParityChoices.length > 0 && distribution.error === \"\") {\n      const ecCodeValidated = erasureCodeCalc(\n        cleanECChoices,\n        distribution.persistentVolumes,\n        distribution.pvSize,\n        distribution.nodes\n      );\n\n      updateField(\"ecParityCalc\", ecCodeValidated);\n\n      if (!cleanECChoices.includes(ecParity) || ecParity === \"\") {\n        updateField(\"ecParity\", ecCodeValidated.defaultEC);\n      }\n    }\n  }, [ecParity, ecParityChoices, distribution, cleanECChoices, updateField]);\n  /*End debounce functions*/\n\n  /*Set location Storage Types*/\n  useEffect(() => {\n    if (formToRender !== undefined && parseInt(nodes) >= 4) {\n      const setConfigs = mkPanelConfigurations[formToRender];\n      const keyCount = Object.keys(setConfigs).length;\n\n      //Configuration is filled\n      if (keyCount > 0) {\n        const configs: IntegrationConfiguration[] = get(\n          setConfigs,\n          \"configurations\",\n          []\n        );\n\n        const mainSelection = configs.find(\n          (item) => item.typeSelection === selectedStorageType\n        );\n\n        if (mainSelection) {\n          updateField(\"integrationSelection\", mainSelection);\n          updateMainField(\"selectedStorageClass\", mainSelection.storageClass);\n\n          let pvSize = parseInt(\n            getBytes(\n              mainSelection.driveSize.driveSize,\n              mainSelection.driveSize.sizeUnit,\n              true\n            ),\n            10\n          );\n\n          const distrCalculate: IStorageDistribution = {\n            pvSize,\n            nodes: parseInt(nodes),\n            disks: mainSelection.drivesPerServer,\n            persistentVolumes: mainSelection.drivesPerServer * parseInt(nodes),\n            error: \"\",\n          };\n\n          updateField(\"distribution\", distrCalculate);\n          // apply requests, half of the available resources\n          updateField(\n            \"resourcesCPURequest\",\n            Math.max(1, mainSelection.CPU / 2)\n          );\n          updateField(\n            \"resourcesMemoryRequest\",\n            Math.max(2, mainSelection.memory / 2)\n          );\n        }\n      }\n    }\n  }, [nodes, selectedStorageType, formToRender, updateField, updateMainField]);\n\n  /*Calculate Allocation End*/\n\n  /* Validations of pages */\n\n  useEffect(() => {\n    const commonValidation = commonFormValidation([\n      {\n        fieldKey: \"nodes\",\n        required: true,\n        value: nodes,\n        customValidation: parseInt(nodes) < 4,\n        customValidationMessage: \"Al least 4 servers must be selected\",\n      },\n    ]);\n\n    isPageValid(\n      \"tenantSize\",\n      !(\"nodes\" in commonValidation) &&\n        distribution.error === \"\" &&\n        ecParityCalc.error === 0 &&\n        resourcesSize.error === \"\" &&\n        ecParity !== \"\" &&\n        parseInt(nodes) >= 4\n    );\n\n    setValidationErrors(commonValidation);\n  }, [\n    nodes,\n    volumeSize,\n    sizeFactor,\n    memoryNode,\n    distribution,\n    ecParityCalc,\n    resourcesSize,\n    limitSize,\n    selectedStorageType,\n    cpuToUse,\n    maxCPUsUse,\n    isPageValid,\n    drivesPerServer,\n    ecParity,\n  ]);\n\n  useEffect(() => {\n    if (integrationSelection.drivesPerServer !== 0) {\n      // Get EC Value\n      if (nodes.trim() !== \"\") {\n        api\n          .invoke(\n            \"GET\",\n            `api/v1/get-parity/${nodes}/${integrationSelection.drivesPerServer}`\n          )\n          .then((ecList: string[]) => {\n            updateField(\"ecParityChoices\", ecListTransform(ecList));\n            updateField(\"cleanECChoices\", ecList);\n          })\n          .catch((err: any) => {\n            updateField(\"ecparityChoices\", []);\n            isPageValid(\"tenantSize\", false);\n            updateField(\"ecParity\", \"\");\n          });\n      }\n    }\n  }, [integrationSelection, nodes, isPageValid, updateField]);\n\n  /* End Validation of pages */\n\n  return (\n    <Fragment>\n      <Grid item xs={12}>\n        <div className={classes.headerElement}>\n          <h3 className={classes.h3Section}>Tenant Size</h3>\n          <span className={classes.descriptionText}>\n            Please select the desired capacity\n          </span>\n        </div>\n      </Grid>\n      {distribution.error !== \"\" && (\n        <Grid item xs={12}>\n          <div className={classes.error}>{distribution.error}</div>\n        </Grid>\n      )}\n      {resourcesSize.error !== \"\" && (\n        <Grid item xs={12}>\n          <div className={classes.error}>{resourcesSize.error}</div>\n        </Grid>\n      )}\n      <Grid item xs={12} className={classes.formFieldRow}>\n        <InputBoxWrapper\n          id=\"nodes\"\n          name=\"nodes\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            if (e.target.validity.valid) {\n              updateField(\"nodes\", e.target.value);\n              cleanValidation(\"nodes\");\n            }\n          }}\n          label=\"Number of Servers\"\n          disabled={selectedStorageType === \"\"}\n          value={nodes}\n          min=\"4\"\n          required\n          error={validationErrors[\"nodes\"] || \"\"}\n          pattern={\"[0-9]*\"}\n        />\n      </Grid>\n      <Grid item xs={12} className={classes.formFieldRow}>\n        <SelectWrapper\n          id=\"ec_parity\"\n          name=\"ec_parity\"\n          onChange={(e: SelectChangeEvent<string>) => {\n            updateField(\"ecParity\", e.target.value as string);\n          }}\n          label=\"Erasure Code Parity\"\n          disabled={selectedStorageType === \"\"}\n          value={ecParity}\n          options={ecParityChoices}\n        />\n        <span className={classes.descriptionText}>\n          Please select the desired parity. This setting will change the max\n          usable capacity in the cluster\n        </span>\n      </Grid>\n    </Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => () => {\n  const createTenant = state.tenants.createTenant;\n\n  const {\n    memoryNode,\n    ecParityChoices,\n    distribution,\n    cleanECChoices,\n    sizeFactor,\n    ecParity,\n    cpuToUse,\n    integrationSelection,\n    resourcesSize,\n    drivesPerServer,\n    maxCPUsUse,\n    ecParityCalc,\n    volumeSize,\n    nodes,\n  } = createTenant.fields.tenantSize;\n\n  return {\n    volumeSize,\n    sizeFactor,\n    drivesPerServer,\n    nodes,\n    memoryNode,\n    ecParity,\n    ecParityChoices,\n    cleanECChoices,\n    resourcesSize,\n    distribution,\n    ecParityCalc,\n    cpuToUse,\n    maxCPUsUse,\n    integrationSelection,\n    limitSize: createTenant.limitSize,\n    selectedStorageType: createTenant.fields.nameTenant.selectedStorageType,\n  };\n};\n\nconst connector = connect(mapState, {\n  updateAddField,\n  isPageValid,\n});\n\nexport default withStyles(styles)(connector(TenantSizeMK));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, {\n  Fragment,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { connect } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport get from \"lodash/get\";\nimport debounce from \"lodash/debounce\";\nimport Grid from \"@mui/material/Grid\";\nimport {\n  formFieldStyles,\n  modalBasic,\n  wizardCommon,\n} from \"../../../../Common/FormComponents/common/styleLibrary\";\nimport { setModalErrorSnackMessage } from \"../../../../../../actions\";\nimport {\n  isPageValid,\n  setLimitSize,\n  setStorageClassesList,\n  updateAddField,\n} from \"../../../actions\";\nimport {\n  getLimitSizes,\n  IQuotaElement,\n  IQuotas,\n  Opts,\n} from \"../../../ListTenants/utils\";\nimport { AppState } from \"../../../../../../store\";\nimport { commonFormValidation } from \"../../../../../../utils/validationFunctions\";\nimport { clearValidationError } from \"../../../utils\";\nimport { ErrorResponseHandler } from \"../../../../../../common/types\";\nimport api from \"../../../../../../common/api\";\nimport InputBoxWrapper from \"../../../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport SelectWrapper from \"../../../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport AddIcon from \"../../../../../../icons/AddIcon\";\nimport AddNamespaceModal from \"../helpers/AddNamespaceModal\";\nimport SizePreview from \"../SizePreview\";\nimport TenantSize from \"./TenantSize\";\nimport { Paper, SelectChangeEvent } from \"@mui/material\";\nimport { IMkEnvs, mkPanelConfigurations } from \"./utils\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    sizePreview: {\n      position: \"fixed\",\n      marginLeft: 10,\n      background: \"#FFFFFF\",\n      border: \"1px solid #EAEAEA\",\n      padding: 2,\n    },\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\ninterface INameTenantMainScreen {\n  classes: any;\n  storageClasses: Opts[];\n  setModalErrorSnackMessage: typeof setModalErrorSnackMessage;\n  updateAddField: typeof updateAddField;\n  isPageValid: typeof isPageValid;\n  setStorageClassesList: typeof setStorageClassesList;\n  setLimitSize: typeof setLimitSize;\n  tenantName: string;\n  namespace: string;\n  selectedStorageClass: string;\n  selectedStorageType: string;\n  formToRender?: IMkEnvs;\n}\n\nconst NameTenantMain = ({\n  classes,\n  storageClasses,\n  tenantName,\n  namespace,\n  selectedStorageClass,\n  selectedStorageType,\n  formToRender = IMkEnvs.default,\n  updateAddField,\n  setStorageClassesList,\n  setLimitSize,\n  isPageValid,\n  setModalErrorSnackMessage,\n}: INameTenantMainScreen) => {\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const [emptyNamespace, setEmptyNamespace] = useState<boolean>(true);\n  const [loadingNamespaceInfo, setLoadingNamespaceInfo] =\n    useState<boolean>(false);\n  const [showCreateButton, setShowCreateButton] = useState<boolean>(false);\n  const [openAddNSConfirm, setOpenAddNSConfirm] = useState<boolean>(false);\n\n  // Common\n  const updateField = useCallback(\n    (field: string, value: string) => {\n      updateAddField(\"nameTenant\", field, value);\n    },\n    [updateAddField]\n  );\n\n  // Storage classes retrieval\n  const getNamespaceInformation = useCallback(() => {\n    setShowCreateButton(false);\n    // Empty tenantValidation\n    api\n      .invoke(\"GET\", `/api/v1/namespaces/${namespace}/tenants`)\n      .then((res: any[]) => {\n        const tenantsList = get(res, \"tenants\", []);\n\n        if (tenantsList && tenantsList.length > 0) {\n          setEmptyNamespace(false);\n          setLoadingNamespaceInfo(false);\n          return;\n        }\n        setEmptyNamespace(true);\n\n        // Storagequotas retrieval\n        api\n          .invoke(\n            \"GET\",\n            `/api/v1/namespaces/${namespace}/resourcequotas/${namespace}-storagequota`\n          )\n          .then((res: IQuotas) => {\n            const elements: IQuotaElement[] = get(res, \"elements\", []);\n            setLimitSize(getLimitSizes(res));\n\n            const newStorage = elements.map((storageClass: any) => {\n              const name = get(storageClass, \"name\", \"\").split(\n                \".storageclass.storage.k8s.io/requests.storage\"\n              )[0];\n\n              return { label: name, value: name };\n            });\n\n            setStorageClassesList(newStorage);\n\n            const stExists = newStorage.findIndex(\n              (storageClass) => storageClass.value === selectedStorageClass\n            );\n\n            if (newStorage.length > 0 && stExists === -1) {\n              updateField(\"selectedStorageClass\", newStorage[0].value);\n            } else if (newStorage.length === 0) {\n              updateField(\"selectedStorageClass\", \"\");\n              setStorageClassesList([]);\n            }\n            setLoadingNamespaceInfo(false);\n          })\n          .catch((err: ErrorResponseHandler) => {\n            setLoadingNamespaceInfo(false);\n            setShowCreateButton(true);\n            updateField(\"selectedStorageClass\", \"\");\n            setStorageClassesList([]);\n            console.error(\"Namespace error: \", err);\n          });\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setModalErrorSnackMessage({\n          errorMessage: \"Error validating if namespace already has tenants\",\n          detailedError: err.detailedError,\n        });\n      });\n  }, [\n    namespace,\n    setLimitSize,\n    setModalErrorSnackMessage,\n    setStorageClassesList,\n    updateField,\n    selectedStorageClass,\n  ]);\n\n  const debounceNamespace = useMemo(\n    () => debounce(getNamespaceInformation, 500),\n    [getNamespaceInformation]\n  );\n\n  useEffect(() => {\n    if (namespace !== \"\") {\n      debounceNamespace();\n      setLoadingNamespaceInfo(true);\n\n      // Cancel previous debounce calls during useEffect cleanup.\n      return debounceNamespace.cancel;\n    }\n  }, [debounceNamespace, namespace]);\n\n  // Validation\n  useEffect(() => {\n    let customNamespaceError = false;\n    let errorMessage = \"\";\n\n    if (!emptyNamespace && !loadingNamespaceInfo) {\n      customNamespaceError = true;\n      errorMessage = \"You can only create one tenant per namespace\";\n    } else if (\n      storageClasses.length < 1 &&\n      emptyNamespace &&\n      !loadingNamespaceInfo\n    ) {\n      customNamespaceError = true;\n      errorMessage = \"Please enter a valid namespace\";\n    }\n\n    const commonValidation = commonFormValidation([\n      {\n        fieldKey: \"tenant-name\",\n        required: true,\n        pattern: /^[a-z0-9-]{3,63}$/,\n        customPatternMessage:\n          \"Name only can contain lowercase letters, numbers and '-'. Min. Length: 3\",\n        value: tenantName,\n      },\n      {\n        fieldKey: \"namespace\",\n        required: true,\n        value: namespace,\n        customValidation: customNamespaceError,\n        customValidationMessage: errorMessage,\n      },\n    ]);\n\n    const isValid =\n      !(\"tenant-name\" in commonValidation) &&\n      !(\"namespace\" in commonValidation) &&\n      ((formToRender === IMkEnvs.default && storageClasses.length > 0) ||\n        (formToRender !== IMkEnvs.default && selectedStorageType !== \"\"));\n\n    isPageValid(\"nameTenant\", isValid);\n\n    setValidationErrors(commonValidation);\n  }, [\n    storageClasses,\n    namespace,\n    tenantName,\n    isPageValid,\n    emptyNamespace,\n    loadingNamespaceInfo,\n    selectedStorageType,\n    formToRender,\n  ]);\n\n  const frmValidationCleanup = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  const addNamespace = () => {\n    setOpenAddNSConfirm(true);\n  };\n\n  const closeAddNamespace = (refresh: boolean) => {\n    setOpenAddNSConfirm(false);\n\n    if (refresh) {\n      debounceNamespace();\n    }\n  };\n\n  return (\n    <Fragment>\n      {openAddNSConfirm && (\n        <AddNamespaceModal\n          addNamespaceOpen={openAddNSConfirm}\n          closeAddNamespaceModalAndRefresh={closeAddNamespace}\n          namespace={namespace}\n        />\n      )}\n      <Grid container>\n        <Grid item xs={8} md={9}>\n          <Paper className={classes.paperWrapper} sx={{ minHeight: 550 }}>\n            <Grid container>\n              <Grid item xs={12}>\n                <div className={classes.headerElement}>\n                  <h3 className={classes.h3Section}>Name</h3>\n                  <span className={classes.descriptionText}>\n                    How would you like to name this new tenant?\n                  </span>\n                </div>\n                <div className={classes.formFieldRow}>\n                  <InputBoxWrapper\n                    id=\"tenant-name\"\n                    name=\"tenant-name\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      updateField(\"tenantName\", e.target.value);\n                      frmValidationCleanup(\"tenant-name\");\n                    }}\n                    label=\"Name\"\n                    value={tenantName}\n                    required\n                    error={validationErrors[\"tenant-name\"] || \"\"}\n                  />\n                </div>\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"namespace\"\n                  name=\"namespace\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    updateField(\"namespace\", e.target.value);\n                    frmValidationCleanup(\"namespace\");\n                  }}\n                  label=\"Namespace\"\n                  value={namespace}\n                  error={validationErrors[\"namespace\"] || \"\"}\n                  overlayIcon={showCreateButton ? <AddIcon /> : null}\n                  overlayAction={addNamespace}\n                  required\n                />\n              </Grid>\n              {formToRender === IMkEnvs.default ? (\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <SelectWrapper\n                    id=\"storage_class\"\n                    name=\"storage_class\"\n                    onChange={(e: SelectChangeEvent<string>) => {\n                      updateField(\n                        \"selectedStorageClass\",\n                        e.target.value as string\n                      );\n                    }}\n                    label=\"Storage Class\"\n                    value={selectedStorageClass}\n                    options={storageClasses}\n                    disabled={storageClasses.length < 1}\n                  />\n                </Grid>\n              ) : (\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <SelectWrapper\n                    id=\"storage_type\"\n                    name=\"storage_type\"\n                    onChange={(e: SelectChangeEvent<string>) => {\n                      updateField(\n                        \"selectedStorageType\",\n                        e.target.value as string\n                      );\n                    }}\n                    label={get(\n                      mkPanelConfigurations,\n                      `${formToRender}.variantSelectorLabel`,\n                      \"Storage Type\"\n                    )}\n                    value={selectedStorageType}\n                    options={get(\n                      mkPanelConfigurations,\n                      `${formToRender}.variantSelectorValues`,\n                      []\n                    )}\n                  />\n                </Grid>\n              )}\n              {formToRender === IMkEnvs.default ? (\n                <TenantSize />\n              ) : (\n                get(\n                  mkPanelConfigurations,\n                  `${formToRender}.sizingComponent`,\n                  null\n                )\n              )}\n            </Grid>\n          </Paper>\n        </Grid>\n        <Grid item xs={4} md={3}>\n          <div className={classes.sizePreview}>\n            <SizePreview />\n          </div>\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  tenantName: state.tenants.createTenant.fields.nameTenant.tenantName,\n  namespace: state.tenants.createTenant.fields.nameTenant.namespace,\n  selectedStorageClass:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageClass,\n  selectedStorageType:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageType,\n  storageClasses: state.tenants.createTenant.storageClasses,\n});\n\nconst connector = connect(mapState, {\n  setModalErrorSnackMessage,\n  updateAddField,\n  setStorageClassesList,\n  setLimitSize,\n  isPageValid,\n});\n\nexport default withStyles(styles)(connector(NameTenantMain));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport get from \"lodash/get\";\nimport NameTenantMain from \"./NameTenantMain\";\nimport { IMkEnvs, resourcesConfigurations } from \"./utils\";\nimport { AppState } from \"../../../../../../store\";\n\ninterface ITenantResources {\n  features?: string[];\n}\n\nconst TenantResources = ({ features }: ITenantResources) => {\n  const [formRender, setFormRender] = useState<IMkEnvs | null>(null);\n\n  useEffect(() => {\n    let setConfiguration = IMkEnvs.default;\n\n    if (features && features.length !== 0) {\n      const possibleVariables = Object.keys(resourcesConfigurations);\n\n      possibleVariables.forEach((element) => {\n        if (features.includes(element)) {\n          setConfiguration = get(\n            resourcesConfigurations,\n            element,\n            IMkEnvs.default\n          );\n        }\n      });\n    }\n\n    setFormRender(setConfiguration);\n  }, [features]);\n\n  if (formRender === null) {\n    return null;\n  }\n\n  return <NameTenantMain formToRender={formRender} />;\n};\n\nconst mapState = (state: AppState) => ({\n  features: state.console.session.features,\n});\n\nconst connector = connect(mapState, null);\n\nexport default connector(TenantResources);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport get from \"lodash/get\";\nimport { connect } from \"react-redux\";\nimport Grid from \"@mui/material/Grid\";\nimport { LinearProgress } from \"@mui/material\";\n\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  modalBasic,\n  settingsCommon,\n  wizardCommon,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport api from \"../../../../common/api\";\nimport { generatePoolName, getBytes } from \"../../../../common/utils\";\nimport GenericWizard from \"../../Common/GenericWizard/GenericWizard\";\nimport { IWizardElement } from \"../../Common/GenericWizard/types\";\nimport { NewServiceAccount } from \"../../Common/CredentialsPrompt/types\";\nimport { ErrorResponseHandler, ITenantCreator } from \"../../../../common/types\";\nimport { KeyPair } from \"../ListTenants/utils\";\n\nimport { setErrorSnackMessage } from \"../../../../actions\";\nimport { getDefaultAffinity, getNodeSelector } from \"../TenantDetails/utils\";\nimport CredentialsPrompt from \"../../Common/CredentialsPrompt/CredentialsPrompt\";\nimport { AppState } from \"../../../../store\";\nimport { ICertificatesItems, IFieldStore } from \"../types\";\nimport { resetAddTenantForm, updateAddField } from \"../actions\";\nimport Configure from \"./Steps/Configure\";\nimport IdentityProvider from \"./Steps/IdentityProvider\";\nimport Security from \"./Steps/Security\";\nimport Encryption from \"./Steps/Encryption\";\nimport Affinity from \"./Steps/Affinity\";\nimport PageHeader from \"../../Common/PageHeader/PageHeader\";\nimport history from \"../../../../history\";\nimport Images from \"./Steps/Images\";\nimport PageLayout from \"../../Common/Layout/PageLayout\";\nimport BackLink from \"../../../../common/BackLink\";\nimport TenantResources from \"./Steps/TenantResources/TenantResources\";\n\ninterface IAddTenantProps {\n  setErrorSnackMessage: typeof setErrorSnackMessage;\n  resetAddTenantForm: typeof resetAddTenantForm;\n  updateAddField: typeof updateAddField;\n  fields: IFieldStore;\n  certificates: ICertificatesItems;\n  selectedStorageClass: string;\n  namespace: string;\n  validPages: string[];\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    pageBox: {\n      border: \"1px solid #EAEAEA\",\n    },\n    ...modalBasic,\n    ...wizardCommon,\n    ...settingsCommon,\n  });\n\nconst AddTenant = ({\n  classes,\n  fields,\n  certificates,\n  selectedStorageClass,\n  namespace,\n  validPages,\n  setErrorSnackMessage,\n  resetAddTenantForm,\n}: IAddTenantProps) => {\n  // Modals\n  const [showNewCredentials, setShowNewCredentials] = useState<boolean>(false);\n  const [createdAccount, setCreatedAccount] =\n    useState<NewServiceAccount | null>(null);\n\n  // Fields\n  const [addSending, setAddSending] = useState<boolean>(false);\n\n  /* Send Information to backend */\n  useEffect(() => {\n    const tenantName = fields.nameTenant.tenantName;\n    const selectedStorageClass = fields.nameTenant.selectedStorageClass;\n    const imageName = fields.configure.imageName;\n    const customDockerhub = fields.configure.customDockerhub;\n    const imageRegistry = fields.configure.imageRegistry;\n    const imageRegistryUsername = fields.configure.imageRegistryUsername;\n    const imageRegistryPassword = fields.configure.imageRegistryPassword;\n    const exposeMinIO = fields.configure.exposeMinIO;\n    const exposeConsole = fields.configure.exposeConsole;\n    const idpSelection = fields.identityProvider.idpSelection;\n    const openIDConfigurationURL =\n      fields.identityProvider.openIDConfigurationURL;\n    const openIDClientID = fields.identityProvider.openIDClientID;\n    const openIDClaimName = fields.identityProvider.openIDClaimName;\n    const openIDCallbackURL = fields.identityProvider.openIDCallbackURL;\n    const openIDScopes = fields.identityProvider.openIDScopes;\n    const openIDSecretID = fields.identityProvider.openIDSecretID;\n    const ADURL = fields.identityProvider.ADURL;\n    const ADSkipTLS = fields.identityProvider.ADSkipTLS;\n    const ADServerInsecure = fields.identityProvider.ADServerInsecure;\n    const ADUserNameSearchFilter =\n      fields.identityProvider.ADUserNameSearchFilter;\n    const ADGroupSearchBaseDN = fields.identityProvider.ADGroupSearchBaseDN;\n    const ADGroupSearchFilter = fields.identityProvider.ADGroupSearchFilter;\n    const ADGroupNameAttribute = fields.identityProvider.ADGroupNameAttribute;\n    const ADUserDNs = fields.identityProvider.ADUserDNs;\n    const ADUserNameFormat = fields.identityProvider.ADUserNameFormat;\n    const ADLookupBindDN = fields.identityProvider.ADLookupBindDN;\n    const ADLookupBindPassword = fields.identityProvider.ADLookupBindPassword;\n    const ADUserDNSearchBaseDN = fields.identityProvider.ADUserDNSearchBaseDN;\n    const ADUserDNSearchFilter = fields.identityProvider.ADUserDNSearchFilter;\n    const ADServerStartTLS = fields.identityProvider.ADServerStartTLS;\n    const accessKeys = fields.identityProvider.accessKeys;\n    const secretKeys = fields.identityProvider.secretKeys;\n    const minioCertificates = certificates.minioCertificates;\n    const caCertificates = certificates.caCertificates;\n    const consoleCaCertificates = certificates.consoleCaCertificates;\n    const consoleCertificate = certificates.consoleCertificate;\n    const serverCertificate = certificates.serverCertificate;\n    const clientCertificate = certificates.clientCertificate;\n    const vaultCertificate = certificates.vaultCertificate;\n    const vaultCA = certificates.vaultCA;\n    const gemaltoCA = certificates.gemaltoCA;\n    const enableEncryption = fields.encryption.enableEncryption;\n    const encryptionType = fields.encryption.encryptionType;\n    const gemaltoEndpoint = fields.encryption.gemaltoEndpoint;\n    const gemaltoToken = fields.encryption.gemaltoToken;\n    const gemaltoDomain = fields.encryption.gemaltoDomain;\n    const gemaltoRetry = fields.encryption.gemaltoRetry;\n    const awsEndpoint = fields.encryption.awsEndpoint;\n    const awsRegion = fields.encryption.awsRegion;\n    const awsKMSKey = fields.encryption.awsKMSKey;\n    const awsAccessKey = fields.encryption.awsAccessKey;\n    const awsSecretKey = fields.encryption.awsSecretKey;\n    const awsToken = fields.encryption.awsToken;\n    const vaultEndpoint = fields.encryption.vaultEndpoint;\n    const vaultEngine = fields.encryption.vaultEngine;\n    const vaultNamespace = fields.encryption.vaultNamespace;\n    const vaultPrefix = fields.encryption.vaultPrefix;\n    const vaultAppRoleEngine = fields.encryption.vaultAppRoleEngine;\n    const vaultId = fields.encryption.vaultId;\n    const vaultSecret = fields.encryption.vaultSecret;\n    const vaultRetry = fields.encryption.vaultRetry;\n    const vaultPing = fields.encryption.vaultPing;\n    const azureEndpoint = fields.encryption.azureEndpoint;\n    const azureTenantID = fields.encryption.azureTenantID;\n    const azureClientID = fields.encryption.azureClientID;\n    const azureClientSecret = fields.encryption.azureClientSecret;\n    const gcpProjectID = fields.encryption.gcpProjectID;\n    const gcpEndpoint = fields.encryption.gcpEndpoint;\n    const gcpClientEmail = fields.encryption.gcpClientEmail;\n    const gcpClientID = fields.encryption.gcpClientID;\n    const gcpPrivateKeyID = fields.encryption.gcpPrivateKeyID;\n    const gcpPrivateKey = fields.encryption.gcpPrivateKey;\n    const enableAutoCert = fields.security.enableAutoCert;\n    const enableTLS = fields.security.enableTLS;\n    const ecParity = fields.tenantSize.ecParity;\n    const distribution = fields.tenantSize.distribution;\n    const tenantCustom = fields.configure.tenantCustom;\n    const logSearchCustom = fields.configure.logSearchCustom;\n    const prometheusCustom = fields.configure.prometheusCustom;\n    const logSearchVolumeSize = fields.configure.logSearchVolumeSize;\n    const logSearchSelectedStorageClass =\n      fields.configure.logSearchSelectedStorageClass;\n    const logSearchImage = fields.configure.logSearchImage;\n    const kesImage = fields.configure.kesImage;\n    const logSearchPostgresImage = fields.configure.logSearchPostgresImage;\n    const logSearchPostgresInitImage =\n      fields.configure.logSearchPostgresInitImage;\n    const prometheusImage = fields.configure.prometheusImage;\n    const prometheusSidecarImage = fields.configure.prometheusSidecarImage;\n    const prometheusInitImage = fields.configure.prometheusInitImage;\n    const prometheusSelectedStorageClass =\n      fields.configure.prometheusSelectedStorageClass;\n    const prometheusVolumeSize = fields.configure.prometheusVolumeSize;\n    const affinityType = fields.affinity.podAffinity;\n    const nodeSelectorLabels = fields.affinity.nodeSelectorLabels;\n    const withPodAntiAffinity = fields.affinity.withPodAntiAffinity;\n\n    const tenantSecurityContext = fields.configure.tenantSecurityContext;\n    const logSearchSecurityContext = fields.configure.logSearchSecurityContext;\n    const logSearchPostgresSecurityContext =\n      fields.configure.logSearchPostgresSecurityContext;\n    const prometheusSecurityContext =\n      fields.configure.prometheusSecurityContext;\n    const kesSecurityContext = fields.encryption.kesSecurityContext;\n    const kesReplicas = fields.encryption.replicas;\n\n    if (addSending) {\n      const poolName = generatePoolName([]);\n\n      let affinityObject = {};\n\n      switch (affinityType) {\n        case \"default\":\n          affinityObject = {\n            affinity: getDefaultAffinity(tenantName, poolName),\n          };\n          break;\n        case \"nodeSelector\":\n          affinityObject = {\n            affinity: getNodeSelector(\n              nodeSelectorLabels,\n              withPodAntiAffinity,\n              tenantName,\n              poolName\n            ),\n          };\n          break;\n      }\n\n      const erasureCode = ecParity.split(\":\")[1];\n\n      let dataSend: ITenantCreator = {\n        name: tenantName,\n        namespace: namespace,\n        access_key: \"\",\n        secret_key: \"\",\n        access_keys: [],\n        secret_keys: [],\n        enable_tls: enableTLS && enableAutoCert,\n        enable_console: true,\n        enable_prometheus: true,\n        service_name: \"\",\n        image: imageName,\n        expose_minio: exposeMinIO,\n        expose_console: exposeConsole,\n        pools: [\n          {\n            name: poolName,\n            servers: distribution.nodes,\n            volumes_per_server: distribution.disks,\n            volume_configuration: {\n              size: distribution.pvSize,\n              storage_class_name: selectedStorageClass,\n            },\n            securityContext: tenantCustom ? tenantSecurityContext : null,\n            ...affinityObject,\n          },\n        ],\n        erasureCodingParity: parseInt(erasureCode, 10),\n      };\n\n      // Set Resources\n      if (\n        fields.tenantSize.resourcesCPURequest !== \"\" ||\n        fields.tenantSize.resourcesCPULimit !== \"\" ||\n        fields.tenantSize.resourcesMemoryRequest !== \"\" ||\n        fields.tenantSize.resourcesMemoryLimit !== \"\"\n      ) {\n        dataSend.pools[0].resources = {};\n        // requests\n        if (\n          fields.tenantSize.resourcesCPURequest !== \"\" ||\n          fields.tenantSize.resourcesMemoryRequest !== \"\"\n        ) {\n          dataSend.pools[0].resources.requests = {};\n          if (fields.tenantSize.resourcesCPURequest !== \"\") {\n            dataSend.pools[0].resources.requests.cpu = parseInt(\n              fields.tenantSize.resourcesCPURequest\n            );\n          }\n          if (fields.tenantSize.resourcesMemoryRequest !== \"\") {\n            dataSend.pools[0].resources.requests.memory = parseInt(\n              getBytes(fields.tenantSize.resourcesMemoryRequest, \"Gi\", true)\n            );\n          }\n        }\n        // limits\n        if (\n          fields.tenantSize.resourcesCPULimit !== \"\" ||\n          fields.tenantSize.resourcesMemoryLimit !== \"\"\n        ) {\n          dataSend.pools[0].resources.limits = {};\n          if (fields.tenantSize.resourcesCPULimit !== \"\") {\n            dataSend.pools[0].resources.limits.cpu = parseInt(\n              fields.tenantSize.resourcesCPULimit\n            );\n          }\n          if (fields.tenantSize.resourcesMemoryLimit !== \"\") {\n            dataSend.pools[0].resources.limits.memory = parseInt(\n              getBytes(fields.tenantSize.resourcesMemoryLimit, \"Gi\", true)\n            );\n          }\n        }\n      }\n      if (customDockerhub) {\n        dataSend = {\n          ...dataSend,\n          image_registry: {\n            registry: imageRegistry,\n            username: imageRegistryUsername,\n            password: imageRegistryPassword,\n          },\n        };\n      }\n\n      if (logSearchCustom) {\n        dataSend = {\n          ...dataSend,\n          logSearchConfiguration: {\n            storageClass:\n              logSearchSelectedStorageClass === \"default\"\n                ? \"\"\n                : logSearchSelectedStorageClass,\n            storageSize: parseInt(logSearchVolumeSize),\n            image: logSearchImage,\n            postgres_image: logSearchPostgresImage,\n            postgres_init_image: logSearchPostgresInitImage,\n            securityContext: logSearchSecurityContext,\n            postgres_securityContext: logSearchPostgresSecurityContext,\n          },\n        };\n      } else {\n        dataSend = {\n          ...dataSend,\n          logSearchConfiguration: {\n            image: logSearchImage,\n            postgres_image: logSearchPostgresImage,\n            postgres_init_image: logSearchPostgresInitImage,\n          },\n        };\n      }\n\n      if (prometheusCustom) {\n        dataSend = {\n          ...dataSend,\n          prometheusConfiguration: {\n            storageClass:\n              prometheusSelectedStorageClass === \"default\"\n                ? \"\"\n                : prometheusSelectedStorageClass,\n            storageSize: parseInt(prometheusVolumeSize),\n            image: prometheusImage,\n            sidecar_image: prometheusSidecarImage,\n            init_image: prometheusInitImage,\n            securityContext: prometheusSecurityContext,\n          },\n        };\n      } else {\n        dataSend = {\n          ...dataSend,\n          prometheusConfiguration: {\n            image: prometheusImage,\n            sidecar_image: prometheusSidecarImage,\n            init_image: prometheusInitImage,\n          },\n        };\n      }\n\n      let tenantCerts: any = null;\n      let consoleCerts: any = null;\n      let caCerts: any = null;\n      let consoleCaCerts: any = null;\n\n      if (caCertificates.length > 0) {\n        caCerts = {\n          ca_certificates: caCertificates\n            .map((keyPair: KeyPair) => keyPair.encoded_cert)\n            .filter((keyPair) => keyPair),\n        };\n      }\n\n      if (consoleCaCertificates.length > 0) {\n        consoleCaCerts = {\n          console_ca_certificates: consoleCaCertificates\n            .map((keyPair: KeyPair) => keyPair.encoded_cert)\n            .filter((keyPair) => keyPair),\n        };\n      }\n\n      if (enableTLS && minioCertificates.length > 0) {\n        tenantCerts = {\n          minio: minioCertificates\n            .map((keyPair: KeyPair) => ({\n              crt: keyPair.encoded_cert,\n              key: keyPair.encoded_key,\n            }))\n            .filter((keyPair) => keyPair.crt && keyPair.key),\n        };\n      }\n\n      if (\n        enableTLS &&\n        consoleCertificate.encoded_cert !== \"\" &&\n        consoleCertificate.encoded_key !== \"\"\n      ) {\n        consoleCerts = {\n          console: {\n            crt: consoleCertificate.encoded_cert,\n            key: consoleCertificate.encoded_key,\n          },\n        };\n      }\n\n      if (tenantCerts || consoleCerts || caCerts || consoleCaCerts) {\n        dataSend = {\n          ...dataSend,\n          tls: {\n            ...tenantCerts,\n            ...consoleCerts,\n            ...caCerts,\n            ...consoleCaCerts,\n          },\n        };\n      }\n\n      if (enableEncryption) {\n        let insertEncrypt = {};\n\n        switch (encryptionType) {\n          case \"gemalto\":\n            let gemaltoCAIntroduce = {};\n\n            if (gemaltoCA.encoded_cert !== \"\") {\n              gemaltoCAIntroduce = {\n                ca: gemaltoCA.encoded_cert,\n              };\n            }\n            insertEncrypt = {\n              gemalto: {\n                keysecure: {\n                  endpoint: gemaltoEndpoint,\n                  credentials: {\n                    token: gemaltoToken,\n                    domain: gemaltoDomain,\n                    retry: parseInt(gemaltoRetry),\n                  },\n                  tls: {\n                    ...gemaltoCAIntroduce,\n                  },\n                },\n              },\n            };\n            break;\n          case \"aws\":\n            insertEncrypt = {\n              aws: {\n                secretsmanager: {\n                  endpoint: awsEndpoint,\n                  region: awsRegion,\n                  kmskey: awsKMSKey,\n                  credentials: {\n                    accesskey: awsAccessKey,\n                    secretkey: awsSecretKey,\n                    token: awsToken,\n                  },\n                },\n              },\n            };\n            break;\n          case \"azure\":\n            insertEncrypt = {\n              azure: {\n                keyvault: {\n                  endpoint: azureEndpoint,\n                  credentials: {\n                    tenant_id: azureTenantID,\n                    client_id: azureClientID,\n                    client_secret: azureClientSecret,\n                  },\n                },\n              },\n            };\n            break;\n          case \"gcp\":\n            insertEncrypt = {\n              gcp: {\n                secretmanager: {\n                  project_id: gcpProjectID,\n                  endpoint: gcpEndpoint,\n                  credentials: {\n                    client_email: gcpClientEmail,\n                    client_id: gcpClientID,\n                    private_key_id: gcpPrivateKeyID,\n                    private_key: gcpPrivateKey,\n                  },\n                },\n              },\n            };\n            break;\n          case \"vault\":\n            let vaultKeyPair = null;\n            let vaultCAInsert = null;\n            if (\n              vaultCertificate.encoded_key !== \"\" &&\n              vaultCertificate.encoded_cert !== \"\"\n            ) {\n              vaultKeyPair = {\n                key: vaultCertificate.encoded_key,\n                crt: vaultCertificate.encoded_cert,\n              };\n            }\n            if (vaultCA.encoded_cert !== \"\") {\n              vaultCAInsert = {\n                ca: vaultCA.encoded_cert,\n              };\n            }\n            let vaultTLS = null;\n            if (vaultKeyPair || vaultCA) {\n              vaultTLS = {\n                tls: {\n                  ...vaultKeyPair,\n                  ...vaultCAInsert,\n                },\n              };\n            }\n            insertEncrypt = {\n              vault: {\n                endpoint: vaultEndpoint,\n                engine: vaultEngine,\n                namespace: vaultNamespace,\n                prefix: vaultPrefix,\n                approle: {\n                  engine: vaultAppRoleEngine,\n                  id: vaultId,\n                  secret: vaultSecret,\n                  retry: parseInt(vaultRetry),\n                },\n                ...vaultTLS,\n                status: {\n                  ping: parseInt(vaultPing),\n                },\n              },\n            };\n            break;\n        }\n\n        let encryptionServerKeyPair: any = {};\n        let encryptionClientKeyPair: any = {};\n\n        if (\n          clientCertificate.encoded_key !== \"\" &&\n          clientCertificate.encoded_cert !== \"\"\n        ) {\n          encryptionClientKeyPair = {\n            client: {\n              key: clientCertificate.encoded_key,\n              crt: clientCertificate.encoded_cert,\n            },\n          };\n        }\n\n        if (\n          serverCertificate.encoded_key !== \"\" &&\n          serverCertificate.encoded_cert !== \"\"\n        ) {\n          encryptionServerKeyPair = {\n            server: {\n              key: serverCertificate.encoded_key,\n              crt: serverCertificate.encoded_cert,\n            },\n          };\n        }\n\n        dataSend = {\n          ...dataSend,\n          encryption: {\n            replicas: kesReplicas,\n            securityContext: kesSecurityContext,\n            image: kesImage,\n            ...encryptionClientKeyPair,\n            ...encryptionServerKeyPair,\n            ...insertEncrypt,\n          },\n        };\n      }\n\n      let dataIDP: any = {};\n      switch (idpSelection) {\n        case \"Built-in\":\n          let keyarray = [];\n          for (let i = 0; i < accessKeys.length; i++) {\n            keyarray.push({\n              access_key: accessKeys[i],\n              secret_key: secretKeys[i],\n            });\n          }\n          dataIDP = {\n            keys: keyarray,\n          };\n          break;\n        case \"OpenID\":\n          dataIDP = {\n            oidc: {\n              configuration_url: openIDConfigurationURL,\n              client_id: openIDClientID,\n              secret_id: openIDSecretID,\n              claim_name: openIDClaimName,\n              callback_url: openIDCallbackURL,\n              scopes: openIDScopes,\n            },\n          };\n          break;\n        case \"AD\":\n          dataIDP = {\n            active_directory: {\n              url: ADURL,\n              skip_tls_verification: ADSkipTLS,\n              server_insecure: ADServerInsecure,\n              username_format: ADUserNameFormat,\n              username_search_filter: ADUserNameSearchFilter,\n              group_search_base_dn: ADGroupSearchBaseDN,\n              group_search_filter: ADGroupSearchFilter,\n              group_name_attribute: ADGroupNameAttribute,\n              user_dns: ADUserDNs,\n              lookup_bind_dn: ADLookupBindDN,\n              lookup_bind_password: ADLookupBindPassword,\n              user_dn_search_base_dn: ADUserDNSearchBaseDN,\n              user_dn_search_filter: ADUserDNSearchFilter,\n              server_start_tls: ADServerStartTLS,\n            },\n          };\n          break;\n      }\n\n      dataSend = {\n        ...dataSend,\n        idp: { ...dataIDP },\n      };\n      api\n        .invoke(\"POST\", `/api/v1/tenants`, dataSend)\n        .then((res) => {\n          const consoleSAList = get(res, \"console\", []);\n\n          let newSrvAcc: NewServiceAccount = {\n            idp: get(res, \"externalIDP\", false),\n            console: [],\n          };\n\n          if (consoleSAList) {\n            if (Array.isArray(consoleSAList)) {\n              const consoleItem = consoleSAList.map((consoleKey) => {\n                return {\n                  accessKey: consoleKey.access_key,\n                  secretKey: consoleKey.secret_key,\n                  api: \"s3v4\",\n                  path: \"auto\",\n                  url: consoleKey.url,\n                };\n              });\n\n              newSrvAcc.console = consoleItem;\n            } else {\n              newSrvAcc = {\n                console: {\n                  accessKey: res.console.access_key,\n                  secretKey: res.console.secret_key,\n                  url: res.console.url,\n                },\n              };\n            }\n          }\n          setAddSending(false);\n          setShowNewCredentials(true);\n          setCreatedAccount(newSrvAcc);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setAddSending(false);\n          setErrorSnackMessage(err);\n        });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [addSending]);\n\n  const cancelButton = {\n    label: \"Cancel\",\n    type: \"other\",\n    enabled: true,\n    action: () => {\n      resetAddTenantForm();\n      history.push(\"/tenants\");\n    },\n  };\n  const requiredPages = [\n    \"nameTenant\",\n    \"tenantSize\",\n    \"configure\",\n    \"affinity\",\n    \"identityProvider\",\n    \"security\",\n    \"encryption\",\n  ];\n  const createButton = {\n    label: \"Create\",\n    type: \"submit\",\n    enabled:\n      !addSending &&\n      selectedStorageClass !== \"\" &&\n      requiredPages.every((v) => validPages.includes(v)),\n    action: () => {\n      setAddSending(true);\n    },\n  };\n\n  const wizardSteps: IWizardElement[] = [\n    {\n      label: \"Setup\",\n      componentRender: <TenantResources />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Configure\",\n      advancedOnly: true,\n      componentRender: <Configure />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Images\",\n      advancedOnly: true,\n      componentRender: <Images />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Pod Placement\",\n      advancedOnly: true,\n      componentRender: <Affinity />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Identity Provider\",\n      advancedOnly: true,\n      componentRender: <IdentityProvider />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Security\",\n      advancedOnly: true,\n      componentRender: <Security />,\n      buttons: [cancelButton, createButton],\n    },\n    {\n      label: \"Encryption\",\n      advancedOnly: true,\n      componentRender: <Encryption />,\n      buttons: [cancelButton, createButton],\n    },\n  ];\n\n  let filteredWizardSteps = wizardSteps;\n\n  const closeCredentialsModal = () => {\n    resetAddTenantForm();\n    history.push(\"/tenants\");\n  };\n\n  return (\n    <Fragment>\n      {showNewCredentials && (\n        <CredentialsPrompt\n          newServiceAccount={createdAccount}\n          open={showNewCredentials}\n          closeModal={() => {\n            closeCredentialsModal();\n          }}\n          entity=\"Tenant\"\n        />\n      )}\n      <PageHeader label={\"Create New Tenant\"} />\n      <BackLink\n        to={\"/tenants\"}\n        label={\"Return to Tenant List\"}\n        executeOnClick={resetAddTenantForm}\n      />\n      <PageLayout>\n        {addSending && (\n          <Grid item xs={12}>\n            <LinearProgress />\n          </Grid>\n        )}\n        <Grid item xs={12} className={classes.pageBox}>\n          <GenericWizard wizardSteps={filteredWizardSteps} />\n        </Grid>\n      </PageLayout>\n    </Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  namespace: state.tenants.createTenant.fields.nameTenant.namespace,\n  validPages: state.tenants.createTenant.validPages,\n  fields: state.tenants.createTenant.fields,\n  certificates: state.tenants.createTenant.certificates,\n  selectedStorageClass:\n    state.tenants.createTenant.fields.nameTenant.selectedStorageClass,\n});\n\nconst connector = connect(mapState, {\n  setErrorSnackMessage,\n  updateAddField,\n  resetAddTenantForm,\n});\n\nexport default withStyles(styles)(connector(AddTenant));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport get from \"lodash/get\";\nimport { ITenant } from \"./types\";\n\nexport interface Opts {\n  label: string;\n  value: string;\n}\n\nexport interface IQuotaElement {\n  hard: number;\n  name: string;\n}\n\nexport interface IQuotas {\n  elements?: IQuotaElement[];\n  name: string;\n}\n\nexport const minMemReq = 2147483648;\n\nexport interface KeyPair {\n  id: string;\n  encoded_cert: string;\n  encoded_key: string;\n  cert: string;\n  key: string;\n}\n\nexport const ecListTransform = (ecList: string[]): Opts[] => {\n  return ecList.map((value) => {\n    return { label: value, value };\n  });\n};\n\nexport const getLimitSizes = (resourceQuotas: IQuotas) => {\n  const quotas: IQuotaElement[] = get(resourceQuotas, \"elements\", []);\n\n  const returnQuotas: any = {};\n\n  quotas.forEach((rsQuota) => {\n    const stCName = rsQuota.name.split(\n      \".storageclass.storage.k8s.io/requests.storage\"\n    )[0];\n    const hard = get(rsQuota, \"hard\", 0);\n    const used = get(rsQuota, \"used\", 0);\n\n    returnQuotas[stCName] = hard - used;\n  });\n\n  return returnQuotas;\n};\n\nexport const tenantIsOnline = (tenant: ITenant): boolean => {\n  if (tenant.currentState === \"\") {\n    return false;\n  }\n  if (\n    !tenant.status &&\n    tenant.health_status !== \"green\" &&\n    tenant.health_status !== \"yellow\"\n  ) {\n    return false;\n  }\n  if (\n    tenant.status &&\n    tenant.status.health_status !== \"green\" &&\n    tenant.status.health_status !== \"yellow\"\n  ) {\n    return false;\n  }\n  return true;\n};\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport { IAffinityModel } from \"../../../../common/types\";\n\nexport const getDefaultAffinity = (tenantName: string, poolName: string) => {\n  const defaultAffinity: IAffinityModel = {\n    podAntiAffinity: {\n      requiredDuringSchedulingIgnoredDuringExecution: [\n        {\n          labelSelector: {\n            matchExpressions: [\n              {\n                key: \"v1.min.io/tenant\",\n                operator: \"In\",\n                values: [tenantName],\n              },\n              {\n                key: \"v1.min.io/pool\",\n                operator: \"In\",\n                values: [poolName],\n              },\n            ],\n          },\n          topologyKey: \"kubernetes.io/hostname\",\n        },\n      ],\n    },\n  };\n  return defaultAffinity;\n};\n\nexport const getNodeSelector = (\n  labels: string,\n  withPodAntiAffinity: boolean,\n  tenantName: string,\n  poolName: string\n) => {\n  // Labels in the form of key1=value1&key2=value2&key3=value3...\n  const splittedLabels = labels.split(\"&\");\n  let matchExpressions: any = [];\n\n  splittedLabels.forEach((label: string) => {\n    const splitKeyValue = label.split(\"=\");\n    if (splitKeyValue.length === 2) {\n      matchExpressions.push({\n        key: splitKeyValue[0],\n        operator: \"In\",\n        values: [splitKeyValue[1]],\n      });\n    }\n  });\n\n  const nodeSelector: IAffinityModel = {\n    nodeAffinity: {\n      requiredDuringSchedulingIgnoredDuringExecution: {\n        nodeSelectorTerms: [\n          {\n            matchExpressions: matchExpressions,\n          },\n        ],\n      },\n    },\n  };\n  if (withPodAntiAffinity) {\n    const def = getDefaultAffinity(tenantName, poolName);\n    nodeSelector.podAntiAffinity = def.podAntiAffinity;\n  }\n  console.log(nodeSelector);\n  return nodeSelector;\n};\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { ITenant } from \"./ListTenants/types\";\nimport { Opts } from \"./ListTenants/utils\";\nimport {\n  ADD_TENANT_ADD_CA_KEYPAIR,\n  ADD_TENANT_ADD_CONSOLE_CA_KEYPAIR,\n  ADD_TENANT_ADD_CONSOLE_CERT,\n  ADD_TENANT_ADD_FILE_TO_CA_KEYPAIR,\n  ADD_TENANT_ADD_FILE_TO_CONSOLE_CA_KEYPAIR,\n  ADD_TENANT_ADD_FILE_TO_MINIO_KEYPAIR,\n  ADD_TENANT_ADD_MINIO_KEYPAIR,\n  ADD_TENANT_DELETE_CA_KEYPAIR,\n  ADD_TENANT_DELETE_CONSOLE_CA_KEYPAIR,\n  ADD_TENANT_DELETE_MINIO_KEYPAIR,\n  ADD_TENANT_ENCRYPTION_CLIENT_CERT,\n  ADD_TENANT_ENCRYPTION_GEMALTO_CA,\n  ADD_TENANT_ENCRYPTION_SERVER_CERT,\n  ADD_TENANT_ENCRYPTION_VAULT_CA,\n  ADD_TENANT_ENCRYPTION_VAULT_CERT,\n  ADD_TENANT_RESET_FORM,\n  ADD_TENANT_SET_CURRENT_PAGE,\n  ADD_TENANT_SET_LIMIT_SIZE,\n  ADD_TENANT_SET_PAGE_VALID,\n  ADD_TENANT_SET_STORAGE_CLASSES_LIST,\n  ADD_TENANT_UPDATE_FIELD,\n  TENANT_DETAILS_SET_CURRENT_TENANT,\n  TENANT_DETAILS_SET_LOADING,\n  TENANT_DETAILS_SET_TAB,\n  TENANT_DETAILS_SET_TENANT,\n  ADD_TENANT_SET_KEY_PAIR_VALUE,\n  LabelKeyPair,\n} from \"./types\";\n\n// Basic actions\nexport const setWizardPage = (page: number) => {\n  return {\n    type: ADD_TENANT_SET_CURRENT_PAGE,\n    page,\n  };\n};\n\nexport const updateAddField = (\n  pageName: string,\n  fieldName: string,\n  value: any\n) => {\n  return {\n    type: ADD_TENANT_UPDATE_FIELD,\n    pageName,\n    field: fieldName,\n    value,\n  };\n};\n\nexport const isPageValid = (pageName: string, valid: boolean) => {\n  return {\n    type: ADD_TENANT_SET_PAGE_VALID,\n    pageName,\n    valid,\n  };\n};\n\n// Name Tenant actions\n\nexport const setStorageClassesList = (storageClasses: Opts[]) => {\n  return {\n    type: ADD_TENANT_SET_STORAGE_CLASSES_LIST,\n    storageClasses,\n  };\n};\n\nexport const setLimitSize = (limitSize: any) => {\n  return {\n    type: ADD_TENANT_SET_LIMIT_SIZE,\n    limitSize,\n  };\n};\n\n// Security actions\n\nexport const addCaCertificate = () => {\n  return {\n    type: ADD_TENANT_ADD_CA_KEYPAIR,\n  };\n};\n\nexport const deleteCaCertificate = (id: string) => {\n  return {\n    type: ADD_TENANT_DELETE_CA_KEYPAIR,\n    id,\n  };\n};\n\nexport const addFileToCaCertificates = (\n  id: string,\n  key: string,\n  fileName: string,\n  value: string\n) => {\n  return {\n    type: ADD_TENANT_ADD_FILE_TO_CA_KEYPAIR,\n    id,\n    key,\n    fileName,\n    value,\n  };\n};\n\nexport const addConsoleCaCertificate = () => {\n  return {\n    type: ADD_TENANT_ADD_CONSOLE_CA_KEYPAIR,\n  };\n};\n\nexport const deleteConsoleCaCertificate = (id: string) => {\n  return {\n    type: ADD_TENANT_DELETE_CONSOLE_CA_KEYPAIR,\n    id,\n  };\n};\n\nexport const addFileToConsoleCaCertificates = (\n  id: string,\n  key: string,\n  fileName: string,\n  value: string\n) => {\n  return {\n    type: ADD_TENANT_ADD_FILE_TO_CONSOLE_CA_KEYPAIR,\n    id,\n    key,\n    fileName,\n    value,\n  };\n};\n\nexport const addKeyPair = () => {\n  return {\n    type: ADD_TENANT_ADD_MINIO_KEYPAIR,\n  };\n};\n\nexport const deleteKeyPair = (id: string) => {\n  return {\n    type: ADD_TENANT_DELETE_MINIO_KEYPAIR,\n    id,\n  };\n};\n\nexport const addFileToKeyPair = (\n  id: string,\n  key: string,\n  fileName: string,\n  value: string\n) => {\n  return {\n    type: ADD_TENANT_ADD_FILE_TO_MINIO_KEYPAIR,\n    id,\n    key,\n    fileName,\n    value,\n  };\n};\n\nexport const addConsoleCertificate = (\n  key: string,\n  fileName: string,\n  value: string\n) => {\n  return {\n    type: ADD_TENANT_ADD_CONSOLE_CERT,\n    key,\n    fileName,\n    value,\n  };\n};\n\nexport const addFileServerCert = (\n  key: string,\n  fileName: string,\n  value: string\n) => {\n  return {\n    type: ADD_TENANT_ENCRYPTION_SERVER_CERT,\n    key,\n    fileName,\n    value,\n  };\n};\n\nexport const addFileClientCert = (\n  key: string,\n  fileName: string,\n  value: string\n) => {\n  return {\n    type: ADD_TENANT_ENCRYPTION_CLIENT_CERT,\n    key,\n    fileName,\n    value,\n  };\n};\n\nexport const addFileVaultCert = (\n  key: string,\n  fileName: string,\n  value: string\n) => {\n  return {\n    type: ADD_TENANT_ENCRYPTION_VAULT_CERT,\n    key,\n    fileName,\n    value,\n  };\n};\n\nexport const addFileVaultCa = (fileName: string, value: string) => {\n  return {\n    type: ADD_TENANT_ENCRYPTION_VAULT_CA,\n    fileName,\n    value,\n  };\n};\n\nexport const addFileGemaltoCa = (fileName: string, value: string) => {\n  return {\n    type: ADD_TENANT_ENCRYPTION_GEMALTO_CA,\n    fileName,\n    value,\n  };\n};\n\nexport const resetAddTenantForm = () => {\n  return {\n    type: ADD_TENANT_RESET_FORM,\n  };\n};\n\nexport const setTenantDetailsLoad = (loading: boolean) => {\n  return {\n    type: TENANT_DETAILS_SET_LOADING,\n    state: loading,\n  };\n};\n\nexport const setTenantName = (tenantName: string, tenantNamespace: string) => {\n  return {\n    type: TENANT_DETAILS_SET_CURRENT_TENANT,\n    name: tenantName,\n    namespace: tenantNamespace,\n  };\n};\n\nexport const setTenantInfo = (tenant: ITenant | null) => {\n  return {\n    type: TENANT_DETAILS_SET_TENANT,\n    tenant,\n  };\n};\n\nexport const setTenantTab = (tab: string) => {\n  return {\n    type: TENANT_DETAILS_SET_TAB,\n    tab,\n  };\n};\n\nexport const setKeyValuePairs = (newArray: LabelKeyPair[]) => {\n  return {\n    type: ADD_TENANT_SET_KEY_PAIR_VALUE,\n    newArray,\n  };\n};\n","import React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport { Theme } from \"@mui/material/styles\";\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    errorBlock: {\n      color: theme.palette?.error.main || \"#C83B51\",\n    },\n  });\n\ninterface IErrorBlockProps {\n  classes: any;\n  errorMessage: string;\n  withBreak?: boolean;\n}\n\nconst ErrorBlock = ({\n  classes,\n  errorMessage,\n  withBreak = true,\n}: IErrorBlockProps) => {\n  return (\n    <React.Fragment>\n      {withBreak && <br />}\n      <Typography component=\"p\" variant=\"body1\" className={classes.errorBlock}>\n        {errorMessage}\n      </Typography>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(ErrorBlock);\n"],"names":["withStyles","theme","createStyles","link","display","alignItems","textDecoration","maxWidth","padding","color","palette","primary","light","fontSize","icon","marginRight","justifyContent","width","to","label","classes","className","executeOnClick","onClick","container","flexFlow","inputWithCopy","background","height","inputLabel","fieldBasic","value","OutlinedInput","readOnly","endAdornment","InputAdornment","position","text","BoxIconButton","tooltip","onMouseDown","edge","warningBlock","margin","credentialTitle","fontWeight","buttonContainer","textAlign","marginTop","credentialsPanel","overflowY","maxHeight","promptTitle","buttonSpacer","promptIcon","newServiceAccount","open","closeModal","entity","consoleCreds","get","idp","ModalWrapper","modalOpen","onClose","title","titleIcon","Grid","item","xs","formScrollable","Array","isArray","map","credentialsPair","index","accessKey","secretKey","WarnIcon","Button","id","variant","consoleExtras","cCreds","itemMap","url","access_key","secret_key","api","path","console","filename","element","document","createElement","setAttribute","encodeURIComponent","style","body","appendChild","click","removeChild","download","JSON","stringify","endIcon","tooltipHelper","valueString","whiteSpace","overflow","textOverflow","fileInputField","fileInputStyles","textBoxContainer","border","paddingLeft","onChange","name","disabled","required","error","accept","useState","showFileSelector","setShowSelector","fieldBottom","fieldContainer","errorInField","InputLabel","htmlFor","fieldLabelError","tooltipContainer","Tooltip","placement","HelpIcon","type","e","fileName","evt","callback","file","target","files","reader","FileReader","readAsDataURL","onload","fileBase64","result","fileArray","toString","split","length","fileProcess","data","IconButton","component","disableRipple","disableFocusRipple","size","Cancel","ErrorBlock","errorMessage","fileReselect","AttachFile","pageContentStyles","children","contentSpacer","IMkEnvs","connector","connect","state","storageClasses","tenants","createTenant","customImage","fields","configure","imageName","customDockerhub","imageRegistry","imageRegistryUsername","imageRegistryPassword","exposeMinIO","exposeConsole","prometheusCustom","tenantCustom","logSearchCustom","logSearchVolumeSize","logSearchSizeFactor","prometheusVolumeSize","prometheusSizeFactor","logSearchSelectedStorageClass","logSearchImage","kesImage","logSearchPostgresImage","logSearchPostgresInitImage","prometheusSelectedStorageClass","prometheusImage","prometheusSidecarImage","prometheusInitImage","selectedStorageClass","nameTenant","tenantSecurityContext","logSearchSecurityContext","logSearchPostgresSecurityContext","prometheusSecurityContext","updateAddField","isPageValid","configSectionItem","tenantCustomizationFields","marginLeft","containerItem","fieldGroup","createTenantCommon","paddingTop","marginBottom","responsiveSectionItem","logSearchCustomFields","fieldSpaceTop","prometheusCustomFields","modalBasic","wizardCommon","validationErrors","setValidationErrors","configureSTClasses","updateField","useCallback","field","useEffect","customAccountValidation","fieldKey","runAsUser","customValidation","parseInt","customValidationMessage","runAsGroup","fsGroup","pattern","customPatternMessage","commonVal","commonFormValidation","Object","keys","filter","cleanValidation","fieldName","clearValidationError","Paper","paperWrapper","headerElement","h3Section","descriptionText","FormSwitchWrapper","checked","multiContainer","InputBoxWrapper","min","runAsNonRoot","SelectWrapper","options","idpSelection","identityProvider","accessKeys","secretKeys","openIDConfigurationURL","openIDClientID","openIDSecretID","openIDCallbackURL","openIDClaimName","openIDScopes","ADURL","ADSkipTLS","ADServerInsecure","ADUserNameSearchFilter","ADGroupSearchBaseDN","ADGroupSearchFilter","ADGroupNameAttribute","ADUserDNs","ADUserNameFormat","ADLookupBindDN","ADLookupBindPassword","ADUserDNSearchBaseDN","ADUserDNSearchFilter","ADServerStartTLS","shortened","gridTemplateColumns","gridGap","buttonTray","overlayAction","protocolRadioOptions","adUserDnRows","formFieldStyles","updateUserField","newUserField","updatePwordField","updateADUserField","newADUserDNsField","customIDPValidation","i","push","inputs","_","Fragment","placeholder","Add","splice","RemoveIcon","getRandomString","Casino","Delete","RadioGroupSelector","currentSelection","selectorOptions","formFieldRow","Typography","gutterBottom","enableTLS","security","enableAutoCert","enableCustomCerts","minioCertificates","certificates","caCertificates","addFileToCaCertificates","deleteCaCertificate","addCaCertificate","addKeyPair","addFileToKeyPair","deleteKeyPair","minioCertificateRows","borderBottom","flex","fileItem","minWidth","minioCertsContainer","minioCACertsRow","rowActions","keyPair","FileSelector","encodedValue","cert","key","AddIcon","replicas","encryption","enableEncryption","encryptionType","gemaltoEndpoint","gemaltoToken","gemaltoDomain","gemaltoRetry","awsEndpoint","awsRegion","awsKMSKey","awsAccessKey","awsSecretKey","awsToken","vaultEndpoint","vaultEngine","vaultNamespace","vaultPrefix","vaultAppRoleEngine","vaultId","vaultSecret","vaultRetry","vaultPing","azureEndpoint","azureTenantID","azureClientID","azureClientSecret","gcpProjectID","gcpEndpoint","gcpClientEmail","gcpClientID","gcpPrivateKeyID","gcpPrivateKey","enableCustomCertsForKES","serverCertificate","clientCertificate","vaultCertificate","vaultCA","gemaltoCA","kesSecurityContext","addFileServerCert","addFileClientCert","addFileVaultCert","addFileVaultCa","addFileGemaltoCa","encryptionTypeOptions","mutualTlsConfig","rightSpacer","responsiveContainer","encryptionAvailable","encoded_key","encoded_cert","encryptionValidation","podAffinity","affinity","nodeSelectorLabels","withPodAntiAffinity","keyValuePairs","nodeSelectorPairs","setModalErrorSnackMessage","setKeyValuePairs","affinityConfigField","affinityFieldLabel","radioField","affinityLabelKey","affinityLabelValue","affinityRow","loading","setLoading","keyValueMap","setKeyValueMap","keyOptions","setKeyOptions","then","res","k","catch","err","vl","kvp","kvs","a","indexOf","join","valid","splittedLabels","forEach","splitItem","affinityHelpText","newKey","arrCp","assign","v","mapDispatchToProps","setErrorSnackMessage","wrapText","wordWrap","deleteDialogStyles","namespace","addNamespaceOpen","closeAddNamespaceModalAndRefresh","addNamespaceLoading","setAddNamespaceLoading","ConfirmDialog","confirmText","confirmButtonProps","isOpen","isLoading","onConfirm","confirmationContent","LinearProgress","DialogContentText","volumeSize","tenantSize","sizeFactor","drivesPerServer","nodes","memoryNode","resourcesMemoryRequest","ecParity","ecParityChoices","cleanECChoices","resourcesSize","distribution","ecParityCalc","limitSize","cpuToUse","resourcesCPURequest","integrationSelection","root","table","usableInformation","storageFactors","find","erasureCode","Divider","Table","TableBody","TableRow","TableCell","scope","align","typeSelection","storageClass","disks","niceBytes","pvSize","persistentVolumes","rawCapacity","maxCapacity","Math","floor","maxFailureTolerations","CPU","memory","driveSize","sizeUnit","maxAllocatableResources","maxCPUsUse","maxMemorySize","resourcesSpecifyLimit","resourcesCPURequestError","resourcesCPULimitError","resourcesCPULimit","resourcesMemoryRequestError","resourcesMemoryLimitError","resourcesMemoryLimit","compositeFieldContainer","compositeAddOn","memoryExists","cpuExists","maxMemory","mem_priority","max_allocatable_mem","cpu_priority","max_allocatable_cpu","maxAllocatableCPU","baseCpuUse","max","baseMemoryUse","isNaN","validity","log","errorFlag","setErrorFlag","nodeError","setNodeError","ecCodeValidated","erasureCodeCalc","includes","defaultEC","factor","getBytes","clusterCapacity","unit","distrCalculate","calculateDistribution","parsedSize","commonValidation","trim","ecList","ecListTransform","k8sfactorForDropdown","selectedStorageType","formToRender","updateMainField","undefined","setConfigs","mkPanelConfigurations","mainSelection","resourcesConfigurations","aws","azure","gcp","variantSelectorLabel","variantSelectorValues","configurations","sizingComponent","default","tenantName","setStorageClassesList","setLimitSize","sizePreview","emptyNamespace","setEmptyNamespace","loadingNamespaceInfo","setLoadingNamespaceInfo","showCreateButton","setShowCreateButton","openAddNSConfirm","setOpenAddNSConfirm","getNamespaceInformation","tenantsList","elements","getLimitSizes","newStorage","stExists","findIndex","detailedError","debounceNamespace","useMemo","debounce","cancel","customNamespaceError","isValid","frmValidationCleanup","refresh","md","sx","minHeight","overlayIcon","features","session","formRender","setFormRender","setConfiguration","validPages","resetAddTenantForm","pageBox","settingsCommon","showNewCredentials","setShowNewCredentials","createdAccount","setCreatedAccount","addSending","setAddSending","consoleCaCertificates","consoleCertificate","affinityType","kesReplicas","poolName","generatePoolName","affinityObject","getDefaultAffinity","getNodeSelector","dataSend","access_keys","secret_keys","enable_tls","enable_console","enable_prometheus","service_name","image","expose_minio","expose_console","pools","servers","volumes_per_server","volume_configuration","storage_class_name","securityContext","erasureCodingParity","resources","requests","cpu","limits","image_registry","registry","username","password","logSearchConfiguration","storageSize","postgres_image","postgres_init_image","postgres_securityContext","prometheusConfiguration","sidecar_image","init_image","tenantCerts","consoleCerts","caCerts","consoleCaCerts","ca_certificates","console_ca_certificates","minio","crt","tls","insertEncrypt","gemaltoCAIntroduce","ca","gemalto","keysecure","endpoint","credentials","token","domain","retry","secretsmanager","region","kmskey","accesskey","secretkey","keyvault","tenant_id","client_id","client_secret","secretmanager","project_id","client_email","private_key_id","private_key","vaultKeyPair","vaultCAInsert","vaultTLS","vault","engine","prefix","approle","secret","status","ping","encryptionServerKeyPair","encryptionClientKeyPair","client","server","dataIDP","keyarray","oidc","configuration_url","secret_id","claim_name","callback_url","scopes","active_directory","skip_tls_verification","server_insecure","username_format","username_search_filter","group_search_base_dn","group_search_filter","group_name_attribute","user_dns","lookup_bind_dn","lookup_bind_password","user_dn_search_base_dn","user_dn_search_filter","server_start_tls","consoleSAList","newSrvAcc","consoleItem","consoleKey","cancelButton","enabled","action","history","createButton","every","filteredWizardSteps","componentRender","buttons","advancedOnly","CredentialsPrompt","PageHeader","BackLink","PageLayout","GenericWizard","wizardSteps","resourceQuotas","quotas","returnQuotas","rsQuota","stCName","hard","used","tenantIsOnline","tenant","currentState","health_status","podAntiAffinity","requiredDuringSchedulingIgnoredDuringExecution","labelSelector","matchExpressions","operator","values","topologyKey","labels","splitKeyValue","nodeSelector","nodeAffinity","nodeSelectorTerms","def","pageName","ADD_TENANT_UPDATE_FIELD","ADD_TENANT_SET_PAGE_VALID","ADD_TENANT_SET_STORAGE_CLASSES_LIST","ADD_TENANT_SET_LIMIT_SIZE","ADD_TENANT_ADD_CA_KEYPAIR","ADD_TENANT_DELETE_CA_KEYPAIR","ADD_TENANT_ADD_FILE_TO_CA_KEYPAIR","ADD_TENANT_ADD_MINIO_KEYPAIR","ADD_TENANT_DELETE_MINIO_KEYPAIR","ADD_TENANT_ADD_FILE_TO_MINIO_KEYPAIR","ADD_TENANT_ENCRYPTION_SERVER_CERT","ADD_TENANT_ENCRYPTION_CLIENT_CERT","ADD_TENANT_ENCRYPTION_VAULT_CERT","ADD_TENANT_ENCRYPTION_VAULT_CA","ADD_TENANT_ENCRYPTION_GEMALTO_CA","ADD_TENANT_RESET_FORM","setTenantDetailsLoad","TENANT_DETAILS_SET_LOADING","setTenantName","tenantNamespace","TENANT_DETAILS_SET_CURRENT_TENANT","setTenantInfo","TENANT_DETAILS_SET_TENANT","setTenantTab","tab","TENANT_DETAILS_SET_TAB","newArray","ADD_TENANT_SET_KEY_PAIR_VALUE","errorBlock","main","withBreak"],"sourceRoot":""}