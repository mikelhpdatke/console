{"version":3,"file":"static/js/9732.a901633e.chunk.js","mappings":"gRAsFMA,GAAYC,EAAAA,EAAAA,IAAQ,KAAM,CAC9BC,oBAAqBC,EAAAA,KAGvB,WAAeC,EAAAA,EAAAA,IAtDA,SAACC,GAAD,OAAkBC,EAAAA,EAAAA,GAAa,MAsD9C,CAAkCN,GApDlB,SAAC,GAAqD,EAAnDO,QAAoD,IAA3CL,EAA0C,EAA1CA,oBAC1B,GAA8BM,EAAAA,EAAAA,WAAkB,GAAhD,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAsCF,EAAAA,EAAAA,UAAuB,MAA7D,eAAOG,EAAP,KAAoBC,EAApB,KAEMC,GAAaC,EAAAA,EAAAA,cAAY,WAC7BC,EAAAA,EAAAA,OACU,MADV,sBAEGC,MAAK,SAACC,GACLL,EAAeK,GACfP,GAAW,MAEZQ,OAAM,SAACC,GACNjB,EAAoBiB,GACpBT,GAAW,QAEd,CAACE,EAAgBF,EAAYR,KAEhCkB,EAAAA,EAAAA,YAAU,WACJX,GACFI,MAED,CAACJ,EAASI,IAEb,IAAMQ,EAAUC,GAAAA,CAAIX,EAAa,UAAW,MAE5C,OACE,SAAC,EAAAY,SAAD,WACE,SAAC,KAAD,CAAMC,WAAS,EAAf,SACGf,GACC,SAAC,KAAD,CAAMgB,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,OAGF,SAAC,EAAAH,SAAD,UACe,OAAZF,GACC,SAAC,KAAD,CAAMG,WAAS,EAAf,UACE,SAAC,IAAD,OAGF,SAAC,IAAD,CAAgBG,MAAOhB","sources":["screens/Console/Dashboard/Metrics.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport get from \"lodash/get\";\nimport Grid from \"@mui/material/Grid\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { LinearProgress } from \"@mui/material\";\nimport api from \"../../../common/api\";\nimport { Usage } from \"./types\";\nimport { setErrorSnackMessage } from \"../../../actions\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport PrDashboard from \"./Prometheus/PrDashboard\";\nimport BasicDashboard from \"./BasicDashboard/BasicDashboard\";\n\ninterface IMetricsSimple {\n  classes: any;\n  displayErrorMessage: typeof setErrorSnackMessage;\n}\n\nconst styles = (theme: Theme) => createStyles({});\n\nconst Metrics = ({ classes, displayErrorMessage }: IMetricsSimple) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [basicResult, setBasicResult] = useState<Usage | null>(null);\n\n  const fetchUsage = useCallback(() => {\n    api\n      .invoke(\"GET\", `/api/v1/admin/info`)\n      .then((res: Usage) => {\n        setBasicResult(res);\n        setLoading(false);\n      })\n      .catch((err: ErrorResponseHandler) => {\n        displayErrorMessage(err);\n        setLoading(false);\n      });\n  }, [setBasicResult, setLoading, displayErrorMessage]);\n\n  useEffect(() => {\n    if (loading) {\n      fetchUsage();\n    }\n  }, [loading, fetchUsage]);\n\n  const widgets = get(basicResult, \"widgets\", null);\n\n  return (\n    <Fragment>\n      <Grid container>\n        {loading ? (\n          <Grid item xs={12}>\n            <LinearProgress />\n          </Grid>\n        ) : (\n          <Fragment>\n            {widgets !== null ? (\n              <Grid container>\n                <PrDashboard />\n              </Grid>\n            ) : (\n              <BasicDashboard usage={basicResult} />\n            )}\n          </Fragment>\n        )}\n      </Grid>\n    </Fragment>\n  );\n};\n\nconst connector = connect(null, {\n  displayErrorMessage: setErrorSnackMessage,\n});\n\nexport default withStyles(styles)(connector(Metrics));\n"],"names":["connector","connect","displayErrorMessage","setErrorSnackMessage","withStyles","theme","createStyles","classes","useState","loading","setLoading","basicResult","setBasicResult","fetchUsage","useCallback","api","then","res","catch","err","useEffect","widgets","get","Fragment","container","item","xs","usage"],"sourceRoot":""}